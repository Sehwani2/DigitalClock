/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include "7SEG.h"
#include "CLCD.h"
#include "lap.h"
#include "buzzer.h"
#include "btn.h"
#include "stopwatch.h"
#include "watch.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
volatile Mode mode;
bool BuzLock;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */

int _write(int file, char*p , int len)
{
	HAL_UART_Transmit(&huart3, p , len , 10);
	return len;
}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM2_Init();
  MX_TIM6_Init();
  MX_USART3_UART_Init();

  /* Initialize interrupts */
  MX_NVIC_Init();
  /* USER CODE BEGIN 2 */
	_7SEG_GPIO_Init();

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);

	HAL_TIM_Base_Start_IT(&htim6);
	_7SEG_SetNumber(DGT2, 0, OFF);

	CLCD_GPIO_Init();
	CLCD_Init();
	CLCD_Clear();

	mode = WATCH;

	Buz1.BuzOnOff = false;
	Buz1.BuzCount = 0;
	Buz1.BuzFlag = false;
	Buz1.BuzTone = Idle_Released;
	BuzLock = false;

	Btn1.is_pressed = false;
	Btn2.is_pressed = false;
	Btn3.is_pressed = false;
	Btn4.is_pressed = false;

	Btn1.ReleasedTime = Idle_Released;
	Btn2.ReleasedTime = Idle_Released;
	Btn3.ReleasedTime = Idle_Released;
	Btn4.ReleasedTime = Idle_Released;

	Btn1.holdTime = BtnHold_Idle;
	Btn2.holdTime = BtnHold_Idle;
	Btn3.holdTime = BtnHold_Idle;
	Btn4.holdTime = BtnHold_Idle;

	Btn1.btnThreshold = Idle_Threshold;
	Btn2.btnThreshold = Idle_Threshold;
	Btn3.btnThreshold = Idle_Threshold;
	Btn4.btnThreshold = Idle_Threshold;

	watch = (Watch){
	    .Time = {2024, 9, 22, 0, 0, 1, 1},
	    .isLeap = false,
	    .WatchMode = MODE_12_HOUR
	};

	watchConfig = (WatchConfig){
		.WatchTime = SET_SECOND,
		.SubMode = WATCH_NORMAL,
		.NextItem = false
	};


  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch(mode)
	  {
	  case WATCH:
		  switch(watchConfig.SubMode)
		  {
		  case WATCH_NORMAL:
			  updateWatchDisplay();
			  checkAndRingBuzzer();
			  break;
		  case WATCH_CLOCK_SETTING:
			  ClockSettingMode();
			  break;
		  }
		  //btn press event
		  //btn1
		  if (Btn1.state == Pressing)
		  {
			  CheckBtnHoldingTime(&Btn1, GPIOE, GPIO_PIN_3);
			  BtnThresHoldEvent(&Btn1, GPIOE, GPIO_PIN_3);

			  if(Btn1.btnThreshold ==  Short_Mid_Threshold)
			  {
				watchConfig.SubMode = !watchConfig.SubMode;
			  	CLCD_Clear();
			  	Btn1.btnThreshold =  Idle_Threshold;
			  }
		  }
		  else
		  {
			switch (Btn1.ReleasedTime)
			{
			case Short_Released:
				if(watchConfig.SubMode == WATCH_NORMAL)
				{
					mode = (mode + 1) % NUM_MODES;
				}
				Btn1.ReleasedTime = Idle_Released;
				break;
			case Mid_Released:
				break;
			case Long_Released:
				break;
			default :
				break;
			}
		  }
		  //btn2
		  if (Btn2.state == Pressing)
		  {
			  CheckBtnHoldingTime(&Btn2, GPIOC, GPIO_PIN_15);
			  BtnThresHoldEvent(&Btn2, GPIOC, GPIO_PIN_15);

				if(watchConfig.NextItem && watchConfig.SubMode == WATCH_CLOCK_SETTING)
				{
					watchConfig.NextItem = 0;
					// Next item
					watchConfig.WatchTime = (watchConfig.WatchTime +1) % NUM_ITEM ;
				}
			}
		  else
		  {
			switch (Btn2.ReleasedTime)
			{
			case Short_Released:
				if(watchConfig.SubMode == WATCH_NORMAL)
				{
					BuzLock = !BuzLock;
				}
				Btn2.ReleasedTime = Idle_Released;
				break;
			case Mid_Released:
				break;
			case Long_Released:
				break;
			default :
				break;
			}
		  }
		  //btn3
		  if (Btn3.state == Pressing)
		  {
			  CheckBtnHoldingTime(&Btn3, GPIOD, GPIO_PIN_4);
			  BtnThresHoldEvent(&Btn3, GPIOD, GPIO_PIN_4);

			  if(watchConfig.flags.increaseFlagOnce)
			  {
				  watchConfig.flags.increaseFlagOnce = 0;
				  IncreaseTimeOnce();
			  }

			  switch(Btn3.holdTime)
			  {
			  	  case BtnHold_Mid:
			  		  if(watchConfig.flags.increaseFlag150ms)
			  		  {
			  			watchConfig.flags.increaseFlag150ms = 0;
			  			IncreaseTimeOnce();
			  		  }
			  		  break;
			  	  case BtnHold_Long:
			  		if(watchConfig.flags.increaseFlag20ms)
			  		{
			  			watchConfig.flags.increaseFlag20ms = 0;
			  			IncreaseTimeOnce();
			  		}
			  		  break;
			  }

		  }
		  else
		  {
			switch(Btn3.ReleasedTime)
			{
			case Short_Released:
				if(watchConfig.SubMode == WATCH_NORMAL)
				{
					watch.WatchMode = !watch.WatchMode;
				}
				Btn3.ReleasedTime = Idle_Released;
				break;
			case Mid_Released:
				break;
			case Long_Released:
				break;
			default :
				break;
			}
		  }
		  //btn4
		  if (Btn4.state == Pressing)
		  {
			  CheckBtnHoldingTime(&Btn4, GPIOD, GPIO_PIN_10);
			  BtnThresHoldEvent(&Btn4, GPIOD, GPIO_PIN_10);

			  if(watchConfig.decreaseFlagOnce)
			  {
					DecreaseTimeOnce();
					watchConfig.decreaseFlagOnce = false;
			  }
				switch (Btn4.holdTime)
				{
				case BtnHold_Mid:
					if (watchConfig.decreaseFlag150ms)
					{
						watchConfig.decreaseFlag150ms = false;
						DecreaseTimeOnce();
					}
					break;
				case BtnHold_Long:
					if (watchConfig.decreaseFlag20ms)
					{
						watchConfig.decreaseFlag20ms = false;
						DecreaseTimeOnce();
					}
					break;
				}
		  }
		  else
		 {
			switch(Btn4.ReleasedTime)
			{
			case Short_Released:
				Btn4.ReleasedTime = Idle_Released;
				break;
			case Mid_Released:
				break;
			case Long_Released:
				break;
			default :
				break;
			}
		 }

	  case STOPWATCH:
		  break;
	  }


	  // buzzer

	  if(Buz1.BuzFlag)
	  {
		  Buz1.BuzFlag = false;

			if (!BuzLock)
			{
				switch (Buz1.BuzTone)
				{
				case BUZ_TONE_LOW_PSC:
					activateBuzzer30msOn(&Buz1, &htim2, TIM_CHANNEL_1,
							BUZ_TONE_LOW_PSC);
					break;
				case BUZ_TONE_MID_PSC:
					activateBuzzer30msOn(&Buz1, &htim2, TIM_CHANNEL_1,
							BUZ_TONE_MID_PSC);
					break;
				case BUZ_TONE_HIGH_PSC:
					activateBuzzer30msOn(&Buz1, &htim2, TIM_CHANNEL_1,
							BUZ_TONE_HIGH_PSC);
					break;
				}
			}

	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(USART3_IRQn);
}

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	//btn1
	if (GPIO_Pin == GPIO_PIN_3)
	{
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3) == GPIO_PIN_SET && Btn1.state == Idle)
		{
			Buz1.BuzTone = BUZ_TONE_LOW_PSC;
			Buz1.BuzFlag = true;
		}
		HandleButtonPress(&Btn1, GPIOE, GPIO_PIN_3);

	}

	//btn2
	if (GPIO_Pin == GPIO_PIN_15)
	{
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == GPIO_PIN_SET && Btn2.state == Idle)
		{
			Buz1.BuzTone = BUZ_TONE_LOW_PSC;
			Buz1.BuzFlag = true;

			if (mode == WATCH && watchConfig.SubMode == WATCH_CLOCK_SETTING)
			{
				watchConfig.NextItem = 1;  // clock setting flag on
			}
		}
		HandleButtonPress(&Btn2, GPIOC, GPIO_PIN_15);

	}

	//btn3
	if (GPIO_Pin == GPIO_PIN_4)
	{
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4) == GPIO_PIN_SET && Btn3.state == Idle)
		{
			Buz1.BuzTone = BUZ_TONE_LOW_PSC;
			Buz1.BuzFlag = true;

			if (mode == WATCH && watchConfig.SubMode == WATCH_CLOCK_SETTING)
			{
				watchConfig.increaseFlagOnce = true;  // clock increase flag on
			}
		}
		HandleButtonPress(&Btn3, GPIOD, GPIO_PIN_4);
	}

	//btn4
	if (GPIO_Pin == GPIO_PIN_10)
	{
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10) == GPIO_PIN_SET && Btn4.state == Idle)
		{
			Buz1.BuzTone = BUZ_TONE_LOW_PSC;
			Buz1.BuzFlag = true;

			if (mode == WATCH && watchConfig.SubMode == WATCH_CLOCK_SETTING)
			{
				watchConfig.decreaseFlagOnce = true;  // clock decrease flag on
			}
		}

		HandleButtonPress(&Btn4, GPIOD, GPIO_PIN_10);
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{


	if(htim->Instance == TIM6)
	{
		//btn hold event
		BtnHoldEvent(&Btn1,GPIOE,GPIO_PIN_3 );
		BtnHoldEvent(&Btn2,GPIOC,GPIO_PIN_15 );
		BtnHoldEvent(&Btn3,GPIOD,GPIO_PIN_4 );
		BtnHoldEvent(&Btn4,GPIOD,GPIO_PIN_10 );

		//watch time
		updateWatchTime();

		///watch time in/decrease flag

		if (Btn3.state == Pressing
				&& watchConfig.SubMode == WATCH_CLOCK_SETTING)
		{
			Btn3.SettingModeCount++;
			CheckBtnHoldingTime(&Btn3, GPIOD, GPIO_PIN_4);
			switch(Btn3.holdTime)
			{
			case BtnHold_Short:
				break;
			case BtnHold_Mid:
				if(Btn3.SettingModeCount > 150)
				{
					Btn3.SettingModeCount = 0;
					watchConfig.increaseFlag150ms = true;
				}
				break;
			case BtnHold_Long:
				if(Btn3.SettingModeCount > 20)
				{
					Btn3.SettingModeCount = 0;
					watchConfig.increaseFlag20ms = true;
				}
				break;
			}
		}

		////
		if (Btn4.state == Pressing
				&& watchConfig.SubMode == WATCH_CLOCK_SETTING)
		{
			Btn4.SettingModeCount++;

			switch (Btn4.holdTime)
			{
			case BtnHold_Mid:
				if (Btn4.SettingModeCount > 150)
				{
					Btn4.SettingModeCount = 0;
					watchConfig.decreaseFlag150ms = true;
				}
				break;
			case BtnHold_Long:
				if (Btn4.SettingModeCount > 20)
				{
					Btn4.SettingModeCount = 0;
					watchConfig.decreaseFlag20ms = true;
				}
				break;
			}
		}

		//buz off
		activateBuzzer30msOff(&Buz1, &htim2, TIM_CHANNEL_1);

	}
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
