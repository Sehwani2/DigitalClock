
digital_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000692c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08006abc  08006abc  00007abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bb0  08006bb0  00008088  2**0
                  CONTENTS
  4 .ARM          00000008  08006bb0  08006bb0  00007bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006bb8  08006bb8  00008088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bb8  08006bb8  00007bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006bbc  08006bbc  00007bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08006bc0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008088  2**0
                  CONTENTS
 10 .bss          00000280  20000088  20000088  00008088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000308  20000308  00008088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010372  00000000  00000000  000080b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c08  00000000  00000000  0001842a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e80  00000000  00000000  0001b038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b28  00000000  00000000  0001beb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002304e  00000000  00000000  0001c9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001360b  00000000  00000000  0003fa2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdf9a  00000000  00000000  00053039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00120fd3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000438c  00000000  00000000  00121018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  001253a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006aa4 	.word	0x08006aa4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08006aa4 	.word	0x08006aa4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <_7SEG_GPIO_Init>:
 */

#include "7seg.h"

void _7SEG_GPIO_Init()
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	@ 0x28
 8000564:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIOA,D,E Periph clock enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000566:	2300      	movs	r3, #0
 8000568:	613b      	str	r3, [r7, #16]
 800056a:	4b6b      	ldr	r3, [pc, #428]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056e:	4a6a      	ldr	r2, [pc, #424]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6313      	str	r3, [r2, #48]	@ 0x30
 8000576:	4b68      	ldr	r3, [pc, #416]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	613b      	str	r3, [r7, #16]
 8000580:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	4b64      	ldr	r3, [pc, #400]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058a:	4a63      	ldr	r2, [pc, #396]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 800058c:	f043 0304 	orr.w	r3, r3, #4
 8000590:	6313      	str	r3, [r2, #48]	@ 0x30
 8000592:	4b61      	ldr	r3, [pc, #388]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000596:	f003 0304 	and.w	r3, r3, #4
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	4b5d      	ldr	r3, [pc, #372]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a6:	4a5c      	ldr	r2, [pc, #368]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 80005a8:	f043 0308 	orr.w	r3, r3, #8
 80005ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ae:	4b5a      	ldr	r3, [pc, #360]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b2:	f003 0308 	and.w	r3, r3, #8
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	4b56      	ldr	r3, [pc, #344]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c2:	4a55      	ldr	r2, [pc, #340]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 80005c4:	f043 0310 	orr.w	r3, r3, #16
 80005c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ca:	4b53      	ldr	r3, [pc, #332]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ce:	f003 0310 	and.w	r3, r3, #16
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]

	//Digit1
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_A;
 80005d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80005da:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005dc:	2301      	movs	r3, #1
 80005de:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e4:	2300      	movs	r3, #0
 80005e6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIO_DGT1_A, &GPIO_InitStruct);
 80005e8:	f107 0314 	add.w	r3, r7, #20
 80005ec:	4619      	mov	r1, r3
 80005ee:	484b      	ldr	r0, [pc, #300]	@ (800071c <_7SEG_GPIO_Init+0x1bc>)
 80005f0:	f002 fa32 	bl	8002a58 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_B;
 80005f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005f8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_B, &GPIO_InitStruct);
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	4619      	mov	r1, r3
 8000600:	4847      	ldr	r0, [pc, #284]	@ (8000720 <_7SEG_GPIO_Init+0x1c0>)
 8000602:	f002 fa29 	bl	8002a58 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_C;
 8000606:	2340      	movs	r3, #64	@ 0x40
 8000608:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_C, &GPIO_InitStruct);
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	4619      	mov	r1, r3
 8000610:	4842      	ldr	r0, [pc, #264]	@ (800071c <_7SEG_GPIO_Init+0x1bc>)
 8000612:	f002 fa21 	bl	8002a58 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_D;
 8000616:	2320      	movs	r3, #32
 8000618:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_D, &GPIO_InitStruct);
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	4619      	mov	r1, r3
 8000620:	483e      	ldr	r0, [pc, #248]	@ (800071c <_7SEG_GPIO_Init+0x1bc>)
 8000622:	f002 fa19 	bl	8002a58 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_E;
 8000626:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800062a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_E, &GPIO_InitStruct);
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	4619      	mov	r1, r3
 8000632:	483c      	ldr	r0, [pc, #240]	@ (8000724 <_7SEG_GPIO_Init+0x1c4>)
 8000634:	f002 fa10 	bl	8002a58 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_F;
 8000638:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800063c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_F, &GPIO_InitStruct);
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	4619      	mov	r1, r3
 8000644:	4837      	ldr	r0, [pc, #220]	@ (8000724 <_7SEG_GPIO_Init+0x1c4>)
 8000646:	f002 fa07 	bl	8002a58 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_G;
 800064a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800064e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_G, &GPIO_InitStruct);
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	4619      	mov	r1, r3
 8000656:	4831      	ldr	r0, [pc, #196]	@ (800071c <_7SEG_GPIO_Init+0x1bc>)
 8000658:	f002 f9fe 	bl	8002a58 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_DP;
 800065c:	2380      	movs	r3, #128	@ 0x80
 800065e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_DP, &GPIO_InitStruct);
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	4619      	mov	r1, r3
 8000666:	482d      	ldr	r0, [pc, #180]	@ (800071c <_7SEG_GPIO_Init+0x1bc>)
 8000668:	f002 f9f6 	bl	8002a58 <HAL_GPIO_Init>

	//Digit2
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_A;
 800066c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000670:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_A, &GPIO_InitStruct);
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	4619      	mov	r1, r3
 8000678:	482b      	ldr	r0, [pc, #172]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 800067a:	f002 f9ed 	bl	8002a58 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_B;
 800067e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000682:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_B, &GPIO_InitStruct);
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	4619      	mov	r1, r3
 800068a:	4827      	ldr	r0, [pc, #156]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 800068c:	f002 f9e4 	bl	8002a58 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_C;
 8000690:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000694:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_C, &GPIO_InitStruct);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	4822      	ldr	r0, [pc, #136]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 800069e:	f002 f9db 	bl	8002a58 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_D;
 80006a2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80006a6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_D, &GPIO_InitStruct);
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	4619      	mov	r1, r3
 80006ae:	481e      	ldr	r0, [pc, #120]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 80006b0:	f002 f9d2 	bl	8002a58 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_E;
 80006b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006b8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_E, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	4819      	ldr	r0, [pc, #100]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 80006c2:	f002 f9c9 	bl	8002a58 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_F;
 80006c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006ca:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_F, &GPIO_InitStruct);
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4619      	mov	r1, r3
 80006d2:	4815      	ldr	r0, [pc, #84]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 80006d4:	f002 f9c0 	bl	8002a58 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_G;
 80006d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006dc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_G, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	4810      	ldr	r0, [pc, #64]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 80006e6:	f002 f9b7 	bl	8002a58 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_DP;
 80006ea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80006ee:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_DP, &GPIO_InitStruct);
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	4619      	mov	r1, r3
 80006f6:	480c      	ldr	r0, [pc, #48]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 80006f8:	f002 f9ae 	bl	8002a58 <HAL_GPIO_Init>


	_7SEG_SetNumber(DGT1, 0, ON);
 80006fc:	2201      	movs	r2, #1
 80006fe:	2100      	movs	r1, #0
 8000700:	2000      	movs	r0, #0
 8000702:	f000 f813 	bl	800072c <_7SEG_SetNumber>
	_7SEG_SetNumber(DGT2, 0, ON);
 8000706:	2201      	movs	r2, #1
 8000708:	2100      	movs	r1, #0
 800070a:	2001      	movs	r0, #1
 800070c:	f000 f80e 	bl	800072c <_7SEG_SetNumber>
}
 8000710:	bf00      	nop
 8000712:	3728      	adds	r7, #40	@ 0x28
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40023800 	.word	0x40023800
 800071c:	40020c00 	.word	0x40020c00
 8000720:	40020000 	.word	0x40020000
 8000724:	40020800 	.word	0x40020800
 8000728:	40021000 	.word	0x40021000

0800072c <_7SEG_SetNumber>:


void _7SEG_SetNumber(int dgt, int num, int dp)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	607a      	str	r2, [r7, #4]
	if(dgt == DGT1)
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	2b00      	cmp	r3, #0
 800073c:	f040 81dc 	bne.w	8000af8 <_7SEG_SetNumber+0x3cc>
	{
		switch(num%10)
 8000740:	68b9      	ldr	r1, [r7, #8]
 8000742:	4bcb      	ldr	r3, [pc, #812]	@ (8000a70 <_7SEG_SetNumber+0x344>)
 8000744:	fb83 2301 	smull	r2, r3, r3, r1
 8000748:	109a      	asrs	r2, r3, #2
 800074a:	17cb      	asrs	r3, r1, #31
 800074c:	1ad2      	subs	r2, r2, r3
 800074e:	4613      	mov	r3, r2
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	4413      	add	r3, r2
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	1aca      	subs	r2, r1, r3
 8000758:	2a09      	cmp	r2, #9
 800075a:	f200 81ba 	bhi.w	8000ad2 <_7SEG_SetNumber+0x3a6>
 800075e:	a301      	add	r3, pc, #4	@ (adr r3, 8000764 <_7SEG_SetNumber+0x38>)
 8000760:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8000764:	0800078d 	.word	0x0800078d
 8000768:	080007df 	.word	0x080007df
 800076c:	08000831 	.word	0x08000831
 8000770:	08000883 	.word	0x08000883
 8000774:	080008d5 	.word	0x080008d5
 8000778:	08000927 	.word	0x08000927
 800077c:	08000979 	.word	0x08000979
 8000780:	080009cb 	.word	0x080009cb
 8000784:	08000a1d 	.word	0x08000a1d
 8000788:	08000a81 	.word	0x08000a81
		{
			case 0: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON;
 800078c:	2200      	movs	r2, #0
 800078e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000792:	48b8      	ldr	r0, [pc, #736]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000794:	f002 fb14 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000798:	2200      	movs	r2, #0
 800079a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800079e:	48b6      	ldr	r0, [pc, #728]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 80007a0:	f002 fb0e 	bl	8002dc0 <HAL_GPIO_WritePin>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2140      	movs	r1, #64	@ 0x40
 80007a8:	48b2      	ldr	r0, [pc, #712]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80007aa:	f002 fb09 	bl	8002dc0 <HAL_GPIO_WritePin>
 80007ae:	2200      	movs	r2, #0
 80007b0:	2120      	movs	r1, #32
 80007b2:	48b0      	ldr	r0, [pc, #704]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80007b4:	f002 fb04 	bl	8002dc0 <HAL_GPIO_WritePin>
 80007b8:	2200      	movs	r2, #0
 80007ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007be:	48af      	ldr	r0, [pc, #700]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80007c0:	f002 fafe 	bl	8002dc0 <HAL_GPIO_WritePin>
 80007c4:	2200      	movs	r2, #0
 80007c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ca:	48ac      	ldr	r0, [pc, #688]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80007cc:	f002 faf8 	bl	8002dc0 <HAL_GPIO_WritePin>
					DGT1_G_OFF;
 80007d0:	2201      	movs	r2, #1
 80007d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007d6:	48a7      	ldr	r0, [pc, #668]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80007d8:	f002 faf2 	bl	8002dc0 <HAL_GPIO_WritePin>
				break;
 80007dc:	e179      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 1: DGT1_B_ON; DGT1_C_ON;
 80007de:	2200      	movs	r2, #0
 80007e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007e4:	48a4      	ldr	r0, [pc, #656]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 80007e6:	f002 faeb 	bl	8002dc0 <HAL_GPIO_WritePin>
 80007ea:	2200      	movs	r2, #0
 80007ec:	2140      	movs	r1, #64	@ 0x40
 80007ee:	48a1      	ldr	r0, [pc, #644]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80007f0:	f002 fae6 	bl	8002dc0 <HAL_GPIO_WritePin>
					DGT1_A_OFF; DGT1_D_OFF; DGT1_E_OFF; DGT1_F_OFF; DGT1_G_OFF;
 80007f4:	2201      	movs	r2, #1
 80007f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007fa:	489e      	ldr	r0, [pc, #632]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80007fc:	f002 fae0 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000800:	2201      	movs	r2, #1
 8000802:	2120      	movs	r1, #32
 8000804:	489b      	ldr	r0, [pc, #620]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000806:	f002 fadb 	bl	8002dc0 <HAL_GPIO_WritePin>
 800080a:	2201      	movs	r2, #1
 800080c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000810:	489a      	ldr	r0, [pc, #616]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 8000812:	f002 fad5 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000816:	2201      	movs	r2, #1
 8000818:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800081c:	4897      	ldr	r0, [pc, #604]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 800081e:	f002 facf 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000822:	2201      	movs	r2, #1
 8000824:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000828:	4892      	ldr	r0, [pc, #584]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 800082a:	f002 fac9 	bl	8002dc0 <HAL_GPIO_WritePin>
				break;
 800082e:	e150      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 2: DGT1_A_ON; DGT1_B_ON; DGT1_G_ON; DGT1_E_ON; DGT1_D_ON;
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000836:	488f      	ldr	r0, [pc, #572]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000838:	f002 fac2 	bl	8002dc0 <HAL_GPIO_WritePin>
 800083c:	2200      	movs	r2, #0
 800083e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000842:	488d      	ldr	r0, [pc, #564]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 8000844:	f002 fabc 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000848:	2200      	movs	r2, #0
 800084a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800084e:	4889      	ldr	r0, [pc, #548]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000850:	f002 fab6 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000854:	2200      	movs	r2, #0
 8000856:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800085a:	4888      	ldr	r0, [pc, #544]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 800085c:	f002 fab0 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000860:	2200      	movs	r2, #0
 8000862:	2120      	movs	r1, #32
 8000864:	4883      	ldr	r0, [pc, #524]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000866:	f002 faab 	bl	8002dc0 <HAL_GPIO_WritePin>
					DGT1_C_OFF; DGT1_F_OFF;
 800086a:	2201      	movs	r2, #1
 800086c:	2140      	movs	r1, #64	@ 0x40
 800086e:	4881      	ldr	r0, [pc, #516]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000870:	f002 faa6 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000874:	2201      	movs	r2, #1
 8000876:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800087a:	4880      	ldr	r0, [pc, #512]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 800087c:	f002 faa0 	bl	8002dc0 <HAL_GPIO_WritePin>
				break;
 8000880:	e127      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 3: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_G_ON;
 8000882:	2200      	movs	r2, #0
 8000884:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000888:	487a      	ldr	r0, [pc, #488]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 800088a:	f002 fa99 	bl	8002dc0 <HAL_GPIO_WritePin>
 800088e:	2200      	movs	r2, #0
 8000890:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000894:	4878      	ldr	r0, [pc, #480]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 8000896:	f002 fa93 	bl	8002dc0 <HAL_GPIO_WritePin>
 800089a:	2200      	movs	r2, #0
 800089c:	2140      	movs	r1, #64	@ 0x40
 800089e:	4875      	ldr	r0, [pc, #468]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80008a0:	f002 fa8e 	bl	8002dc0 <HAL_GPIO_WritePin>
 80008a4:	2200      	movs	r2, #0
 80008a6:	2120      	movs	r1, #32
 80008a8:	4872      	ldr	r0, [pc, #456]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80008aa:	f002 fa89 	bl	8002dc0 <HAL_GPIO_WritePin>
 80008ae:	2200      	movs	r2, #0
 80008b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008b4:	486f      	ldr	r0, [pc, #444]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80008b6:	f002 fa83 	bl	8002dc0 <HAL_GPIO_WritePin>
					DGT1_E_OFF; DGT1_F_OFF;
 80008ba:	2201      	movs	r2, #1
 80008bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008c0:	486e      	ldr	r0, [pc, #440]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80008c2:	f002 fa7d 	bl	8002dc0 <HAL_GPIO_WritePin>
 80008c6:	2201      	movs	r2, #1
 80008c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008cc:	486b      	ldr	r0, [pc, #428]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80008ce:	f002 fa77 	bl	8002dc0 <HAL_GPIO_WritePin>
				break;
 80008d2:	e0fe      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 4: DGT1_F_ON; DGT1_G_ON; DGT1_B_ON; DGT1_C_ON;
 80008d4:	2200      	movs	r2, #0
 80008d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008da:	4868      	ldr	r0, [pc, #416]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80008dc:	f002 fa70 	bl	8002dc0 <HAL_GPIO_WritePin>
 80008e0:	2200      	movs	r2, #0
 80008e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008e6:	4863      	ldr	r0, [pc, #396]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80008e8:	f002 fa6a 	bl	8002dc0 <HAL_GPIO_WritePin>
 80008ec:	2200      	movs	r2, #0
 80008ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008f2:	4861      	ldr	r0, [pc, #388]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 80008f4:	f002 fa64 	bl	8002dc0 <HAL_GPIO_WritePin>
 80008f8:	2200      	movs	r2, #0
 80008fa:	2140      	movs	r1, #64	@ 0x40
 80008fc:	485d      	ldr	r0, [pc, #372]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80008fe:	f002 fa5f 	bl	8002dc0 <HAL_GPIO_WritePin>
					DGT1_A_OFF; DGT1_D_OFF; DGT1_E_OFF;
 8000902:	2201      	movs	r2, #1
 8000904:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000908:	485a      	ldr	r0, [pc, #360]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 800090a:	f002 fa59 	bl	8002dc0 <HAL_GPIO_WritePin>
 800090e:	2201      	movs	r2, #1
 8000910:	2120      	movs	r1, #32
 8000912:	4858      	ldr	r0, [pc, #352]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000914:	f002 fa54 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000918:	2201      	movs	r2, #1
 800091a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800091e:	4857      	ldr	r0, [pc, #348]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 8000920:	f002 fa4e 	bl	8002dc0 <HAL_GPIO_WritePin>
				break;
 8000924:	e0d5      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 5: DGT1_A_ON; DGT1_F_ON; DGT1_G_ON; DGT1_C_ON; DGT1_D_ON;
 8000926:	2200      	movs	r2, #0
 8000928:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800092c:	4851      	ldr	r0, [pc, #324]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 800092e:	f002 fa47 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000932:	2200      	movs	r2, #0
 8000934:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000938:	4850      	ldr	r0, [pc, #320]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 800093a:	f002 fa41 	bl	8002dc0 <HAL_GPIO_WritePin>
 800093e:	2200      	movs	r2, #0
 8000940:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000944:	484b      	ldr	r0, [pc, #300]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000946:	f002 fa3b 	bl	8002dc0 <HAL_GPIO_WritePin>
 800094a:	2200      	movs	r2, #0
 800094c:	2140      	movs	r1, #64	@ 0x40
 800094e:	4849      	ldr	r0, [pc, #292]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000950:	f002 fa36 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000954:	2200      	movs	r2, #0
 8000956:	2120      	movs	r1, #32
 8000958:	4846      	ldr	r0, [pc, #280]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 800095a:	f002 fa31 	bl	8002dc0 <HAL_GPIO_WritePin>
					DGT1_B_OFF; DGT1_E_OFF;
 800095e:	2201      	movs	r2, #1
 8000960:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000964:	4844      	ldr	r0, [pc, #272]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 8000966:	f002 fa2b 	bl	8002dc0 <HAL_GPIO_WritePin>
 800096a:	2201      	movs	r2, #1
 800096c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000970:	4842      	ldr	r0, [pc, #264]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 8000972:	f002 fa25 	bl	8002dc0 <HAL_GPIO_WritePin>
				break;
 8000976:	e0ac      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 6: DGT1_A_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON; DGT1_G_ON;
 8000978:	2200      	movs	r2, #0
 800097a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800097e:	483d      	ldr	r0, [pc, #244]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000980:	f002 fa1e 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000984:	2200      	movs	r2, #0
 8000986:	2140      	movs	r1, #64	@ 0x40
 8000988:	483a      	ldr	r0, [pc, #232]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 800098a:	f002 fa19 	bl	8002dc0 <HAL_GPIO_WritePin>
 800098e:	2200      	movs	r2, #0
 8000990:	2120      	movs	r1, #32
 8000992:	4838      	ldr	r0, [pc, #224]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000994:	f002 fa14 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000998:	2200      	movs	r2, #0
 800099a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800099e:	4837      	ldr	r0, [pc, #220]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80009a0:	f002 fa0e 	bl	8002dc0 <HAL_GPIO_WritePin>
 80009a4:	2200      	movs	r2, #0
 80009a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009aa:	4834      	ldr	r0, [pc, #208]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80009ac:	f002 fa08 	bl	8002dc0 <HAL_GPIO_WritePin>
 80009b0:	2200      	movs	r2, #0
 80009b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009b6:	482f      	ldr	r0, [pc, #188]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80009b8:	f002 fa02 	bl	8002dc0 <HAL_GPIO_WritePin>
					DGT1_B_OFF;
 80009bc:	2201      	movs	r2, #1
 80009be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009c2:	482d      	ldr	r0, [pc, #180]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 80009c4:	f002 f9fc 	bl	8002dc0 <HAL_GPIO_WritePin>
				break;
 80009c8:	e083      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 7: DGT1_F_ON; DGT1_A_ON; DGT1_B_ON; DGT1_C_ON;
 80009ca:	2200      	movs	r2, #0
 80009cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009d0:	482a      	ldr	r0, [pc, #168]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80009d2:	f002 f9f5 	bl	8002dc0 <HAL_GPIO_WritePin>
 80009d6:	2200      	movs	r2, #0
 80009d8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009dc:	4825      	ldr	r0, [pc, #148]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80009de:	f002 f9ef 	bl	8002dc0 <HAL_GPIO_WritePin>
 80009e2:	2200      	movs	r2, #0
 80009e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009e8:	4823      	ldr	r0, [pc, #140]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 80009ea:	f002 f9e9 	bl	8002dc0 <HAL_GPIO_WritePin>
 80009ee:	2200      	movs	r2, #0
 80009f0:	2140      	movs	r1, #64	@ 0x40
 80009f2:	4820      	ldr	r0, [pc, #128]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80009f4:	f002 f9e4 	bl	8002dc0 <HAL_GPIO_WritePin>
					DGT1_D_OFF; DGT1_E_OFF; DGT1_G_OFF;
 80009f8:	2201      	movs	r2, #1
 80009fa:	2120      	movs	r1, #32
 80009fc:	481d      	ldr	r0, [pc, #116]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80009fe:	f002 f9df 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000a02:	2201      	movs	r2, #1
 8000a04:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a08:	481c      	ldr	r0, [pc, #112]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 8000a0a:	f002 f9d9 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000a0e:	2201      	movs	r2, #1
 8000a10:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a14:	4817      	ldr	r0, [pc, #92]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000a16:	f002 f9d3 	bl	8002dc0 <HAL_GPIO_WritePin>
				break;
 8000a1a:	e05a      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 8: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON; DGT1_G_ON;
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a22:	4814      	ldr	r0, [pc, #80]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000a24:	f002 f9cc 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a2e:	4812      	ldr	r0, [pc, #72]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 8000a30:	f002 f9c6 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000a34:	2200      	movs	r2, #0
 8000a36:	2140      	movs	r1, #64	@ 0x40
 8000a38:	480e      	ldr	r0, [pc, #56]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000a3a:	f002 f9c1 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2120      	movs	r1, #32
 8000a42:	480c      	ldr	r0, [pc, #48]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000a44:	f002 f9bc 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a4e:	480b      	ldr	r0, [pc, #44]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 8000a50:	f002 f9b6 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000a54:	2200      	movs	r2, #0
 8000a56:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a5a:	4808      	ldr	r0, [pc, #32]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 8000a5c:	f002 f9b0 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000a60:	2200      	movs	r2, #0
 8000a62:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a66:	4803      	ldr	r0, [pc, #12]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000a68:	f002 f9aa 	bl	8002dc0 <HAL_GPIO_WritePin>
				break;
 8000a6c:	e031      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
 8000a6e:	bf00      	nop
 8000a70:	66666667 	.word	0x66666667
 8000a74:	40020c00 	.word	0x40020c00
 8000a78:	40020000 	.word	0x40020000
 8000a7c:	40020800 	.word	0x40020800
			case 9: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_F_ON; DGT1_G_ON;
 8000a80:	2200      	movs	r2, #0
 8000a82:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a86:	48c8      	ldr	r0, [pc, #800]	@ (8000da8 <_7SEG_SetNumber+0x67c>)
 8000a88:	f002 f99a 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a92:	48c6      	ldr	r0, [pc, #792]	@ (8000dac <_7SEG_SetNumber+0x680>)
 8000a94:	f002 f994 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2140      	movs	r1, #64	@ 0x40
 8000a9c:	48c2      	ldr	r0, [pc, #776]	@ (8000da8 <_7SEG_SetNumber+0x67c>)
 8000a9e:	f002 f98f 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2120      	movs	r1, #32
 8000aa6:	48c0      	ldr	r0, [pc, #768]	@ (8000da8 <_7SEG_SetNumber+0x67c>)
 8000aa8:	f002 f98a 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000aac:	2200      	movs	r2, #0
 8000aae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ab2:	48bf      	ldr	r0, [pc, #764]	@ (8000db0 <_7SEG_SetNumber+0x684>)
 8000ab4:	f002 f984 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000abe:	48ba      	ldr	r0, [pc, #744]	@ (8000da8 <_7SEG_SetNumber+0x67c>)
 8000ac0:	f002 f97e 	bl	8002dc0 <HAL_GPIO_WritePin>
					DGT1_E_OFF;
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000aca:	48b9      	ldr	r0, [pc, #740]	@ (8000db0 <_7SEG_SetNumber+0x684>)
 8000acc:	f002 f978 	bl	8002dc0 <HAL_GPIO_WritePin>
				break;
 8000ad0:	bf00      	nop
		}

		if(dp == ON)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d105      	bne.n	8000ae4 <_7SEG_SetNumber+0x3b8>
		{
			DGT1_DP_ON;
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2180      	movs	r1, #128	@ 0x80
 8000adc:	48b2      	ldr	r0, [pc, #712]	@ (8000da8 <_7SEG_SetNumber+0x67c>)
 8000ade:	f002 f96f 	bl	8002dc0 <HAL_GPIO_WritePin>
		else if(dp == OFF)
		{
			DGT2_DP_OFF;
		}
	}
}
 8000ae2:	e1ff      	b.n	8000ee4 <_7SEG_SetNumber+0x7b8>
		else if(dp == OFF)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f040 81fc 	bne.w	8000ee4 <_7SEG_SetNumber+0x7b8>
			DGT1_DP_OFF;
 8000aec:	2201      	movs	r2, #1
 8000aee:	2180      	movs	r1, #128	@ 0x80
 8000af0:	48ad      	ldr	r0, [pc, #692]	@ (8000da8 <_7SEG_SetNumber+0x67c>)
 8000af2:	f002 f965 	bl	8002dc0 <HAL_GPIO_WritePin>
}
 8000af6:	e1f5      	b.n	8000ee4 <_7SEG_SetNumber+0x7b8>
	else if(dgt == DGT2)
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	f040 81f2 	bne.w	8000ee4 <_7SEG_SetNumber+0x7b8>
		switch(num%10)
 8000b00:	68b9      	ldr	r1, [r7, #8]
 8000b02:	4bac      	ldr	r3, [pc, #688]	@ (8000db4 <_7SEG_SetNumber+0x688>)
 8000b04:	fb83 2301 	smull	r2, r3, r3, r1
 8000b08:	109a      	asrs	r2, r3, #2
 8000b0a:	17cb      	asrs	r3, r1, #31
 8000b0c:	1ad2      	subs	r2, r2, r3
 8000b0e:	4613      	mov	r3, r2
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	4413      	add	r3, r2
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	1aca      	subs	r2, r1, r3
 8000b18:	2a09      	cmp	r2, #9
 8000b1a:	f200 81d0 	bhi.w	8000ebe <_7SEG_SetNumber+0x792>
 8000b1e:	a301      	add	r3, pc, #4	@ (adr r3, 8000b24 <_7SEG_SetNumber+0x3f8>)
 8000b20:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8000b24:	08000b4d 	.word	0x08000b4d
 8000b28:	08000ba3 	.word	0x08000ba3
 8000b2c:	08000bf9 	.word	0x08000bf9
 8000b30:	08000c4f 	.word	0x08000c4f
 8000b34:	08000ca5 	.word	0x08000ca5
 8000b38:	08000cfb 	.word	0x08000cfb
 8000b3c:	08000d51 	.word	0x08000d51
 8000b40:	08000dbd 	.word	0x08000dbd
 8000b44:	08000e13 	.word	0x08000e13
 8000b48:	08000e69 	.word	0x08000e69
			case 0: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON;
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b52:	4899      	ldr	r0, [pc, #612]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b54:	f002 f934 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b5e:	4896      	ldr	r0, [pc, #600]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b60:	f002 f92e 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000b64:	2200      	movs	r2, #0
 8000b66:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b6a:	4893      	ldr	r0, [pc, #588]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b6c:	f002 f928 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000b70:	2200      	movs	r2, #0
 8000b72:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b76:	4890      	ldr	r0, [pc, #576]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b78:	f002 f922 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b82:	488d      	ldr	r0, [pc, #564]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b84:	f002 f91c 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b8e:	488a      	ldr	r0, [pc, #552]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b90:	f002 f916 	bl	8002dc0 <HAL_GPIO_WritePin>
					DGT2_G_OFF;
 8000b94:	2201      	movs	r2, #1
 8000b96:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b9a:	4887      	ldr	r0, [pc, #540]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b9c:	f002 f910 	bl	8002dc0 <HAL_GPIO_WritePin>
				break;
 8000ba0:	e18d      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 1: DGT2_B_ON; DGT2_C_ON;
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ba8:	4883      	ldr	r0, [pc, #524]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000baa:	f002 f909 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bb4:	4880      	ldr	r0, [pc, #512]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000bb6:	f002 f903 	bl	8002dc0 <HAL_GPIO_WritePin>
					DGT2_A_OFF; DGT2_D_OFF; DGT2_E_OFF; DGT2_F_OFF; DGT2_G_OFF;
 8000bba:	2201      	movs	r2, #1
 8000bbc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bc0:	487d      	ldr	r0, [pc, #500]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000bc2:	f002 f8fd 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bcc:	487a      	ldr	r0, [pc, #488]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000bce:	f002 f8f7 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bd8:	4877      	ldr	r0, [pc, #476]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000bda:	f002 f8f1 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000bde:	2201      	movs	r2, #1
 8000be0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000be4:	4874      	ldr	r0, [pc, #464]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000be6:	f002 f8eb 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000bea:	2201      	movs	r2, #1
 8000bec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bf0:	4871      	ldr	r0, [pc, #452]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000bf2:	f002 f8e5 	bl	8002dc0 <HAL_GPIO_WritePin>
				break;
 8000bf6:	e162      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 2: DGT2_A_ON; DGT2_B_ON; DGT2_G_ON; DGT2_E_ON; DGT2_D_ON;
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bfe:	486e      	ldr	r0, [pc, #440]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c00:	f002 f8de 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000c04:	2200      	movs	r2, #0
 8000c06:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c0a:	486b      	ldr	r0, [pc, #428]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c0c:	f002 f8d8 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000c10:	2200      	movs	r2, #0
 8000c12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c16:	4868      	ldr	r0, [pc, #416]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c18:	f002 f8d2 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c22:	4865      	ldr	r0, [pc, #404]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c24:	f002 f8cc 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c2e:	4862      	ldr	r0, [pc, #392]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c30:	f002 f8c6 	bl	8002dc0 <HAL_GPIO_WritePin>
					DGT2_C_OFF; DGT2_F_OFF;
 8000c34:	2201      	movs	r2, #1
 8000c36:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c3a:	485f      	ldr	r0, [pc, #380]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c3c:	f002 f8c0 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000c40:	2201      	movs	r2, #1
 8000c42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c46:	485c      	ldr	r0, [pc, #368]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c48:	f002 f8ba 	bl	8002dc0 <HAL_GPIO_WritePin>
				break;
 8000c4c:	e137      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 3: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_G_ON;
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c54:	4858      	ldr	r0, [pc, #352]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c56:	f002 f8b3 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c60:	4855      	ldr	r0, [pc, #340]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c62:	f002 f8ad 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000c66:	2200      	movs	r2, #0
 8000c68:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c6c:	4852      	ldr	r0, [pc, #328]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c6e:	f002 f8a7 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000c72:	2200      	movs	r2, #0
 8000c74:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c78:	484f      	ldr	r0, [pc, #316]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c7a:	f002 f8a1 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c84:	484c      	ldr	r0, [pc, #304]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c86:	f002 f89b 	bl	8002dc0 <HAL_GPIO_WritePin>
					DGT2_E_OFF; DGT2_F_OFF;
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c90:	4849      	ldr	r0, [pc, #292]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c92:	f002 f895 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000c96:	2201      	movs	r2, #1
 8000c98:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c9c:	4846      	ldr	r0, [pc, #280]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c9e:	f002 f88f 	bl	8002dc0 <HAL_GPIO_WritePin>
				break;
 8000ca2:	e10c      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 4: DGT2_F_ON; DGT2_G_ON; DGT2_B_ON; DGT2_C_ON;
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000caa:	4843      	ldr	r0, [pc, #268]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000cac:	f002 f888 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cb6:	4840      	ldr	r0, [pc, #256]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000cb8:	f002 f882 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cc2:	483d      	ldr	r0, [pc, #244]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000cc4:	f002 f87c 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cce:	483a      	ldr	r0, [pc, #232]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000cd0:	f002 f876 	bl	8002dc0 <HAL_GPIO_WritePin>
					DGT2_A_OFF; DGT2_D_OFF; DGT2_E_OFF;
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cda:	4837      	ldr	r0, [pc, #220]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000cdc:	f002 f870 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ce6:	4834      	ldr	r0, [pc, #208]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000ce8:	f002 f86a 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000cec:	2201      	movs	r2, #1
 8000cee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cf2:	4831      	ldr	r0, [pc, #196]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000cf4:	f002 f864 	bl	8002dc0 <HAL_GPIO_WritePin>
				break;
 8000cf8:	e0e1      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 5: DGT2_A_ON; DGT2_F_ON; DGT2_G_ON; DGT2_C_ON; DGT2_D_ON;
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d00:	482d      	ldr	r0, [pc, #180]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d02:	f002 f85d 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000d06:	2200      	movs	r2, #0
 8000d08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d0c:	482a      	ldr	r0, [pc, #168]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d0e:	f002 f857 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d18:	4827      	ldr	r0, [pc, #156]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d1a:	f002 f851 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d24:	4824      	ldr	r0, [pc, #144]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d26:	f002 f84b 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d30:	4821      	ldr	r0, [pc, #132]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d32:	f002 f845 	bl	8002dc0 <HAL_GPIO_WritePin>
					DGT2_B_OFF; DGT2_E_OFF;
 8000d36:	2201      	movs	r2, #1
 8000d38:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d3c:	481e      	ldr	r0, [pc, #120]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d3e:	f002 f83f 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000d42:	2201      	movs	r2, #1
 8000d44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d48:	481b      	ldr	r0, [pc, #108]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d4a:	f002 f839 	bl	8002dc0 <HAL_GPIO_WritePin>
				break;
 8000d4e:	e0b6      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 6: DGT2_A_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON; DGT2_G_ON;
 8000d50:	2200      	movs	r2, #0
 8000d52:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d56:	4818      	ldr	r0, [pc, #96]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d58:	f002 f832 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d62:	4815      	ldr	r0, [pc, #84]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d64:	f002 f82c 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d6e:	4812      	ldr	r0, [pc, #72]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d70:	f002 f826 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000d74:	2200      	movs	r2, #0
 8000d76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d7a:	480f      	ldr	r0, [pc, #60]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d7c:	f002 f820 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000d80:	2200      	movs	r2, #0
 8000d82:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d86:	480c      	ldr	r0, [pc, #48]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d88:	f002 f81a 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d92:	4809      	ldr	r0, [pc, #36]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d94:	f002 f814 	bl	8002dc0 <HAL_GPIO_WritePin>
					DGT2_B_OFF;
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d9e:	4806      	ldr	r0, [pc, #24]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000da0:	f002 f80e 	bl	8002dc0 <HAL_GPIO_WritePin>
				break;
 8000da4:	e08b      	b.n	8000ebe <_7SEG_SetNumber+0x792>
 8000da6:	bf00      	nop
 8000da8:	40020c00 	.word	0x40020c00
 8000dac:	40020000 	.word	0x40020000
 8000db0:	40020800 	.word	0x40020800
 8000db4:	66666667 	.word	0x66666667
 8000db8:	40021000 	.word	0x40021000
			case 7: DGT2_F_ON; DGT2_A_ON; DGT2_B_ON; DGT2_C_ON;
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dc2:	484a      	ldr	r0, [pc, #296]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000dc4:	f001 fffc 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dce:	4847      	ldr	r0, [pc, #284]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000dd0:	f001 fff6 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000dda:	4844      	ldr	r0, [pc, #272]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000ddc:	f001 fff0 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000de0:	2200      	movs	r2, #0
 8000de2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000de6:	4841      	ldr	r0, [pc, #260]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000de8:	f001 ffea 	bl	8002dc0 <HAL_GPIO_WritePin>
					DGT2_D_OFF; DGT2_E_OFF; DGT2_G_OFF;
 8000dec:	2201      	movs	r2, #1
 8000dee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000df2:	483e      	ldr	r0, [pc, #248]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000df4:	f001 ffe4 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000df8:	2201      	movs	r2, #1
 8000dfa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000dfe:	483b      	ldr	r0, [pc, #236]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e00:	f001 ffde 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000e04:	2201      	movs	r2, #1
 8000e06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e0a:	4838      	ldr	r0, [pc, #224]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e0c:	f001 ffd8 	bl	8002dc0 <HAL_GPIO_WritePin>
				break;
 8000e10:	e055      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 8: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON; DGT2_G_ON;
 8000e12:	2200      	movs	r2, #0
 8000e14:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e18:	4834      	ldr	r0, [pc, #208]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e1a:	f001 ffd1 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e24:	4831      	ldr	r0, [pc, #196]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e26:	f001 ffcb 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e30:	482e      	ldr	r0, [pc, #184]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e32:	f001 ffc5 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000e36:	2200      	movs	r2, #0
 8000e38:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e3c:	482b      	ldr	r0, [pc, #172]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e3e:	f001 ffbf 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000e42:	2200      	movs	r2, #0
 8000e44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e48:	4828      	ldr	r0, [pc, #160]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e4a:	f001 ffb9 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e54:	4825      	ldr	r0, [pc, #148]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e56:	f001 ffb3 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e60:	4822      	ldr	r0, [pc, #136]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e62:	f001 ffad 	bl	8002dc0 <HAL_GPIO_WritePin>
				break;
 8000e66:	e02a      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 9: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_F_ON; DGT2_G_ON;
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e6e:	481f      	ldr	r0, [pc, #124]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e70:	f001 ffa6 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000e74:	2200      	movs	r2, #0
 8000e76:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e7a:	481c      	ldr	r0, [pc, #112]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e7c:	f001 ffa0 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000e80:	2200      	movs	r2, #0
 8000e82:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e86:	4819      	ldr	r0, [pc, #100]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e88:	f001 ff9a 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e92:	4816      	ldr	r0, [pc, #88]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e94:	f001 ff94 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e9e:	4813      	ldr	r0, [pc, #76]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000ea0:	f001 ff8e 	bl	8002dc0 <HAL_GPIO_WritePin>
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000eaa:	4810      	ldr	r0, [pc, #64]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000eac:	f001 ff88 	bl	8002dc0 <HAL_GPIO_WritePin>
					DGT2_E_OFF;
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000eb6:	480d      	ldr	r0, [pc, #52]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000eb8:	f001 ff82 	bl	8002dc0 <HAL_GPIO_WritePin>
				break;
 8000ebc:	bf00      	nop
		if(dp == ON)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d106      	bne.n	8000ed2 <_7SEG_SetNumber+0x7a6>
			DGT2_DP_ON;
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000eca:	4808      	ldr	r0, [pc, #32]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000ecc:	f001 ff78 	bl	8002dc0 <HAL_GPIO_WritePin>
}
 8000ed0:	e008      	b.n	8000ee4 <_7SEG_SetNumber+0x7b8>
		else if(dp == OFF)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d105      	bne.n	8000ee4 <_7SEG_SetNumber+0x7b8>
			DGT2_DP_OFF;
 8000ed8:	2201      	movs	r2, #1
 8000eda:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ede:	4803      	ldr	r0, [pc, #12]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000ee0:	f001 ff6e 	bl	8002dc0 <HAL_GPIO_WritePin>
}
 8000ee4:	bf00      	nop
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40021000 	.word	0x40021000

08000ef0 <CLCD_GPIO_Init>:
#include "CLCD.h"

 CLCD clcd = {"0","0"};

void CLCD_GPIO_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIOE Periph clock enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	603b      	str	r3, [r7, #0]
 8000efa:	4b23      	ldr	r3, [pc, #140]	@ (8000f88 <CLCD_GPIO_Init+0x98>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	4a22      	ldr	r2, [pc, #136]	@ (8000f88 <CLCD_GPIO_Init+0x98>)
 8000f00:	f043 0310 	orr.w	r3, r3, #16
 8000f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f06:	4b20      	ldr	r3, [pc, #128]	@ (8000f88 <CLCD_GPIO_Init+0x98>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0a:	f003 0310 	and.w	r3, r3, #16
 8000f0e:	603b      	str	r3, [r7, #0]
 8000f10:	683b      	ldr	r3, [r7, #0]

	/* Configure RS, RW, EN, D4, D5, D6, D7 in output pushpull mode */
	GPIO_InitStruct.Pin = GPIO_PIN_RS;
 8000f12:	2301      	movs	r3, #1
 8000f14:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f16:	2301      	movs	r3, #1
 8000f18:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIO_RS, &GPIO_InitStruct);
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	4619      	mov	r1, r3
 8000f26:	4819      	ldr	r0, [pc, #100]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f28:	f001 fd96 	bl	8002a58 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_RW;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_RW, &GPIO_InitStruct);
 8000f30:	1d3b      	adds	r3, r7, #4
 8000f32:	4619      	mov	r1, r3
 8000f34:	4815      	ldr	r0, [pc, #84]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f36:	f001 fd8f 	bl	8002a58 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_EN;
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_EN, &GPIO_InitStruct);
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	4619      	mov	r1, r3
 8000f42:	4812      	ldr	r0, [pc, #72]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f44:	f001 fd88 	bl	8002a58 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D4;
 8000f48:	2310      	movs	r3, #16
 8000f4a:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D4, &GPIO_InitStruct);
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	4619      	mov	r1, r3
 8000f50:	480e      	ldr	r0, [pc, #56]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f52:	f001 fd81 	bl	8002a58 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D5;
 8000f56:	2320      	movs	r3, #32
 8000f58:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D5, &GPIO_InitStruct);
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	480b      	ldr	r0, [pc, #44]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f60:	f001 fd7a 	bl	8002a58 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D6;
 8000f64:	2340      	movs	r3, #64	@ 0x40
 8000f66:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D6, &GPIO_InitStruct);
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4807      	ldr	r0, [pc, #28]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f6e:	f001 fd73 	bl	8002a58 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D7;
 8000f72:	2380      	movs	r3, #128	@ 0x80
 8000f74:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D7, &GPIO_InitStruct);
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4804      	ldr	r0, [pc, #16]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f7c:	f001 fd6c 	bl	8002a58 <HAL_GPIO_Init>
}
 8000f80:	bf00      	nop
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40021000 	.word	0x40021000

08000f90 <CLCD_Write_Instruction>:

void CLCD_Write_Instruction(unsigned char b)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
	//상위 4비트
	GPIO_D7->ODR = (b & 0x80) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	da04      	bge.n	8000fac <CLCD_Write_Instruction+0x1c>
 8000fa2:	4b5f      	ldr	r3, [pc, #380]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000faa:	e003      	b.n	8000fb4 <CLCD_Write_Instruction+0x24>
 8000fac:	4b5c      	ldr	r3, [pc, #368]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fae:	695b      	ldr	r3, [r3, #20]
 8000fb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000fb4:	4a5a      	ldr	r2, [pc, #360]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fb6:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x40) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d004      	beq.n	8000fcc <CLCD_Write_Instruction+0x3c>
 8000fc2:	4b57      	ldr	r3, [pc, #348]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fca:	e003      	b.n	8000fd4 <CLCD_Write_Instruction+0x44>
 8000fcc:	4b54      	ldr	r3, [pc, #336]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fce:	695b      	ldr	r3, [r3, #20]
 8000fd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000fd4:	4a52      	ldr	r2, [pc, #328]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fd6:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x20) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	f003 0320 	and.w	r3, r3, #32
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d004      	beq.n	8000fec <CLCD_Write_Instruction+0x5c>
 8000fe2:	4b4f      	ldr	r3, [pc, #316]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	f043 0320 	orr.w	r3, r3, #32
 8000fea:	e003      	b.n	8000ff4 <CLCD_Write_Instruction+0x64>
 8000fec:	4b4c      	ldr	r3, [pc, #304]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fee:	695b      	ldr	r3, [r3, #20]
 8000ff0:	f023 0320 	bic.w	r3, r3, #32
 8000ff4:	4a4a      	ldr	r2, [pc, #296]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000ff6:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x10) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	f003 0310 	and.w	r3, r3, #16
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d004      	beq.n	800100c <CLCD_Write_Instruction+0x7c>
 8001002:	4b47      	ldr	r3, [pc, #284]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	f043 0310 	orr.w	r3, r3, #16
 800100a:	e003      	b.n	8001014 <CLCD_Write_Instruction+0x84>
 800100c:	4b44      	ldr	r3, [pc, #272]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	f023 0310 	bic.w	r3, r3, #16
 8001014:	4a42      	ldr	r2, [pc, #264]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001016:	6153      	str	r3, [r2, #20]

	GPIO_RS->ODR = GPIO_RS->ODR & ~GPIO_PIN_RS; //RS를 Low
 8001018:	4b41      	ldr	r3, [pc, #260]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800101a:	695b      	ldr	r3, [r3, #20]
 800101c:	4a40      	ldr	r2, [pc, #256]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800101e:	f023 0301 	bic.w	r3, r3, #1
 8001022:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW를 Low
 8001024:	4b3e      	ldr	r3, [pc, #248]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001026:	695b      	ldr	r3, [r3, #20]
 8001028:	4a3d      	ldr	r2, [pc, #244]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800102a:	f023 0302 	bic.w	r3, r3, #2
 800102e:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN를 Low
 8001030:	4b3b      	ldr	r3, [pc, #236]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001032:	695b      	ldr	r3, [r3, #20]
 8001034:	4a3a      	ldr	r2, [pc, #232]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001036:	f023 0304 	bic.w	r3, r3, #4
 800103a:	6153      	str	r3, [r2, #20]

	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN를 High
 800103c:	4b38      	ldr	r3, [pc, #224]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800103e:	695b      	ldr	r3, [r3, #20]
 8001040:	4a37      	ldr	r2, [pc, #220]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001042:	f043 0304 	orr.w	r3, r3, #4
 8001046:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN를 Low
 8001048:	4b35      	ldr	r3, [pc, #212]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800104a:	695b      	ldr	r3, [r3, #20]
 800104c:	4a34      	ldr	r2, [pc, #208]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800104e:	f023 0304 	bic.w	r3, r3, #4
 8001052:	6153      	str	r3, [r2, #20]

	//하위 4비트
	GPIO_D7->ODR = (b & 0x08) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	f003 0308 	and.w	r3, r3, #8
 800105a:	2b00      	cmp	r3, #0
 800105c:	d004      	beq.n	8001068 <CLCD_Write_Instruction+0xd8>
 800105e:	4b30      	ldr	r3, [pc, #192]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001066:	e003      	b.n	8001070 <CLCD_Write_Instruction+0xe0>
 8001068:	4b2d      	ldr	r3, [pc, #180]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001070:	4a2b      	ldr	r2, [pc, #172]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001072:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x04) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	2b00      	cmp	r3, #0
 800107c:	d004      	beq.n	8001088 <CLCD_Write_Instruction+0xf8>
 800107e:	4b28      	ldr	r3, [pc, #160]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001086:	e003      	b.n	8001090 <CLCD_Write_Instruction+0x100>
 8001088:	4b25      	ldr	r3, [pc, #148]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800108a:	695b      	ldr	r3, [r3, #20]
 800108c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001090:	4a23      	ldr	r2, [pc, #140]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001092:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x02) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d004      	beq.n	80010a8 <CLCD_Write_Instruction+0x118>
 800109e:	4b20      	ldr	r3, [pc, #128]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	f043 0320 	orr.w	r3, r3, #32
 80010a6:	e003      	b.n	80010b0 <CLCD_Write_Instruction+0x120>
 80010a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010aa:	695b      	ldr	r3, [r3, #20]
 80010ac:	f023 0320 	bic.w	r3, r3, #32
 80010b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010b2:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x01) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d004      	beq.n	80010c8 <CLCD_Write_Instruction+0x138>
 80010be:	4b18      	ldr	r3, [pc, #96]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	f043 0310 	orr.w	r3, r3, #16
 80010c6:	e003      	b.n	80010d0 <CLCD_Write_Instruction+0x140>
 80010c8:	4b15      	ldr	r3, [pc, #84]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010ca:	695b      	ldr	r3, [r3, #20]
 80010cc:	f023 0310 	bic.w	r3, r3, #16
 80010d0:	4a13      	ldr	r2, [pc, #76]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010d2:	6153      	str	r3, [r2, #20]

	GPIO_RS->ODR = GPIO_RS->ODR & ~GPIO_PIN_RS; //RS를 Low
 80010d4:	4b12      	ldr	r3, [pc, #72]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010d6:	695b      	ldr	r3, [r3, #20]
 80010d8:	4a11      	ldr	r2, [pc, #68]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010da:	f023 0301 	bic.w	r3, r3, #1
 80010de:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW를 Low
 80010e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010e2:	695b      	ldr	r3, [r3, #20]
 80010e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010e6:	f023 0302 	bic.w	r3, r3, #2
 80010ea:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN를 Low
 80010ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010ee:	695b      	ldr	r3, [r3, #20]
 80010f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010f2:	f023 0304 	bic.w	r3, r3, #4
 80010f6:	6153      	str	r3, [r2, #20]

	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN를 High
 80010f8:	4b09      	ldr	r3, [pc, #36]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010fa:	695b      	ldr	r3, [r3, #20]
 80010fc:	4a08      	ldr	r2, [pc, #32]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010fe:	f043 0304 	orr.w	r3, r3, #4
 8001102:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN를 Low
 8001104:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001106:	695b      	ldr	r3, [r3, #20]
 8001108:	4a05      	ldr	r2, [pc, #20]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800110a:	f023 0304 	bic.w	r3, r3, #4
 800110e:	6153      	str	r3, [r2, #20]

	HAL_Delay(1);
 8001110:	2001      	movs	r0, #1
 8001112:	f001 fad9 	bl	80026c8 <HAL_Delay>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40021000 	.word	0x40021000

08001124 <CLCD_Write_Display>:

void CLCD_Write_Display(unsigned char b)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
	//상위 4비트
	GPIO_D7->ODR = (b & 0x80) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	2b00      	cmp	r3, #0
 8001134:	da04      	bge.n	8001140 <CLCD_Write_Display+0x1c>
 8001136:	4b5f      	ldr	r3, [pc, #380]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800113e:	e003      	b.n	8001148 <CLCD_Write_Display+0x24>
 8001140:	4b5c      	ldr	r3, [pc, #368]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001148:	4a5a      	ldr	r2, [pc, #360]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800114a:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x40) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001152:	2b00      	cmp	r3, #0
 8001154:	d004      	beq.n	8001160 <CLCD_Write_Display+0x3c>
 8001156:	4b57      	ldr	r3, [pc, #348]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800115e:	e003      	b.n	8001168 <CLCD_Write_Display+0x44>
 8001160:	4b54      	ldr	r3, [pc, #336]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001168:	4a52      	ldr	r2, [pc, #328]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800116a:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x20) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	f003 0320 	and.w	r3, r3, #32
 8001172:	2b00      	cmp	r3, #0
 8001174:	d004      	beq.n	8001180 <CLCD_Write_Display+0x5c>
 8001176:	4b4f      	ldr	r3, [pc, #316]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	f043 0320 	orr.w	r3, r3, #32
 800117e:	e003      	b.n	8001188 <CLCD_Write_Display+0x64>
 8001180:	4b4c      	ldr	r3, [pc, #304]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001182:	695b      	ldr	r3, [r3, #20]
 8001184:	f023 0320 	bic.w	r3, r3, #32
 8001188:	4a4a      	ldr	r2, [pc, #296]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800118a:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x10) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	f003 0310 	and.w	r3, r3, #16
 8001192:	2b00      	cmp	r3, #0
 8001194:	d004      	beq.n	80011a0 <CLCD_Write_Display+0x7c>
 8001196:	4b47      	ldr	r3, [pc, #284]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	f043 0310 	orr.w	r3, r3, #16
 800119e:	e003      	b.n	80011a8 <CLCD_Write_Display+0x84>
 80011a0:	4b44      	ldr	r3, [pc, #272]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011a2:	695b      	ldr	r3, [r3, #20]
 80011a4:	f023 0310 	bic.w	r3, r3, #16
 80011a8:	4a42      	ldr	r2, [pc, #264]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011aa:	6153      	str	r3, [r2, #20]

	GPIO_RS->ODR = GPIO_RS->ODR | GPIO_PIN_RS; //RS를 High
 80011ac:	4b41      	ldr	r3, [pc, #260]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011ae:	695b      	ldr	r3, [r3, #20]
 80011b0:	4a40      	ldr	r2, [pc, #256]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW를 Low
 80011b8:	4b3e      	ldr	r3, [pc, #248]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	4a3d      	ldr	r2, [pc, #244]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011be:	f023 0302 	bic.w	r3, r3, #2
 80011c2:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN를 Low
 80011c4:	4b3b      	ldr	r3, [pc, #236]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011c6:	695b      	ldr	r3, [r3, #20]
 80011c8:	4a3a      	ldr	r2, [pc, #232]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011ca:	f023 0304 	bic.w	r3, r3, #4
 80011ce:	6153      	str	r3, [r2, #20]

	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN를 High
 80011d0:	4b38      	ldr	r3, [pc, #224]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011d2:	695b      	ldr	r3, [r3, #20]
 80011d4:	4a37      	ldr	r2, [pc, #220]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011d6:	f043 0304 	orr.w	r3, r3, #4
 80011da:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN를 Low
 80011dc:	4b35      	ldr	r3, [pc, #212]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011de:	695b      	ldr	r3, [r3, #20]
 80011e0:	4a34      	ldr	r2, [pc, #208]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011e2:	f023 0304 	bic.w	r3, r3, #4
 80011e6:	6153      	str	r3, [r2, #20]

	//하위 4비트
	GPIO_D7->ODR = (b & 0x08) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	f003 0308 	and.w	r3, r3, #8
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d004      	beq.n	80011fc <CLCD_Write_Display+0xd8>
 80011f2:	4b30      	ldr	r3, [pc, #192]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011fa:	e003      	b.n	8001204 <CLCD_Write_Display+0xe0>
 80011fc:	4b2d      	ldr	r3, [pc, #180]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001204:	4a2b      	ldr	r2, [pc, #172]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001206:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x04) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	f003 0304 	and.w	r3, r3, #4
 800120e:	2b00      	cmp	r3, #0
 8001210:	d004      	beq.n	800121c <CLCD_Write_Display+0xf8>
 8001212:	4b28      	ldr	r3, [pc, #160]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800121a:	e003      	b.n	8001224 <CLCD_Write_Display+0x100>
 800121c:	4b25      	ldr	r3, [pc, #148]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001224:	4a23      	ldr	r2, [pc, #140]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001226:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x02) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d004      	beq.n	800123c <CLCD_Write_Display+0x118>
 8001232:	4b20      	ldr	r3, [pc, #128]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	f043 0320 	orr.w	r3, r3, #32
 800123a:	e003      	b.n	8001244 <CLCD_Write_Display+0x120>
 800123c:	4b1d      	ldr	r3, [pc, #116]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	f023 0320 	bic.w	r3, r3, #32
 8001244:	4a1b      	ldr	r2, [pc, #108]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001246:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x01) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b00      	cmp	r3, #0
 8001250:	d004      	beq.n	800125c <CLCD_Write_Display+0x138>
 8001252:	4b18      	ldr	r3, [pc, #96]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	f043 0310 	orr.w	r3, r3, #16
 800125a:	e003      	b.n	8001264 <CLCD_Write_Display+0x140>
 800125c:	4b15      	ldr	r3, [pc, #84]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800125e:	695b      	ldr	r3, [r3, #20]
 8001260:	f023 0310 	bic.w	r3, r3, #16
 8001264:	4a13      	ldr	r2, [pc, #76]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001266:	6153      	str	r3, [r2, #20]

	GPIO_RS->ODR = GPIO_RS->ODR | GPIO_PIN_RS; //RS를 High
 8001268:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800126a:	695b      	ldr	r3, [r3, #20]
 800126c:	4a11      	ldr	r2, [pc, #68]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW를 Low
 8001274:	4b0f      	ldr	r3, [pc, #60]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001276:	695b      	ldr	r3, [r3, #20]
 8001278:	4a0e      	ldr	r2, [pc, #56]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800127a:	f023 0302 	bic.w	r3, r3, #2
 800127e:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN를 Low
 8001280:	4b0c      	ldr	r3, [pc, #48]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	4a0b      	ldr	r2, [pc, #44]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001286:	f023 0304 	bic.w	r3, r3, #4
 800128a:	6153      	str	r3, [r2, #20]

	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN를 High
 800128c:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800128e:	695b      	ldr	r3, [r3, #20]
 8001290:	4a08      	ldr	r2, [pc, #32]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001292:	f043 0304 	orr.w	r3, r3, #4
 8001296:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN를 Low
 8001298:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	4a05      	ldr	r2, [pc, #20]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800129e:	f023 0304 	bic.w	r3, r3, #4
 80012a2:	6153      	str	r3, [r2, #20]

	HAL_Delay(1);
 80012a4:	2001      	movs	r0, #1
 80012a6:	f001 fa0f 	bl	80026c8 <HAL_Delay>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40021000 	.word	0x40021000

080012b8 <CLCD_Gotoxy>:


void CLCD_Gotoxy(unsigned char x, unsigned char y)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	460a      	mov	r2, r1
 80012c2:	71fb      	strb	r3, [r7, #7]
 80012c4:	4613      	mov	r3, r2
 80012c6:	71bb      	strb	r3, [r7, #6]
	// 16 * 2 character LCD
	switch(y)
 80012c8:	79bb      	ldrb	r3, [r7, #6]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d002      	beq.n	80012d4 <CLCD_Gotoxy+0x1c>
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d007      	beq.n	80012e2 <CLCD_Gotoxy+0x2a>
		case 0 : CLCD_Write_Instruction(0x80 + x); break;
		case 1 : CLCD_Write_Instruction(0xC0 + x); break;
		//case 2 : CLCD_Write_Instruction(0x90+x); break; //Uncomment for 16 * 4 character LCD
		//case 3 : CLCD_Write_Instruction(0xd0+x); break; //Uncomment for 16 * 4 character LCD
	}
}
 80012d2:	e00d      	b.n	80012f0 <CLCD_Gotoxy+0x38>
		case 0 : CLCD_Write_Instruction(0x80 + x); break;
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	3b80      	subs	r3, #128	@ 0x80
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fe58 	bl	8000f90 <CLCD_Write_Instruction>
 80012e0:	e006      	b.n	80012f0 <CLCD_Gotoxy+0x38>
		case 1 : CLCD_Write_Instruction(0xC0 + x); break;
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	3b40      	subs	r3, #64	@ 0x40
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff fe51 	bl	8000f90 <CLCD_Write_Instruction>
 80012ee:	bf00      	nop
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <CLCD_Puts>:

void CLCD_Puts(unsigned char x, unsigned char y, unsigned char *str)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	603a      	str	r2, [r7, #0]
 8001302:	71fb      	strb	r3, [r7, #7]
 8001304:	460b      	mov	r3, r1
 8001306:	71bb      	strb	r3, [r7, #6]
	unsigned int i=0;
 8001308:	2300      	movs	r3, #0
 800130a:	60fb      	str	r3, [r7, #12]

	CLCD_Gotoxy(x,y);
 800130c:	79ba      	ldrb	r2, [r7, #6]
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	4611      	mov	r1, r2
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff ffd0 	bl	80012b8 <CLCD_Gotoxy>
	do
	{
		CLCD_Write_Display(str[i]);
 8001318:	683a      	ldr	r2, [r7, #0]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4413      	add	r3, r2
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff feff 	bl	8001124 <CLCD_Write_Display>
	}
	while(str[++i]!='\0');
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	3301      	adds	r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	4413      	add	r3, r2
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1ef      	bne.n	8001318 <CLCD_Puts+0x20>
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <CLCD_Init>:

void CLCD_Init(void)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8001346:	2064      	movs	r0, #100	@ 0x64
 8001348:	f001 f9be 	bl	80026c8 <HAL_Delay>
	CLCD_Write_Instruction(0x28);
 800134c:	2028      	movs	r0, #40	@ 0x28
 800134e:	f7ff fe1f 	bl	8000f90 <CLCD_Write_Instruction>
	HAL_Delay(10);
 8001352:	200a      	movs	r0, #10
 8001354:	f001 f9b8 	bl	80026c8 <HAL_Delay>
	CLCD_Write_Instruction(0x28);
 8001358:	2028      	movs	r0, #40	@ 0x28
 800135a:	f7ff fe19 	bl	8000f90 <CLCD_Write_Instruction>
	HAL_Delay(10);
 800135e:	200a      	movs	r0, #10
 8001360:	f001 f9b2 	bl	80026c8 <HAL_Delay>
	CLCD_Write_Instruction(0x0C);
 8001364:	200c      	movs	r0, #12
 8001366:	f7ff fe13 	bl	8000f90 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x06);
 800136a:	2006      	movs	r0, #6
 800136c:	f7ff fe10 	bl	8000f90 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x02);
 8001370:	2002      	movs	r0, #2
 8001372:	f7ff fe0d 	bl	8000f90 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x01);
 8001376:	2001      	movs	r0, #1
 8001378:	f7ff fe0a 	bl	8000f90 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x01);
 800137c:	2001      	movs	r0, #1
 800137e:	f7ff fe07 	bl	8000f90 <CLCD_Write_Instruction>
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}

08001386 <CLCD_Clear>:

void CLCD_Clear(void)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	af00      	add	r7, sp, #0
	CLCD_Write_Instruction(0x01);
 800138a:	2001      	movs	r0, #1
 800138c:	f7ff fe00 	bl	8000f90 <CLCD_Write_Instruction>
	HAL_Delay(10);
 8001390:	200a      	movs	r0, #10
 8001392:	f001 f999 	bl	80026c8 <HAL_Delay>
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}

0800139a <HandleButtonPress>:
Button Btn3;
Button Btn4;


void HandleButtonPress(Button *btn, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin_Num)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b084      	sub	sp, #16
 800139e:	af00      	add	r7, sp, #0
 80013a0:	60f8      	str	r0, [r7, #12]
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	4613      	mov	r3, r2
 80013a6:	80fb      	strh	r3, [r7, #6]

	if (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin_Num) == GPIO_PIN_SET)
 80013a8:	88fb      	ldrh	r3, [r7, #6]
 80013aa:	4619      	mov	r1, r3
 80013ac:	68b8      	ldr	r0, [r7, #8]
 80013ae:	f001 fcef 	bl	8002d90 <HAL_GPIO_ReadPin>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d111      	bne.n	80013dc <HandleButtonPress+0x42>
	{
		if (btn->is_pressed == false)// to reduce debouncing
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	791b      	ldrb	r3, [r3, #4]
 80013bc:	f083 0301 	eor.w	r3, r3, #1
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d029      	beq.n	800141a <HandleButtonPress+0x80>
		{
			btn->is_pressed = true;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	2201      	movs	r2, #1
 80013ca:	711a      	strb	r2, [r3, #4]

			if (btn->state == Idle)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	795b      	ldrb	r3, [r3, #5]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d122      	bne.n	800141a <HandleButtonPress+0x80>
			{
				btn->state = Pressing;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2201      	movs	r2, #1
 80013d8:	715a      	strb	r2, [r3, #5]
			}
			btn->state = Idle;

		}
	}
}
 80013da:	e01e      	b.n	800141a <HandleButtonPress+0x80>
	} else if (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin_Num) == GPIO_PIN_RESET)
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	4619      	mov	r1, r3
 80013e0:	68b8      	ldr	r0, [r7, #8]
 80013e2:	f001 fcd5 	bl	8002d90 <HAL_GPIO_ReadPin>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d116      	bne.n	800141a <HandleButtonPress+0x80>
		if (btn->is_pressed == true) // to reduce debouncing
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	791b      	ldrb	r3, [r3, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d012      	beq.n	800141a <HandleButtonPress+0x80>
			btn->is_pressed = false;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2200      	movs	r2, #0
 80013f8:	711a      	strb	r2, [r3, #4]
			if (btn->state == Pressing)
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	795b      	ldrb	r3, [r3, #5]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d108      	bne.n	8001414 <HandleButtonPress+0x7a>
				btn->state = Released;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2202      	movs	r2, #2
 8001406:	715a      	strb	r2, [r3, #5]
				CheckButtonPressTime(btn);
 8001408:	68f8      	ldr	r0, [r7, #12]
 800140a:	f000 f80a 	bl	8001422 <CheckButtonPressTime>
				btn->millisecond = 0;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
			btn->state = Idle;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2200      	movs	r2, #0
 8001418:	715a      	strb	r2, [r3, #5]
}
 800141a:	bf00      	nop
 800141c:	3710      	adds	r7, #16
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <CheckButtonPressTime>:

void CheckButtonPressTime(Button* Btn)
{
 8001422:	b480      	push	{r7}
 8001424:	b083      	sub	sp, #12
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
	if(Btn->millisecond < SHORT_PRESS_TIME)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8001432:	da03      	bge.n	800143c <CheckButtonPressTime+0x1a>
	{
		Btn->ReleasedTime = Short_Released;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	719a      	strb	r2, [r3, #6]
	}
	else
	{
		Btn->ReleasedTime = Long_Released;
	}
}
 800143a:	e00c      	b.n	8001456 <CheckButtonPressTime+0x34>
	else if(Btn->millisecond < LONG_PRESS_TIME)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001444:	4293      	cmp	r3, r2
 8001446:	dc03      	bgt.n	8001450 <CheckButtonPressTime+0x2e>
		Btn->ReleasedTime = Mid_Released;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2202      	movs	r2, #2
 800144c:	719a      	strb	r2, [r3, #6]
}
 800144e:	e002      	b.n	8001456 <CheckButtonPressTime+0x34>
		Btn->ReleasedTime = Long_Released;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2203      	movs	r2, #3
 8001454:	719a      	strb	r2, [r3, #6]
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <BtnHoldEvent>:

void BtnHoldEvent(Button* btn,GPIO_TypeDef* GPIO,uint16_t GPIO_PIN )
{	// HOLD EVENT
 8001462:	b580      	push	{r7, lr}
 8001464:	b084      	sub	sp, #16
 8001466:	af00      	add	r7, sp, #0
 8001468:	60f8      	str	r0, [r7, #12]
 800146a:	60b9      	str	r1, [r7, #8]
 800146c:	4613      	mov	r3, r2
 800146e:	80fb      	strh	r3, [r7, #6]
	if((HAL_GPIO_ReadPin(GPIO, GPIO_PIN) == GPIO_PIN_SET)|| btn->state == Pressing)
 8001470:	88fb      	ldrh	r3, [r7, #6]
 8001472:	4619      	mov	r1, r3
 8001474:	68b8      	ldr	r0, [r7, #8]
 8001476:	f001 fc8b 	bl	8002d90 <HAL_GPIO_ReadPin>
 800147a:	4603      	mov	r3, r0
 800147c:	2b01      	cmp	r3, #1
 800147e:	d003      	beq.n	8001488 <BtnHoldEvent+0x26>
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	795b      	ldrb	r3, [r3, #5]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d10a      	bne.n	800149e <BtnHoldEvent+0x3c>
	{
		if (btn->millisecond <= LONG_PRESS_TIME + 1)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f640 12c5 	movw	r2, #2501	@ 0x9c5
 8001490:	4293      	cmp	r3, r2
 8001492:	dc04      	bgt.n	800149e <BtnHoldEvent+0x3c>
		{
			btn->millisecond++;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	1c5a      	adds	r2, r3, #1
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	601a      	str	r2, [r3, #0]
		}
	}
}
 800149e:	bf00      	nop
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <activateBuzzer30msOn>:
#include "buzzer.h"
#include "watch.h"
 Buz Buz1;

void activateBuzzer30msOn( Buz* buzzer, TIM_HandleTypeDef* htim, uint32_t channel,uint32_t psc)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b084      	sub	sp, #16
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	60f8      	str	r0, [r7, #12]
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
 80014b2:	603b      	str	r3, [r7, #0]
	if(buzzer->BuzOnOff == false)
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	f083 0301 	eor.w	r3, r3, #1
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d00d      	beq.n	80014e0 <activateBuzzer30msOn+0x3a>
	{
		__HAL_TIM_SET_PRESCALER(htim, psc);
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_TIM_PWM_Start(htim, channel);
 80014cc:	6879      	ldr	r1, [r7, #4]
 80014ce:	68b8      	ldr	r0, [r7, #8]
 80014d0:	f002 fa5a 	bl	8003988 <HAL_TIM_PWM_Start>
		buzzer->BuzCount = 0;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2200      	movs	r2, #0
 80014d8:	805a      	strh	r2, [r3, #2]
		buzzer->BuzOnOff = true;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2201      	movs	r2, #1
 80014de:	701a      	strb	r2, [r3, #0]
	}

}
 80014e0:	bf00      	nop
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <activateBuzzer30msOff>:

void activateBuzzer30msOff( Buz* buzzer, TIM_HandleTypeDef* htim, uint32_t channel)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
	if (buzzer->BuzOnOff)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d015      	beq.n	800152a <activateBuzzer30msOff+0x42>
	{
		buzzer->BuzCount++;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	885b      	ldrh	r3, [r3, #2]
 8001502:	b29b      	uxth	r3, r3
 8001504:	3301      	adds	r3, #1
 8001506:	b29a      	uxth	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	805a      	strh	r2, [r3, #2]

		if (buzzer->BuzCount >= 30)
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	885b      	ldrh	r3, [r3, #2]
 8001510:	b29b      	uxth	r3, r3
 8001512:	2b1d      	cmp	r3, #29
 8001514:	d909      	bls.n	800152a <activateBuzzer30msOff+0x42>
		{
			HAL_TIM_PWM_Stop(htim, channel);
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	68b8      	ldr	r0, [r7, #8]
 800151a:	f002 fafd 	bl	8003b18 <HAL_TIM_PWM_Stop>
			buzzer->BuzOnOff = false;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]
			buzzer->BuzCount = 0;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2200      	movs	r2, #0
 8001528:	805a      	strh	r2, [r3, #2]
		}
	}
}
 800152a:	bf00      	nop
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <checkAndRingBuzzer>:

void checkAndRingBuzzer(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
    // 매일 0시 정각에 부저를 고음으로 울리기
    if (watch.Time.hours == 0 && watch.Time.minutes == 0 && watch.Time.second == 0)
 8001538:	4b16      	ldr	r3, [pc, #88]	@ (8001594 <checkAndRingBuzzer+0x60>)
 800153a:	791b      	ldrb	r3, [r3, #4]
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d111      	bne.n	8001566 <checkAndRingBuzzer+0x32>
 8001542:	4b14      	ldr	r3, [pc, #80]	@ (8001594 <checkAndRingBuzzer+0x60>)
 8001544:	795b      	ldrb	r3, [r3, #5]
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b00      	cmp	r3, #0
 800154a:	d10c      	bne.n	8001566 <checkAndRingBuzzer+0x32>
 800154c:	4b11      	ldr	r3, [pc, #68]	@ (8001594 <checkAndRingBuzzer+0x60>)
 800154e:	799b      	ldrb	r3, [r3, #6]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b00      	cmp	r3, #0
 8001554:	d107      	bne.n	8001566 <checkAndRingBuzzer+0x32>
    {
        Buz1.BuzTone = BUZ_TONE_HIGH_PSC;
 8001556:	4b10      	ldr	r3, [pc, #64]	@ (8001598 <checkAndRingBuzzer+0x64>)
 8001558:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 800155c:	80da      	strh	r2, [r3, #6]
        Buz1.BuzFlag = true;
 800155e:	4b0e      	ldr	r3, [pc, #56]	@ (8001598 <checkAndRingBuzzer+0x64>)
 8001560:	2201      	movs	r2, #1
 8001562:	711a      	strb	r2, [r3, #4]
    else if (watch.Time.minutes == 0 && watch.Time.second == 0)
    {
        Buz1.BuzTone = BUZ_TONE_MID_PSC;
        Buz1.BuzFlag = true;
    }
}
 8001564:	e010      	b.n	8001588 <checkAndRingBuzzer+0x54>
    else if (watch.Time.minutes == 0 && watch.Time.second == 0)
 8001566:	4b0b      	ldr	r3, [pc, #44]	@ (8001594 <checkAndRingBuzzer+0x60>)
 8001568:	795b      	ldrb	r3, [r3, #5]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b00      	cmp	r3, #0
 800156e:	d10b      	bne.n	8001588 <checkAndRingBuzzer+0x54>
 8001570:	4b08      	ldr	r3, [pc, #32]	@ (8001594 <checkAndRingBuzzer+0x60>)
 8001572:	799b      	ldrb	r3, [r3, #6]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d106      	bne.n	8001588 <checkAndRingBuzzer+0x54>
        Buz1.BuzTone = BUZ_TONE_MID_PSC;
 800157a:	4b07      	ldr	r3, [pc, #28]	@ (8001598 <checkAndRingBuzzer+0x64>)
 800157c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001580:	80da      	strh	r2, [r3, #6]
        Buz1.BuzFlag = true;
 8001582:	4b05      	ldr	r3, [pc, #20]	@ (8001598 <checkAndRingBuzzer+0x64>)
 8001584:	2201      	movs	r2, #1
 8001586:	711a      	strb	r2, [r3, #4]
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	200001ac 	.word	0x200001ac
 8001598:	200000c4 	.word	0x200000c4

0800159c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08c      	sub	sp, #48	@ 0x30
 80015a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a2:	f107 031c 	add.w	r3, r7, #28
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	60da      	str	r2, [r3, #12]
 80015b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	61bb      	str	r3, [r7, #24]
 80015b6:	4b5d      	ldr	r3, [pc, #372]	@ (800172c <MX_GPIO_Init+0x190>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	4a5c      	ldr	r2, [pc, #368]	@ (800172c <MX_GPIO_Init+0x190>)
 80015bc:	f043 0310 	orr.w	r3, r3, #16
 80015c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c2:	4b5a      	ldr	r3, [pc, #360]	@ (800172c <MX_GPIO_Init+0x190>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	f003 0310 	and.w	r3, r3, #16
 80015ca:	61bb      	str	r3, [r7, #24]
 80015cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]
 80015d2:	4b56      	ldr	r3, [pc, #344]	@ (800172c <MX_GPIO_Init+0x190>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d6:	4a55      	ldr	r2, [pc, #340]	@ (800172c <MX_GPIO_Init+0x190>)
 80015d8:	f043 0304 	orr.w	r3, r3, #4
 80015dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015de:	4b53      	ldr	r3, [pc, #332]	@ (800172c <MX_GPIO_Init+0x190>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	f003 0304 	and.w	r3, r3, #4
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
 80015ee:	4b4f      	ldr	r3, [pc, #316]	@ (800172c <MX_GPIO_Init+0x190>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	4a4e      	ldr	r2, [pc, #312]	@ (800172c <MX_GPIO_Init+0x190>)
 80015f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fa:	4b4c      	ldr	r3, [pc, #304]	@ (800172c <MX_GPIO_Init+0x190>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	4b48      	ldr	r3, [pc, #288]	@ (800172c <MX_GPIO_Init+0x190>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	4a47      	ldr	r2, [pc, #284]	@ (800172c <MX_GPIO_Init+0x190>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6313      	str	r3, [r2, #48]	@ 0x30
 8001616:	4b45      	ldr	r3, [pc, #276]	@ (800172c <MX_GPIO_Init+0x190>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	4b41      	ldr	r3, [pc, #260]	@ (800172c <MX_GPIO_Init+0x190>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	4a40      	ldr	r2, [pc, #256]	@ (800172c <MX_GPIO_Init+0x190>)
 800162c:	f043 0302 	orr.w	r3, r3, #2
 8001630:	6313      	str	r3, [r2, #48]	@ 0x30
 8001632:	4b3e      	ldr	r3, [pc, #248]	@ (800172c <MX_GPIO_Init+0x190>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	607b      	str	r3, [r7, #4]
 8001642:	4b3a      	ldr	r3, [pc, #232]	@ (800172c <MX_GPIO_Init+0x190>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	4a39      	ldr	r2, [pc, #228]	@ (800172c <MX_GPIO_Init+0x190>)
 8001648:	f043 0308 	orr.w	r3, r3, #8
 800164c:	6313      	str	r3, [r2, #48]	@ 0x30
 800164e:	4b37      	ldr	r3, [pc, #220]	@ (800172c <MX_GPIO_Init+0x190>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	607b      	str	r3, [r7, #4]
 8001658:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 800165a:	2200      	movs	r2, #0
 800165c:	2121      	movs	r1, #33	@ 0x21
 800165e:	4834      	ldr	r0, [pc, #208]	@ (8001730 <MX_GPIO_Init+0x194>)
 8001660:	f001 fbae 	bl	8002dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001664:	2200      	movs	r2, #0
 8001666:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 800166a:	4832      	ldr	r0, [pc, #200]	@ (8001734 <MX_GPIO_Init+0x198>)
 800166c:	f001 fba8 	bl	8002dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001670:	2200      	movs	r2, #0
 8001672:	2140      	movs	r1, #64	@ 0x40
 8001674:	4830      	ldr	r0, [pc, #192]	@ (8001738 <MX_GPIO_Init+0x19c>)
 8001676:	f001 fba3 	bl	8002dc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800167a:	2308      	movs	r3, #8
 800167c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800167e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001682:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001688:	f107 031c 	add.w	r3, r7, #28
 800168c:	4619      	mov	r1, r3
 800168e:	482b      	ldr	r0, [pc, #172]	@ (800173c <MX_GPIO_Init+0x1a0>)
 8001690:	f001 f9e2 	bl	8002a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001694:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800169a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800169e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a4:	f107 031c 	add.w	r3, r7, #28
 80016a8:	4619      	mov	r1, r3
 80016aa:	4823      	ldr	r0, [pc, #140]	@ (8001738 <MX_GPIO_Init+0x19c>)
 80016ac:	f001 f9d4 	bl	8002a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 80016b0:	2321      	movs	r3, #33	@ 0x21
 80016b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b4:	2301      	movs	r3, #1
 80016b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016bc:	2300      	movs	r3, #0
 80016be:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c0:	f107 031c 	add.w	r3, r7, #28
 80016c4:	4619      	mov	r1, r3
 80016c6:	481a      	ldr	r0, [pc, #104]	@ (8001730 <MX_GPIO_Init+0x194>)
 80016c8:	f001 f9c6 	bl	8002a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 80016cc:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 80016d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80016d2:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80016d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016dc:	f107 031c 	add.w	r3, r7, #28
 80016e0:	4619      	mov	r1, r3
 80016e2:	4814      	ldr	r0, [pc, #80]	@ (8001734 <MX_GPIO_Init+0x198>)
 80016e4:	f001 f9b8 	bl	8002a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80016e8:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 80016ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ee:	2301      	movs	r3, #1
 80016f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f6:	2300      	movs	r3, #0
 80016f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016fa:	f107 031c 	add.w	r3, r7, #28
 80016fe:	4619      	mov	r1, r3
 8001700:	480c      	ldr	r0, [pc, #48]	@ (8001734 <MX_GPIO_Init+0x198>)
 8001702:	f001 f9a9 	bl	8002a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001706:	2340      	movs	r3, #64	@ 0x40
 8001708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170a:	2301      	movs	r3, #1
 800170c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	2300      	movs	r3, #0
 8001714:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001716:	f107 031c 	add.w	r3, r7, #28
 800171a:	4619      	mov	r1, r3
 800171c:	4806      	ldr	r0, [pc, #24]	@ (8001738 <MX_GPIO_Init+0x19c>)
 800171e:	f001 f99b 	bl	8002a58 <HAL_GPIO_Init>

}
 8001722:	bf00      	nop
 8001724:	3730      	adds	r7, #48	@ 0x30
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40023800 	.word	0x40023800
 8001730:	40020400 	.word	0x40020400
 8001734:	40020c00 	.word	0x40020c00
 8001738:	40020800 	.word	0x40020800
 800173c:	40021000 	.word	0x40021000

08001740 <_write>:
void SystemClock_Config(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */

int _write(int file, char*p , int len)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
 HAL_UART_Transmit(&huart3, p , len , 10);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	b29a      	uxth	r2, r3
 8001750:	230a      	movs	r3, #10
 8001752:	68b9      	ldr	r1, [r7, #8]
 8001754:	4803      	ldr	r0, [pc, #12]	@ (8001764 <_write+0x24>)
 8001756:	f003 f8ed 	bl	8004934 <HAL_UART_Transmit>
 return len;
 800175a:	687b      	ldr	r3, [r7, #4]
}
 800175c:	4618      	mov	r0, r3
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20000164 	.word	0x20000164

08001768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001768:	b590      	push	{r4, r7, lr}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800176e:	f000 ff39 	bl	80025e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001772:	f000 f93d 	bl	80019f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001776:	f7ff ff11 	bl	800159c <MX_GPIO_Init>
  MX_TIM2_Init();
 800177a:	f000 fbbf 	bl	8001efc <MX_TIM2_Init>
  MX_TIM6_Init();
 800177e:	f000 fc33 	bl	8001fe8 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 8001782:	f000 fcd5 	bl	8002130 <MX_USART3_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001786:	f000 f99d 	bl	8001ac4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	_7SEG_GPIO_Init();
 800178a:	f7fe fee9 	bl	8000560 <_7SEG_GPIO_Init>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800178e:	2201      	movs	r2, #1
 8001790:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001794:	4888      	ldr	r0, [pc, #544]	@ (80019b8 <main+0x250>)
 8001796:	f001 fb13 	bl	8002dc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800179a:	2201      	movs	r2, #1
 800179c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017a0:	4885      	ldr	r0, [pc, #532]	@ (80019b8 <main+0x250>)
 80017a2:	f001 fb0d 	bl	8002dc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80017a6:	2201      	movs	r2, #1
 80017a8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80017ac:	4882      	ldr	r0, [pc, #520]	@ (80019b8 <main+0x250>)
 80017ae:	f001 fb07 	bl	8002dc0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 80017b2:	2201      	movs	r2, #1
 80017b4:	2140      	movs	r1, #64	@ 0x40
 80017b6:	4881      	ldr	r0, [pc, #516]	@ (80019bc <main+0x254>)
 80017b8:	f001 fb02 	bl	8002dc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80017bc:	2201      	movs	r2, #1
 80017be:	2120      	movs	r1, #32
 80017c0:	487f      	ldr	r0, [pc, #508]	@ (80019c0 <main+0x258>)
 80017c2:	f001 fafd 	bl	8002dc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80017c6:	2201      	movs	r2, #1
 80017c8:	2101      	movs	r1, #1
 80017ca:	487d      	ldr	r0, [pc, #500]	@ (80019c0 <main+0x258>)
 80017cc:	f001 faf8 	bl	8002dc0 <HAL_GPIO_WritePin>

	HAL_TIM_Base_Start_IT(&htim6);
 80017d0:	487c      	ldr	r0, [pc, #496]	@ (80019c4 <main+0x25c>)
 80017d2:	f002 f80f 	bl	80037f4 <HAL_TIM_Base_Start_IT>
	_7SEG_SetNumber(DGT2, 0, OFF);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2100      	movs	r1, #0
 80017da:	2001      	movs	r0, #1
 80017dc:	f7fe ffa6 	bl	800072c <_7SEG_SetNumber>

	CLCD_GPIO_Init();
 80017e0:	f7ff fb86 	bl	8000ef0 <CLCD_GPIO_Init>
	CLCD_Init();
 80017e4:	f7ff fdad 	bl	8001342 <CLCD_Init>
	CLCD_Clear();
 80017e8:	f7ff fdcd 	bl	8001386 <CLCD_Clear>

	mode = WATCH;
 80017ec:	4b76      	ldr	r3, [pc, #472]	@ (80019c8 <main+0x260>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	701a      	strb	r2, [r3, #0]

	Buz1.BuzOnOff = false;
 80017f2:	4b76      	ldr	r3, [pc, #472]	@ (80019cc <main+0x264>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
	Buz1.BuzCount = 0;
 80017f8:	4b74      	ldr	r3, [pc, #464]	@ (80019cc <main+0x264>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	805a      	strh	r2, [r3, #2]
	Buz1.BuzFlag = false;
 80017fe:	4b73      	ldr	r3, [pc, #460]	@ (80019cc <main+0x264>)
 8001800:	2200      	movs	r2, #0
 8001802:	711a      	strb	r2, [r3, #4]
	Buz1.BuzTone = Idle_Released;
 8001804:	4b71      	ldr	r3, [pc, #452]	@ (80019cc <main+0x264>)
 8001806:	2200      	movs	r2, #0
 8001808:	80da      	strh	r2, [r3, #6]
	BuzLock = false;
 800180a:	4b71      	ldr	r3, [pc, #452]	@ (80019d0 <main+0x268>)
 800180c:	2200      	movs	r2, #0
 800180e:	701a      	strb	r2, [r3, #0]

	Btn1.is_pressed = false;
 8001810:	4b70      	ldr	r3, [pc, #448]	@ (80019d4 <main+0x26c>)
 8001812:	2200      	movs	r2, #0
 8001814:	711a      	strb	r2, [r3, #4]
	Btn2.is_pressed = false;
 8001816:	4b70      	ldr	r3, [pc, #448]	@ (80019d8 <main+0x270>)
 8001818:	2200      	movs	r2, #0
 800181a:	711a      	strb	r2, [r3, #4]
	Btn3.is_pressed = false;
 800181c:	4b6f      	ldr	r3, [pc, #444]	@ (80019dc <main+0x274>)
 800181e:	2200      	movs	r2, #0
 8001820:	711a      	strb	r2, [r3, #4]
	Btn4.is_pressed = false;
 8001822:	4b6f      	ldr	r3, [pc, #444]	@ (80019e0 <main+0x278>)
 8001824:	2200      	movs	r2, #0
 8001826:	711a      	strb	r2, [r3, #4]

	Btn1.ReleasedTime = Idle_Released;
 8001828:	4b6a      	ldr	r3, [pc, #424]	@ (80019d4 <main+0x26c>)
 800182a:	2200      	movs	r2, #0
 800182c:	719a      	strb	r2, [r3, #6]
	Btn2.ReleasedTime = Idle_Released;
 800182e:	4b6a      	ldr	r3, [pc, #424]	@ (80019d8 <main+0x270>)
 8001830:	2200      	movs	r2, #0
 8001832:	719a      	strb	r2, [r3, #6]
	Btn3.ReleasedTime = Idle_Released;
 8001834:	4b69      	ldr	r3, [pc, #420]	@ (80019dc <main+0x274>)
 8001836:	2200      	movs	r2, #0
 8001838:	719a      	strb	r2, [r3, #6]
	Btn4.ReleasedTime = Idle_Released;
 800183a:	4b69      	ldr	r3, [pc, #420]	@ (80019e0 <main+0x278>)
 800183c:	2200      	movs	r2, #0
 800183e:	719a      	strb	r2, [r3, #6]

	watch = (Watch){
 8001840:	4a68      	ldr	r2, [pc, #416]	@ (80019e4 <main+0x27c>)
 8001842:	4b69      	ldr	r3, [pc, #420]	@ (80019e8 <main+0x280>)
 8001844:	4614      	mov	r4, r2
 8001846:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001848:	6020      	str	r0, [r4, #0]
 800184a:	6061      	str	r1, [r4, #4]
 800184c:	60a2      	str	r2, [r4, #8]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch(mode)
 800184e:	4b5e      	ldr	r3, [pc, #376]	@ (80019c8 <main+0x260>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <main+0xf4>
 8001858:	2b01      	cmp	r3, #1
				break;
			}
		  break;

	  case STOPWATCH:
		  break;
 800185a:	e06f      	b.n	800193c <main+0x1d4>
		  updateWatchDisplay();
 800185c:	f000 fdca 	bl	80023f4 <updateWatchDisplay>
		  checkAndRingBuzzer();
 8001860:	f7ff fe68 	bl	8001534 <checkAndRingBuzzer>
			switch (Btn1.ReleasedTime)
 8001864:	4b5b      	ldr	r3, [pc, #364]	@ (80019d4 <main+0x26c>)
 8001866:	799b      	ldrb	r3, [r3, #6]
 8001868:	2b03      	cmp	r3, #3
 800186a:	d015      	beq.n	8001898 <main+0x130>
 800186c:	2b03      	cmp	r3, #3
 800186e:	dc15      	bgt.n	800189c <main+0x134>
 8001870:	2b01      	cmp	r3, #1
 8001872:	d001      	beq.n	8001878 <main+0x110>
 8001874:	2b02      	cmp	r3, #2
				break;
 8001876:	e012      	b.n	800189e <main+0x136>
				mode = (mode + 1) % NUM_MODES;
 8001878:	4b53      	ldr	r3, [pc, #332]	@ (80019c8 <main+0x260>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	b2db      	uxtb	r3, r3
 800187e:	3301      	adds	r3, #1
 8001880:	2b00      	cmp	r3, #0
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	bfb8      	it	lt
 8001888:	425b      	neglt	r3, r3
 800188a:	b2da      	uxtb	r2, r3
 800188c:	4b4e      	ldr	r3, [pc, #312]	@ (80019c8 <main+0x260>)
 800188e:	701a      	strb	r2, [r3, #0]
				Btn1.ReleasedTime = Idle_Released;
 8001890:	4b50      	ldr	r3, [pc, #320]	@ (80019d4 <main+0x26c>)
 8001892:	2200      	movs	r2, #0
 8001894:	719a      	strb	r2, [r3, #6]
				break;
 8001896:	e002      	b.n	800189e <main+0x136>
				break;
 8001898:	bf00      	nop
 800189a:	e000      	b.n	800189e <main+0x136>
				break;
 800189c:	bf00      	nop
			switch (Btn2.ReleasedTime)
 800189e:	4b4e      	ldr	r3, [pc, #312]	@ (80019d8 <main+0x270>)
 80018a0:	799b      	ldrb	r3, [r3, #6]
 80018a2:	2b03      	cmp	r3, #3
 80018a4:	d01a      	beq.n	80018dc <main+0x174>
 80018a6:	2b03      	cmp	r3, #3
 80018a8:	dc1a      	bgt.n	80018e0 <main+0x178>
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d001      	beq.n	80018b2 <main+0x14a>
 80018ae:	2b02      	cmp	r3, #2
				break;
 80018b0:	e017      	b.n	80018e2 <main+0x17a>
				BuzLock = !BuzLock;
 80018b2:	4b47      	ldr	r3, [pc, #284]	@ (80019d0 <main+0x268>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	bf14      	ite	ne
 80018ba:	2301      	movne	r3, #1
 80018bc:	2300      	moveq	r3, #0
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	f083 0301 	eor.w	r3, r3, #1
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	4b40      	ldr	r3, [pc, #256]	@ (80019d0 <main+0x268>)
 80018ce:	701a      	strb	r2, [r3, #0]
				CLCD_Clear();
 80018d0:	f7ff fd59 	bl	8001386 <CLCD_Clear>
				Btn2.ReleasedTime = Idle_Released;
 80018d4:	4b40      	ldr	r3, [pc, #256]	@ (80019d8 <main+0x270>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	719a      	strb	r2, [r3, #6]
				break;
 80018da:	e002      	b.n	80018e2 <main+0x17a>
				break;
 80018dc:	bf00      	nop
 80018de:	e000      	b.n	80018e2 <main+0x17a>
				break;
 80018e0:	bf00      	nop
			switch(Btn3.ReleasedTime)
 80018e2:	4b3e      	ldr	r3, [pc, #248]	@ (80019dc <main+0x274>)
 80018e4:	799b      	ldrb	r3, [r3, #6]
 80018e6:	2b03      	cmp	r3, #3
 80018e8:	d013      	beq.n	8001912 <main+0x1aa>
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	dc13      	bgt.n	8001916 <main+0x1ae>
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d001      	beq.n	80018f6 <main+0x18e>
 80018f2:	2b02      	cmp	r3, #2
				break;
 80018f4:	e010      	b.n	8001918 <main+0x1b0>
				watch.WatchMode = !watch.WatchMode;
 80018f6:	4b3b      	ldr	r3, [pc, #236]	@ (80019e4 <main+0x27c>)
 80018f8:	7adb      	ldrb	r3, [r3, #11]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	bf0c      	ite	eq
 80018fe:	2301      	moveq	r3, #1
 8001900:	2300      	movne	r3, #0
 8001902:	b2db      	uxtb	r3, r3
 8001904:	461a      	mov	r2, r3
 8001906:	4b37      	ldr	r3, [pc, #220]	@ (80019e4 <main+0x27c>)
 8001908:	72da      	strb	r2, [r3, #11]
				Btn3.ReleasedTime = Idle_Released;
 800190a:	4b34      	ldr	r3, [pc, #208]	@ (80019dc <main+0x274>)
 800190c:	2200      	movs	r2, #0
 800190e:	719a      	strb	r2, [r3, #6]
				break;
 8001910:	e002      	b.n	8001918 <main+0x1b0>
				break;
 8001912:	bf00      	nop
 8001914:	e000      	b.n	8001918 <main+0x1b0>
				break;
 8001916:	bf00      	nop
			switch(Btn4.ReleasedTime)
 8001918:	4b31      	ldr	r3, [pc, #196]	@ (80019e0 <main+0x278>)
 800191a:	799b      	ldrb	r3, [r3, #6]
 800191c:	2b03      	cmp	r3, #3
 800191e:	d009      	beq.n	8001934 <main+0x1cc>
 8001920:	2b03      	cmp	r3, #3
 8001922:	dc09      	bgt.n	8001938 <main+0x1d0>
 8001924:	2b01      	cmp	r3, #1
 8001926:	d001      	beq.n	800192c <main+0x1c4>
 8001928:	2b02      	cmp	r3, #2
				break;
 800192a:	e006      	b.n	800193a <main+0x1d2>
				Btn4.ReleasedTime = Idle_Released;
 800192c:	4b2c      	ldr	r3, [pc, #176]	@ (80019e0 <main+0x278>)
 800192e:	2200      	movs	r2, #0
 8001930:	719a      	strb	r2, [r3, #6]
				break;
 8001932:	e002      	b.n	800193a <main+0x1d2>
				break;
 8001934:	bf00      	nop
 8001936:	e000      	b.n	800193a <main+0x1d2>
				break;
 8001938:	bf00      	nop
		  break;
 800193a:	bf00      	nop
	  }


	  // buzzer

	  if(Buz1.BuzFlag)
 800193c:	4b23      	ldr	r3, [pc, #140]	@ (80019cc <main+0x264>)
 800193e:	791b      	ldrb	r3, [r3, #4]
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d083      	beq.n	800184e <main+0xe6>
	  {
		  Buz1.BuzFlag = false;
 8001946:	4b21      	ldr	r3, [pc, #132]	@ (80019cc <main+0x264>)
 8001948:	2200      	movs	r2, #0
 800194a:	711a      	strb	r2, [r3, #4]

			if (!BuzLock)
 800194c:	4b20      	ldr	r3, [pc, #128]	@ (80019d0 <main+0x268>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	f083 0301 	eor.w	r3, r3, #1
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	f43f af79 	beq.w	800184e <main+0xe6>
			{
				switch (Buz1.BuzTone)
 800195c:	4b1b      	ldr	r3, [pc, #108]	@ (80019cc <main+0x264>)
 800195e:	88db      	ldrh	r3, [r3, #6]
 8001960:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8001964:	4293      	cmp	r3, r2
 8001966:	d00d      	beq.n	8001984 <main+0x21c>
 8001968:	f643 2298 	movw	r2, #15000	@ 0x3a98
 800196c:	4293      	cmp	r3, r2
 800196e:	f73f af6e 	bgt.w	800184e <main+0xe6>
 8001972:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 8001976:	4293      	cmp	r3, r2
 8001978:	d014      	beq.n	80019a4 <main+0x23c>
 800197a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800197e:	4293      	cmp	r3, r2
 8001980:	d008      	beq.n	8001994 <main+0x22c>
 8001982:	e017      	b.n	80019b4 <main+0x24c>
				{
				case BUZ_TONE_LOW_PSC:
					activateBuzzer30msOn(&Buz1, &htim2, TIM_CHANNEL_1,
 8001984:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8001988:	2200      	movs	r2, #0
 800198a:	4918      	ldr	r1, [pc, #96]	@ (80019ec <main+0x284>)
 800198c:	480f      	ldr	r0, [pc, #60]	@ (80019cc <main+0x264>)
 800198e:	f7ff fd8a 	bl	80014a6 <activateBuzzer30msOn>
							BUZ_TONE_LOW_PSC);
					break;
 8001992:	e00f      	b.n	80019b4 <main+0x24c>
				case BUZ_TONE_MID_PSC:
					activateBuzzer30msOn(&Buz1, &htim2, TIM_CHANNEL_1,
 8001994:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001998:	2200      	movs	r2, #0
 800199a:	4914      	ldr	r1, [pc, #80]	@ (80019ec <main+0x284>)
 800199c:	480b      	ldr	r0, [pc, #44]	@ (80019cc <main+0x264>)
 800199e:	f7ff fd82 	bl	80014a6 <activateBuzzer30msOn>
							BUZ_TONE_MID_PSC);
					break;
 80019a2:	e007      	b.n	80019b4 <main+0x24c>
				case BUZ_TONE_HIGH_PSC:
					activateBuzzer30msOn(&Buz1, &htim2, TIM_CHANNEL_1,
 80019a4:	f641 534c 	movw	r3, #7500	@ 0x1d4c
 80019a8:	2200      	movs	r2, #0
 80019aa:	4910      	ldr	r1, [pc, #64]	@ (80019ec <main+0x284>)
 80019ac:	4807      	ldr	r0, [pc, #28]	@ (80019cc <main+0x264>)
 80019ae:	f7ff fd7a 	bl	80014a6 <activateBuzzer30msOn>
							BUZ_TONE_HIGH_PSC);
					break;
 80019b2:	bf00      	nop
	  switch(mode)
 80019b4:	e74b      	b.n	800184e <main+0xe6>
 80019b6:	bf00      	nop
 80019b8:	40020c00 	.word	0x40020c00
 80019bc:	40020800 	.word	0x40020800
 80019c0:	40020400 	.word	0x40020400
 80019c4:	2000011c 	.word	0x2000011c
 80019c8:	200000cc 	.word	0x200000cc
 80019cc:	200000c4 	.word	0x200000c4
 80019d0:	200000cd 	.word	0x200000cd
 80019d4:	200000a4 	.word	0x200000a4
 80019d8:	200000ac 	.word	0x200000ac
 80019dc:	200000b4 	.word	0x200000b4
 80019e0:	200000bc 	.word	0x200000bc
 80019e4:	200001ac 	.word	0x200001ac
 80019e8:	08006abc 	.word	0x08006abc
 80019ec:	200000d4 	.word	0x200000d4

080019f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b094      	sub	sp, #80	@ 0x50
 80019f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019f6:	f107 0320 	add.w	r3, r7, #32
 80019fa:	2230      	movs	r2, #48	@ 0x30
 80019fc:	2100      	movs	r1, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f004 f881 	bl	8005b06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a04:	f107 030c 	add.w	r3, r7, #12
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a14:	2300      	movs	r3, #0
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	4b28      	ldr	r3, [pc, #160]	@ (8001abc <SystemClock_Config+0xcc>)
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1c:	4a27      	ldr	r2, [pc, #156]	@ (8001abc <SystemClock_Config+0xcc>)
 8001a1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a22:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a24:	4b25      	ldr	r3, [pc, #148]	@ (8001abc <SystemClock_Config+0xcc>)
 8001a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a30:	2300      	movs	r3, #0
 8001a32:	607b      	str	r3, [r7, #4]
 8001a34:	4b22      	ldr	r3, [pc, #136]	@ (8001ac0 <SystemClock_Config+0xd0>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a21      	ldr	r2, [pc, #132]	@ (8001ac0 <SystemClock_Config+0xd0>)
 8001a3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a3e:	6013      	str	r3, [r2, #0]
 8001a40:	4b1f      	ldr	r3, [pc, #124]	@ (8001ac0 <SystemClock_Config+0xd0>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a54:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a56:	2302      	movs	r3, #2
 8001a58:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a5a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a60:	2304      	movs	r3, #4
 8001a62:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001a64:	23a8      	movs	r3, #168	@ 0xa8
 8001a66:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a6c:	2304      	movs	r3, #4
 8001a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a70:	f107 0320 	add.w	r3, r7, #32
 8001a74:	4618      	mov	r0, r3
 8001a76:	f001 f9d5 	bl	8002e24 <HAL_RCC_OscConfig>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a80:	f000 f916 	bl	8001cb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a84:	230f      	movs	r3, #15
 8001a86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a90:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001a94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a9a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a9c:	f107 030c 	add.w	r3, r7, #12
 8001aa0:	2105      	movs	r1, #5
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f001 fc36 	bl	8003314 <HAL_RCC_ClockConfig>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001aae:	f000 f8ff 	bl	8001cb0 <Error_Handler>
  }
}
 8001ab2:	bf00      	nop
 8001ab4:	3750      	adds	r7, #80	@ 0x50
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40007000 	.word	0x40007000

08001ac4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2100      	movs	r1, #0
 8001acc:	2036      	movs	r0, #54	@ 0x36
 8001ace:	f000 fefa 	bl	80028c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ad2:	2036      	movs	r0, #54	@ 0x36
 8001ad4:	f000 ff13 	bl	80028fe <HAL_NVIC_EnableIRQ>
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2100      	movs	r1, #0
 8001adc:	2009      	movs	r0, #9
 8001ade:	f000 fef2 	bl	80028c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001ae2:	2009      	movs	r0, #9
 8001ae4:	f000 ff0b 	bl	80028fe <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2100      	movs	r1, #0
 8001aec:	2028      	movs	r0, #40	@ 0x28
 8001aee:	f000 feea 	bl	80028c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001af2:	2028      	movs	r0, #40	@ 0x28
 8001af4:	f000 ff03 	bl	80028fe <HAL_NVIC_EnableIRQ>
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001af8:	2200      	movs	r2, #0
 8001afa:	2100      	movs	r1, #0
 8001afc:	200a      	movs	r0, #10
 8001afe:	f000 fee2 	bl	80028c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001b02:	200a      	movs	r0, #10
 8001b04:	f000 fefb 	bl	80028fe <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	2027      	movs	r0, #39	@ 0x27
 8001b0e:	f000 feda 	bl	80028c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b12:	2027      	movs	r0, #39	@ 0x27
 8001b14:	f000 fef3 	bl	80028fe <HAL_NVIC_EnableIRQ>
}
 8001b18:	bf00      	nop
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	80fb      	strh	r3, [r7, #6]
	printf("btn debugging");
 8001b26:	483a      	ldr	r0, [pc, #232]	@ (8001c10 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001b28:	f003 ff78 	bl	8005a1c <iprintf>
	//btn1
	if (GPIO_Pin == GPIO_PIN_3)
 8001b2c:	88fb      	ldrh	r3, [r7, #6]
 8001b2e:	2b08      	cmp	r3, #8
 8001b30:	d116      	bne.n	8001b60 <HAL_GPIO_EXTI_Callback+0x44>
	{

		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3) == GPIO_PIN_SET && Btn1.state == Idle)
 8001b32:	2108      	movs	r1, #8
 8001b34:	4837      	ldr	r0, [pc, #220]	@ (8001c14 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001b36:	f001 f92b 	bl	8002d90 <HAL_GPIO_ReadPin>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d10a      	bne.n	8001b56 <HAL_GPIO_EXTI_Callback+0x3a>
 8001b40:	4b35      	ldr	r3, [pc, #212]	@ (8001c18 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001b42:	795b      	ldrb	r3, [r3, #5]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d106      	bne.n	8001b56 <HAL_GPIO_EXTI_Callback+0x3a>
		{
			Buz1.BuzTone = BUZ_TONE_LOW_PSC;
 8001b48:	4b34      	ldr	r3, [pc, #208]	@ (8001c1c <HAL_GPIO_EXTI_Callback+0x100>)
 8001b4a:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8001b4e:	80da      	strh	r2, [r3, #6]
			Buz1.BuzFlag = true;
 8001b50:	4b32      	ldr	r3, [pc, #200]	@ (8001c1c <HAL_GPIO_EXTI_Callback+0x100>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	711a      	strb	r2, [r3, #4]
		}
		HandleButtonPress(&Btn1, GPIOE, GPIO_PIN_3);
 8001b56:	2208      	movs	r2, #8
 8001b58:	492e      	ldr	r1, [pc, #184]	@ (8001c14 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001b5a:	482f      	ldr	r0, [pc, #188]	@ (8001c18 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001b5c:	f7ff fc1d 	bl	800139a <HandleButtonPress>
	}

	//btn2
	if (GPIO_Pin == GPIO_PIN_15)
 8001b60:	88fb      	ldrh	r3, [r7, #6]
 8001b62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b66:	d118      	bne.n	8001b9a <HAL_GPIO_EXTI_Callback+0x7e>
	{
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == GPIO_PIN_SET && Btn2.state == Idle)
 8001b68:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b6c:	482c      	ldr	r0, [pc, #176]	@ (8001c20 <HAL_GPIO_EXTI_Callback+0x104>)
 8001b6e:	f001 f90f 	bl	8002d90 <HAL_GPIO_ReadPin>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d10a      	bne.n	8001b8e <HAL_GPIO_EXTI_Callback+0x72>
 8001b78:	4b2a      	ldr	r3, [pc, #168]	@ (8001c24 <HAL_GPIO_EXTI_Callback+0x108>)
 8001b7a:	795b      	ldrb	r3, [r3, #5]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d106      	bne.n	8001b8e <HAL_GPIO_EXTI_Callback+0x72>
		{
			Buz1.BuzTone = BUZ_TONE_LOW_PSC;
 8001b80:	4b26      	ldr	r3, [pc, #152]	@ (8001c1c <HAL_GPIO_EXTI_Callback+0x100>)
 8001b82:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8001b86:	80da      	strh	r2, [r3, #6]
			Buz1.BuzFlag = true;
 8001b88:	4b24      	ldr	r3, [pc, #144]	@ (8001c1c <HAL_GPIO_EXTI_Callback+0x100>)
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	711a      	strb	r2, [r3, #4]
		}
		HandleButtonPress(&Btn2, GPIOC, GPIO_PIN_15);
 8001b8e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001b92:	4923      	ldr	r1, [pc, #140]	@ (8001c20 <HAL_GPIO_EXTI_Callback+0x104>)
 8001b94:	4823      	ldr	r0, [pc, #140]	@ (8001c24 <HAL_GPIO_EXTI_Callback+0x108>)
 8001b96:	f7ff fc00 	bl	800139a <HandleButtonPress>
	}

	//btn3
	if (GPIO_Pin == GPIO_PIN_4)
 8001b9a:	88fb      	ldrh	r3, [r7, #6]
 8001b9c:	2b10      	cmp	r3, #16
 8001b9e:	d116      	bne.n	8001bce <HAL_GPIO_EXTI_Callback+0xb2>
	{
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4) == GPIO_PIN_SET && Btn3.state == Idle)
 8001ba0:	2110      	movs	r1, #16
 8001ba2:	4821      	ldr	r0, [pc, #132]	@ (8001c28 <HAL_GPIO_EXTI_Callback+0x10c>)
 8001ba4:	f001 f8f4 	bl	8002d90 <HAL_GPIO_ReadPin>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d10a      	bne.n	8001bc4 <HAL_GPIO_EXTI_Callback+0xa8>
 8001bae:	4b1f      	ldr	r3, [pc, #124]	@ (8001c2c <HAL_GPIO_EXTI_Callback+0x110>)
 8001bb0:	795b      	ldrb	r3, [r3, #5]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d106      	bne.n	8001bc4 <HAL_GPIO_EXTI_Callback+0xa8>
		{
			Buz1.BuzTone = BUZ_TONE_LOW_PSC;
 8001bb6:	4b19      	ldr	r3, [pc, #100]	@ (8001c1c <HAL_GPIO_EXTI_Callback+0x100>)
 8001bb8:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8001bbc:	80da      	strh	r2, [r3, #6]
			Buz1.BuzFlag = true;
 8001bbe:	4b17      	ldr	r3, [pc, #92]	@ (8001c1c <HAL_GPIO_EXTI_Callback+0x100>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	711a      	strb	r2, [r3, #4]
		}
		HandleButtonPress(&Btn3, GPIOD, GPIO_PIN_4);
 8001bc4:	2210      	movs	r2, #16
 8001bc6:	4918      	ldr	r1, [pc, #96]	@ (8001c28 <HAL_GPIO_EXTI_Callback+0x10c>)
 8001bc8:	4818      	ldr	r0, [pc, #96]	@ (8001c2c <HAL_GPIO_EXTI_Callback+0x110>)
 8001bca:	f7ff fbe6 	bl	800139a <HandleButtonPress>
	}

	//btn4
	if (GPIO_Pin == GPIO_PIN_10)
 8001bce:	88fb      	ldrh	r3, [r7, #6]
 8001bd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bd4:	d118      	bne.n	8001c08 <HAL_GPIO_EXTI_Callback+0xec>
	{
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10) == GPIO_PIN_SET && Btn4.state == Idle)
 8001bd6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001bda:	4813      	ldr	r0, [pc, #76]	@ (8001c28 <HAL_GPIO_EXTI_Callback+0x10c>)
 8001bdc:	f001 f8d8 	bl	8002d90 <HAL_GPIO_ReadPin>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d10a      	bne.n	8001bfc <HAL_GPIO_EXTI_Callback+0xe0>
 8001be6:	4b12      	ldr	r3, [pc, #72]	@ (8001c30 <HAL_GPIO_EXTI_Callback+0x114>)
 8001be8:	795b      	ldrb	r3, [r3, #5]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d106      	bne.n	8001bfc <HAL_GPIO_EXTI_Callback+0xe0>
		{
			Buz1.BuzTone = BUZ_TONE_LOW_PSC;
 8001bee:	4b0b      	ldr	r3, [pc, #44]	@ (8001c1c <HAL_GPIO_EXTI_Callback+0x100>)
 8001bf0:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8001bf4:	80da      	strh	r2, [r3, #6]
			Buz1.BuzFlag = true;
 8001bf6:	4b09      	ldr	r3, [pc, #36]	@ (8001c1c <HAL_GPIO_EXTI_Callback+0x100>)
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	711a      	strb	r2, [r3, #4]
		}
		HandleButtonPress(&Btn4, GPIOD, GPIO_PIN_10);
 8001bfc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c00:	4909      	ldr	r1, [pc, #36]	@ (8001c28 <HAL_GPIO_EXTI_Callback+0x10c>)
 8001c02:	480b      	ldr	r0, [pc, #44]	@ (8001c30 <HAL_GPIO_EXTI_Callback+0x114>)
 8001c04:	f7ff fbc9 	bl	800139a <HandleButtonPress>
	}
}
 8001c08:	bf00      	nop
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	08006ac8 	.word	0x08006ac8
 8001c14:	40021000 	.word	0x40021000
 8001c18:	200000a4 	.word	0x200000a4
 8001c1c:	200000c4 	.word	0x200000c4
 8001c20:	40020800 	.word	0x40020800
 8001c24:	200000ac 	.word	0x200000ac
 8001c28:	40020c00 	.word	0x40020c00
 8001c2c:	200000b4 	.word	0x200000b4
 8001c30:	200000bc 	.word	0x200000bc

08001c34 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]


	if(htim->Instance == TIM6)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a11      	ldr	r2, [pc, #68]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d11c      	bne.n	8001c80 <HAL_TIM_PeriodElapsedCallback+0x4c>
	{
		//btn hold event
		BtnHoldEvent(&Btn1,GPIOE,GPIO_PIN_3 );
 8001c46:	2208      	movs	r2, #8
 8001c48:	4910      	ldr	r1, [pc, #64]	@ (8001c8c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001c4a:	4811      	ldr	r0, [pc, #68]	@ (8001c90 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001c4c:	f7ff fc09 	bl	8001462 <BtnHoldEvent>
		BtnHoldEvent(&Btn2,GPIOC,GPIO_PIN_15 );
 8001c50:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001c54:	490f      	ldr	r1, [pc, #60]	@ (8001c94 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001c56:	4810      	ldr	r0, [pc, #64]	@ (8001c98 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001c58:	f7ff fc03 	bl	8001462 <BtnHoldEvent>
		BtnHoldEvent(&Btn3,GPIOD,GPIO_PIN_4 );
 8001c5c:	2210      	movs	r2, #16
 8001c5e:	490f      	ldr	r1, [pc, #60]	@ (8001c9c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001c60:	480f      	ldr	r0, [pc, #60]	@ (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001c62:	f7ff fbfe 	bl	8001462 <BtnHoldEvent>
		BtnHoldEvent(&Btn4,GPIOD,GPIO_PIN_10 );
 8001c66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c6a:	490c      	ldr	r1, [pc, #48]	@ (8001c9c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001c6c:	480d      	ldr	r0, [pc, #52]	@ (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001c6e:	f7ff fbf8 	bl	8001462 <BtnHoldEvent>

		//watch time
		updateWatchTime();
 8001c72:	f000 fb47 	bl	8002304 <updateWatchTime>


		//buz off
		activateBuzzer30msOff(&Buz1, &htim2, TIM_CHANNEL_1);
 8001c76:	2200      	movs	r2, #0
 8001c78:	490b      	ldr	r1, [pc, #44]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001c7a:	480c      	ldr	r0, [pc, #48]	@ (8001cac <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001c7c:	f7ff fc34 	bl	80014e8 <activateBuzzer30msOff>

	}
}
 8001c80:	bf00      	nop
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40001000 	.word	0x40001000
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	200000a4 	.word	0x200000a4
 8001c94:	40020800 	.word	0x40020800
 8001c98:	200000ac 	.word	0x200000ac
 8001c9c:	40020c00 	.word	0x40020c00
 8001ca0:	200000b4 	.word	0x200000b4
 8001ca4:	200000bc 	.word	0x200000bc
 8001ca8:	200000d4 	.word	0x200000d4
 8001cac:	200000c4 	.word	0x200000c4

08001cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cb4:	b672      	cpsid	i
}
 8001cb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cb8:	bf00      	nop
 8001cba:	e7fd      	b.n	8001cb8 <Error_Handler+0x8>

08001cbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	607b      	str	r3, [r7, #4]
 8001cc6:	4b10      	ldr	r3, [pc, #64]	@ (8001d08 <HAL_MspInit+0x4c>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cca:	4a0f      	ldr	r2, [pc, #60]	@ (8001d08 <HAL_MspInit+0x4c>)
 8001ccc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001d08 <HAL_MspInit+0x4c>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cda:	607b      	str	r3, [r7, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	603b      	str	r3, [r7, #0]
 8001ce2:	4b09      	ldr	r3, [pc, #36]	@ (8001d08 <HAL_MspInit+0x4c>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce6:	4a08      	ldr	r2, [pc, #32]	@ (8001d08 <HAL_MspInit+0x4c>)
 8001ce8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cee:	4b06      	ldr	r3, [pc, #24]	@ (8001d08 <HAL_MspInit+0x4c>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cf6:	603b      	str	r3, [r7, #0]
 8001cf8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40023800 	.word	0x40023800

08001d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d10:	bf00      	nop
 8001d12:	e7fd      	b.n	8001d10 <NMI_Handler+0x4>

08001d14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d18:	bf00      	nop
 8001d1a:	e7fd      	b.n	8001d18 <HardFault_Handler+0x4>

08001d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d20:	bf00      	nop
 8001d22:	e7fd      	b.n	8001d20 <MemManage_Handler+0x4>

08001d24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d28:	bf00      	nop
 8001d2a:	e7fd      	b.n	8001d28 <BusFault_Handler+0x4>

08001d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d30:	bf00      	nop
 8001d32:	e7fd      	b.n	8001d30 <UsageFault_Handler+0x4>

08001d34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d62:	f000 fc91 	bl	8002688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001d6e:	2008      	movs	r0, #8
 8001d70:	f001 f840 	bl	8002df4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001d74:	bf00      	nop
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001d7c:	2010      	movs	r0, #16
 8001d7e:	f001 f839 	bl	8002df4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d8c:	4802      	ldr	r0, [pc, #8]	@ (8001d98 <USART3_IRQHandler+0x10>)
 8001d8e:	f002 fe5d 	bl	8004a4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000164 	.word	0x20000164

08001d9c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001da0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001da4:	f001 f826 	bl	8002df4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001da8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001dac:	f001 f822 	bl	8002df4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001db0:	bf00      	nop
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001db8:	4802      	ldr	r0, [pc, #8]	@ (8001dc4 <TIM6_DAC_IRQHandler+0x10>)
 8001dba:	f001 ff1d 	bl	8003bf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	2000011c 	.word	0x2000011c

08001dc8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]
 8001dd8:	e00a      	b.n	8001df0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dda:	f3af 8000 	nop.w
 8001dde:	4601      	mov	r1, r0
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	1c5a      	adds	r2, r3, #1
 8001de4:	60ba      	str	r2, [r7, #8]
 8001de6:	b2ca      	uxtb	r2, r1
 8001de8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	3301      	adds	r3, #1
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	dbf0      	blt.n	8001dda <_read+0x12>
  }

  return len;
 8001df8:	687b      	ldr	r3, [r7, #4]
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b083      	sub	sp, #12
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e2a:	605a      	str	r2, [r3, #4]
  return 0;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <_isatty>:

int _isatty(int file)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e42:	2301      	movs	r3, #1
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
	...

08001e6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e74:	4a14      	ldr	r2, [pc, #80]	@ (8001ec8 <_sbrk+0x5c>)
 8001e76:	4b15      	ldr	r3, [pc, #84]	@ (8001ecc <_sbrk+0x60>)
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e80:	4b13      	ldr	r3, [pc, #76]	@ (8001ed0 <_sbrk+0x64>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d102      	bne.n	8001e8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e88:	4b11      	ldr	r3, [pc, #68]	@ (8001ed0 <_sbrk+0x64>)
 8001e8a:	4a12      	ldr	r2, [pc, #72]	@ (8001ed4 <_sbrk+0x68>)
 8001e8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e8e:	4b10      	ldr	r3, [pc, #64]	@ (8001ed0 <_sbrk+0x64>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d207      	bcs.n	8001eac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e9c:	f003 fe82 	bl	8005ba4 <__errno>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	220c      	movs	r2, #12
 8001ea4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eaa:	e009      	b.n	8001ec0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eac:	4b08      	ldr	r3, [pc, #32]	@ (8001ed0 <_sbrk+0x64>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eb2:	4b07      	ldr	r3, [pc, #28]	@ (8001ed0 <_sbrk+0x64>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4413      	add	r3, r2
 8001eba:	4a05      	ldr	r2, [pc, #20]	@ (8001ed0 <_sbrk+0x64>)
 8001ebc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20020000 	.word	0x20020000
 8001ecc:	00000400 	.word	0x00000400
 8001ed0:	200000d0 	.word	0x200000d0
 8001ed4:	20000308 	.word	0x20000308

08001ed8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001edc:	4b06      	ldr	r3, [pc, #24]	@ (8001ef8 <SystemInit+0x20>)
 8001ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ee2:	4a05      	ldr	r2, [pc, #20]	@ (8001ef8 <SystemInit+0x20>)
 8001ee4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ee8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08e      	sub	sp, #56	@ 0x38
 8001f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	605a      	str	r2, [r3, #4]
 8001f0c:	609a      	str	r2, [r3, #8]
 8001f0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f10:	f107 0320 	add.w	r3, r7, #32
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f1a:	1d3b      	adds	r3, r7, #4
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	611a      	str	r2, [r3, #16]
 8001f28:	615a      	str	r2, [r3, #20]
 8001f2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f2c:	4b2d      	ldr	r3, [pc, #180]	@ (8001fe4 <MX_TIM2_Init+0xe8>)
 8001f2e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 8001f34:	4b2b      	ldr	r3, [pc, #172]	@ (8001fe4 <MX_TIM2_Init+0xe8>)
 8001f36:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 8001f3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f3c:	4b29      	ldr	r3, [pc, #164]	@ (8001fe4 <MX_TIM2_Init+0xe8>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001f42:	4b28      	ldr	r3, [pc, #160]	@ (8001fe4 <MX_TIM2_Init+0xe8>)
 8001f44:	2209      	movs	r2, #9
 8001f46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f48:	4b26      	ldr	r3, [pc, #152]	@ (8001fe4 <MX_TIM2_Init+0xe8>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f4e:	4b25      	ldr	r3, [pc, #148]	@ (8001fe4 <MX_TIM2_Init+0xe8>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f54:	4823      	ldr	r0, [pc, #140]	@ (8001fe4 <MX_TIM2_Init+0xe8>)
 8001f56:	f001 fbfd 	bl	8003754 <HAL_TIM_Base_Init>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001f60:	f7ff fea6 	bl	8001cb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f68:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f6e:	4619      	mov	r1, r3
 8001f70:	481c      	ldr	r0, [pc, #112]	@ (8001fe4 <MX_TIM2_Init+0xe8>)
 8001f72:	f001 fff3 	bl	8003f5c <HAL_TIM_ConfigClockSource>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001f7c:	f7ff fe98 	bl	8001cb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f80:	4818      	ldr	r0, [pc, #96]	@ (8001fe4 <MX_TIM2_Init+0xe8>)
 8001f82:	f001 fca7 	bl	80038d4 <HAL_TIM_PWM_Init>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001f8c:	f7ff fe90 	bl	8001cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f90:	2300      	movs	r3, #0
 8001f92:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f94:	2300      	movs	r3, #0
 8001f96:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f98:	f107 0320 	add.w	r3, r7, #32
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4811      	ldr	r0, [pc, #68]	@ (8001fe4 <MX_TIM2_Init+0xe8>)
 8001fa0:	f002 fbe8 	bl	8004774 <HAL_TIMEx_MasterConfigSynchronization>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001faa:	f7ff fe81 	bl	8001cb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fae:	2360      	movs	r3, #96	@ 0x60
 8001fb0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4;
 8001fb2:	2304      	movs	r3, #4
 8001fb4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fbe:	1d3b      	adds	r3, r7, #4
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4807      	ldr	r0, [pc, #28]	@ (8001fe4 <MX_TIM2_Init+0xe8>)
 8001fc6:	f001 ff07 	bl	8003dd8 <HAL_TIM_PWM_ConfigChannel>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001fd0:	f7ff fe6e 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001fd4:	4803      	ldr	r0, [pc, #12]	@ (8001fe4 <MX_TIM2_Init+0xe8>)
 8001fd6:	f000 f873 	bl	80020c0 <HAL_TIM_MspPostInit>

}
 8001fda:	bf00      	nop
 8001fdc:	3738      	adds	r7, #56	@ 0x38
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	200000d4 	.word	0x200000d4

08001fe8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fee:	463b      	mov	r3, r7
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001ff6:	4b15      	ldr	r3, [pc, #84]	@ (800204c <MX_TIM6_Init+0x64>)
 8001ff8:	4a15      	ldr	r2, [pc, #84]	@ (8002050 <MX_TIM6_Init+0x68>)
 8001ffa:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8001ffc:	4b13      	ldr	r3, [pc, #76]	@ (800204c <MX_TIM6_Init+0x64>)
 8001ffe:	2253      	movs	r2, #83	@ 0x53
 8002000:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002002:	4b12      	ldr	r3, [pc, #72]	@ (800204c <MX_TIM6_Init+0x64>)
 8002004:	2200      	movs	r2, #0
 8002006:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002008:	4b10      	ldr	r3, [pc, #64]	@ (800204c <MX_TIM6_Init+0x64>)
 800200a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800200e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002010:	4b0e      	ldr	r3, [pc, #56]	@ (800204c <MX_TIM6_Init+0x64>)
 8002012:	2200      	movs	r2, #0
 8002014:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002016:	480d      	ldr	r0, [pc, #52]	@ (800204c <MX_TIM6_Init+0x64>)
 8002018:	f001 fb9c 	bl	8003754 <HAL_TIM_Base_Init>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002022:	f7ff fe45 	bl	8001cb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002026:	2300      	movs	r3, #0
 8002028:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800202a:	2300      	movs	r3, #0
 800202c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800202e:	463b      	mov	r3, r7
 8002030:	4619      	mov	r1, r3
 8002032:	4806      	ldr	r0, [pc, #24]	@ (800204c <MX_TIM6_Init+0x64>)
 8002034:	f002 fb9e 	bl	8004774 <HAL_TIMEx_MasterConfigSynchronization>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800203e:	f7ff fe37 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	2000011c 	.word	0x2000011c
 8002050:	40001000 	.word	0x40001000

08002054 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002064:	d10e      	bne.n	8002084 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	4b13      	ldr	r3, [pc, #76]	@ (80020b8 <HAL_TIM_Base_MspInit+0x64>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206e:	4a12      	ldr	r2, [pc, #72]	@ (80020b8 <HAL_TIM_Base_MspInit+0x64>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	6413      	str	r3, [r2, #64]	@ 0x40
 8002076:	4b10      	ldr	r3, [pc, #64]	@ (80020b8 <HAL_TIM_Base_MspInit+0x64>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002082:	e012      	b.n	80020aa <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM6)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a0c      	ldr	r2, [pc, #48]	@ (80020bc <HAL_TIM_Base_MspInit+0x68>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d10d      	bne.n	80020aa <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	60bb      	str	r3, [r7, #8]
 8002092:	4b09      	ldr	r3, [pc, #36]	@ (80020b8 <HAL_TIM_Base_MspInit+0x64>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002096:	4a08      	ldr	r2, [pc, #32]	@ (80020b8 <HAL_TIM_Base_MspInit+0x64>)
 8002098:	f043 0310 	orr.w	r3, r3, #16
 800209c:	6413      	str	r3, [r2, #64]	@ 0x40
 800209e:	4b06      	ldr	r3, [pc, #24]	@ (80020b8 <HAL_TIM_Base_MspInit+0x64>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a2:	f003 0310 	and.w	r3, r3, #16
 80020a6:	60bb      	str	r3, [r7, #8]
 80020a8:	68bb      	ldr	r3, [r7, #8]
}
 80020aa:	bf00      	nop
 80020ac:	3714      	adds	r7, #20
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40001000 	.word	0x40001000

080020c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b088      	sub	sp, #32
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c8:	f107 030c 	add.w	r3, r7, #12
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020e0:	d11d      	bne.n	800211e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	4b10      	ldr	r3, [pc, #64]	@ (8002128 <HAL_TIM_MspPostInit+0x68>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ea:	4a0f      	ldr	r2, [pc, #60]	@ (8002128 <HAL_TIM_MspPostInit+0x68>)
 80020ec:	f043 0301 	orr.w	r3, r3, #1
 80020f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002128 <HAL_TIM_MspPostInit+0x68>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	60bb      	str	r3, [r7, #8]
 80020fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80020fe:	2320      	movs	r3, #32
 8002100:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002102:	2302      	movs	r3, #2
 8002104:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210a:	2300      	movs	r3, #0
 800210c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800210e:	2301      	movs	r3, #1
 8002110:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002112:	f107 030c 	add.w	r3, r7, #12
 8002116:	4619      	mov	r1, r3
 8002118:	4804      	ldr	r0, [pc, #16]	@ (800212c <HAL_TIM_MspPostInit+0x6c>)
 800211a:	f000 fc9d 	bl	8002a58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800211e:	bf00      	nop
 8002120:	3720      	adds	r7, #32
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40023800 	.word	0x40023800
 800212c:	40020000 	.word	0x40020000

08002130 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002134:	4b11      	ldr	r3, [pc, #68]	@ (800217c <MX_USART3_UART_Init+0x4c>)
 8002136:	4a12      	ldr	r2, [pc, #72]	@ (8002180 <MX_USART3_UART_Init+0x50>)
 8002138:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800213a:	4b10      	ldr	r3, [pc, #64]	@ (800217c <MX_USART3_UART_Init+0x4c>)
 800213c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002140:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002142:	4b0e      	ldr	r3, [pc, #56]	@ (800217c <MX_USART3_UART_Init+0x4c>)
 8002144:	2200      	movs	r2, #0
 8002146:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002148:	4b0c      	ldr	r3, [pc, #48]	@ (800217c <MX_USART3_UART_Init+0x4c>)
 800214a:	2200      	movs	r2, #0
 800214c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800214e:	4b0b      	ldr	r3, [pc, #44]	@ (800217c <MX_USART3_UART_Init+0x4c>)
 8002150:	2200      	movs	r2, #0
 8002152:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002154:	4b09      	ldr	r3, [pc, #36]	@ (800217c <MX_USART3_UART_Init+0x4c>)
 8002156:	220c      	movs	r2, #12
 8002158:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800215a:	4b08      	ldr	r3, [pc, #32]	@ (800217c <MX_USART3_UART_Init+0x4c>)
 800215c:	2200      	movs	r2, #0
 800215e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002160:	4b06      	ldr	r3, [pc, #24]	@ (800217c <MX_USART3_UART_Init+0x4c>)
 8002162:	2200      	movs	r2, #0
 8002164:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002166:	4805      	ldr	r0, [pc, #20]	@ (800217c <MX_USART3_UART_Init+0x4c>)
 8002168:	f002 fb94 	bl	8004894 <HAL_UART_Init>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002172:	f7ff fd9d 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	20000164 	.word	0x20000164
 8002180:	40004800 	.word	0x40004800

08002184 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08a      	sub	sp, #40	@ 0x28
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218c:	f107 0314 	add.w	r3, r7, #20
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]
 800219a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a19      	ldr	r2, [pc, #100]	@ (8002208 <HAL_UART_MspInit+0x84>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d12c      	bne.n	8002200 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	4b18      	ldr	r3, [pc, #96]	@ (800220c <HAL_UART_MspInit+0x88>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ae:	4a17      	ldr	r2, [pc, #92]	@ (800220c <HAL_UART_MspInit+0x88>)
 80021b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80021b6:	4b15      	ldr	r3, [pc, #84]	@ (800220c <HAL_UART_MspInit+0x88>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021be:	613b      	str	r3, [r7, #16]
 80021c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	4b11      	ldr	r3, [pc, #68]	@ (800220c <HAL_UART_MspInit+0x88>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ca:	4a10      	ldr	r2, [pc, #64]	@ (800220c <HAL_UART_MspInit+0x88>)
 80021cc:	f043 0308 	orr.w	r3, r3, #8
 80021d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021d2:	4b0e      	ldr	r3, [pc, #56]	@ (800220c <HAL_UART_MspInit+0x88>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d6:	f003 0308 	and.w	r3, r3, #8
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021de:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80021e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e4:	2302      	movs	r3, #2
 80021e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ec:	2303      	movs	r3, #3
 80021ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80021f0:	2307      	movs	r3, #7
 80021f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021f4:	f107 0314 	add.w	r3, r7, #20
 80021f8:	4619      	mov	r1, r3
 80021fa:	4805      	ldr	r0, [pc, #20]	@ (8002210 <HAL_UART_MspInit+0x8c>)
 80021fc:	f000 fc2c 	bl	8002a58 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002200:	bf00      	nop
 8002202:	3728      	adds	r7, #40	@ 0x28
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40004800 	.word	0x40004800
 800220c:	40023800 	.word	0x40023800
 8002210:	40020c00 	.word	0x40020c00

08002214 <isLeapYear>:
#include "7SEG.h"

Watch watch;

bool isLeapYear(uint16_t year)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	80fb      	strh	r3, [r7, #6]
	 if((year % 4 == 0 && year % 100 !=0) || year % 400 == 0)
 800221e:	88fb      	ldrh	r3, [r7, #6]
 8002220:	f003 0303 	and.w	r3, r3, #3
 8002224:	b29b      	uxth	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10b      	bne.n	8002242 <isLeapYear+0x2e>
 800222a:	88fb      	ldrh	r3, [r7, #6]
 800222c:	4a10      	ldr	r2, [pc, #64]	@ (8002270 <isLeapYear+0x5c>)
 800222e:	fba2 1203 	umull	r1, r2, r2, r3
 8002232:	0952      	lsrs	r2, r2, #5
 8002234:	2164      	movs	r1, #100	@ 0x64
 8002236:	fb01 f202 	mul.w	r2, r1, r2
 800223a:	1a9b      	subs	r3, r3, r2
 800223c:	b29b      	uxth	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10c      	bne.n	800225c <isLeapYear+0x48>
 8002242:	88fb      	ldrh	r3, [r7, #6]
 8002244:	4a0a      	ldr	r2, [pc, #40]	@ (8002270 <isLeapYear+0x5c>)
 8002246:	fba2 1203 	umull	r1, r2, r2, r3
 800224a:	09d2      	lsrs	r2, r2, #7
 800224c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8002250:	fb01 f202 	mul.w	r2, r1, r2
 8002254:	1a9b      	subs	r3, r3, r2
 8002256:	b29b      	uxth	r3, r3
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <isLeapYear+0x4c>
	 {
		 return true;
 800225c:	2301      	movs	r3, #1
 800225e:	e000      	b.n	8002262 <isLeapYear+0x4e>
	 }
	 else
	 {
		 return false;
 8002260:	2300      	movs	r3, #0
	 }
}
 8002262:	4618      	mov	r0, r3
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	51eb851f 	.word	0x51eb851f

08002274 <getDaysInMonth>:

int getDaysInMonth(Watch* watch)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
	 uint16_t year = watch->Time.years;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	881b      	ldrh	r3, [r3, #0]
 8002280:	81fb      	strh	r3, [r7, #14]
	 uint8_t months = watch->Time.months;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	789b      	ldrb	r3, [r3, #2]
 8002286:	737b      	strb	r3, [r7, #13]
	switch(months)
 8002288:	7b7b      	ldrb	r3, [r7, #13]
 800228a:	2b0c      	cmp	r3, #12
 800228c:	bf8c      	ite	hi
 800228e:	2201      	movhi	r2, #1
 8002290:	2200      	movls	r2, #0
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	2a00      	cmp	r2, #0
 8002296:	d12e      	bne.n	80022f6 <getDaysInMonth+0x82>
 8002298:	2201      	movs	r2, #1
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	f241 52aa 	movw	r2, #5546	@ 0x15aa
 80022a2:	401a      	ands	r2, r3
 80022a4:	2a00      	cmp	r2, #0
 80022a6:	bf14      	ite	ne
 80022a8:	2201      	movne	r2, #1
 80022aa:	2200      	moveq	r2, #0
 80022ac:	b2d2      	uxtb	r2, r2
 80022ae:	2a00      	cmp	r2, #0
 80022b0:	d112      	bne.n	80022d8 <getDaysInMonth+0x64>
 80022b2:	f403 6225 	and.w	r2, r3, #2640	@ 0xa50
 80022b6:	2a00      	cmp	r2, #0
 80022b8:	bf14      	ite	ne
 80022ba:	2201      	movne	r2, #1
 80022bc:	2200      	moveq	r2, #0
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	2a00      	cmp	r2, #0
 80022c2:	d10b      	bne.n	80022dc <getDaysInMonth+0x68>
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	bf14      	ite	ne
 80022cc:	2301      	movne	r3, #1
 80022ce:	2300      	moveq	r3, #0
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d104      	bne.n	80022e0 <getDaysInMonth+0x6c>
 80022d6:	e00e      	b.n	80022f6 <getDaysInMonth+0x82>
	{
	case 1: case 3: case 5: case 7: case 8: case 10: case 12:
		return 31;
 80022d8:	231f      	movs	r3, #31
 80022da:	e00e      	b.n	80022fa <getDaysInMonth+0x86>
	case 4: case 6: case 9: case 11:
	    return 30;
 80022dc:	231e      	movs	r3, #30
 80022de:	e00c      	b.n	80022fa <getDaysInMonth+0x86>
	case 2:
		if(isLeapYear(year))
 80022e0:	89fb      	ldrh	r3, [r7, #14]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff ff96 	bl	8002214 <isLeapYear>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <getDaysInMonth+0x7e>
		{
			return 29;
 80022ee:	231d      	movs	r3, #29
 80022f0:	e003      	b.n	80022fa <getDaysInMonth+0x86>
		}
		else
		{
			return 28;
 80022f2:	231c      	movs	r3, #28
 80022f4:	e001      	b.n	80022fa <getDaysInMonth+0x86>
		}
	default :
		return -1;
 80022f6:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <updateWatchTime>:

void updateWatchTime(void)
{
 8002304:	b598      	push	{r3, r4, r7, lr}
 8002306:	af00      	add	r7, sp, #0
	watch.Time.millisecond++;
 8002308:	4b39      	ldr	r3, [pc, #228]	@ (80023f0 <updateWatchTime+0xec>)
 800230a:	891b      	ldrh	r3, [r3, #8]
 800230c:	b29b      	uxth	r3, r3
 800230e:	3301      	adds	r3, #1
 8002310:	b29a      	uxth	r2, r3
 8002312:	4b37      	ldr	r3, [pc, #220]	@ (80023f0 <updateWatchTime+0xec>)
 8002314:	811a      	strh	r2, [r3, #8]
	//printf("Seconds1: %d\n", watch.Time.second);

	if(watch.Time.millisecond >= 1000)
 8002316:	4b36      	ldr	r3, [pc, #216]	@ (80023f0 <updateWatchTime+0xec>)
 8002318:	891b      	ldrh	r3, [r3, #8]
 800231a:	b29b      	uxth	r3, r3
 800231c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002320:	d309      	bcc.n	8002336 <updateWatchTime+0x32>
	{
		watch.Time.millisecond = 0;
 8002322:	4b33      	ldr	r3, [pc, #204]	@ (80023f0 <updateWatchTime+0xec>)
 8002324:	2200      	movs	r2, #0
 8002326:	811a      	strh	r2, [r3, #8]
		watch.Time.second++;
 8002328:	4b31      	ldr	r3, [pc, #196]	@ (80023f0 <updateWatchTime+0xec>)
 800232a:	799b      	ldrb	r3, [r3, #6]
 800232c:	b2db      	uxtb	r3, r3
 800232e:	3301      	adds	r3, #1
 8002330:	b2da      	uxtb	r2, r3
 8002332:	4b2f      	ldr	r3, [pc, #188]	@ (80023f0 <updateWatchTime+0xec>)
 8002334:	719a      	strb	r2, [r3, #6]
	}
	if(watch.Time.second >= 60)
 8002336:	4b2e      	ldr	r3, [pc, #184]	@ (80023f0 <updateWatchTime+0xec>)
 8002338:	799b      	ldrb	r3, [r3, #6]
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b3b      	cmp	r3, #59	@ 0x3b
 800233e:	d909      	bls.n	8002354 <updateWatchTime+0x50>
	{
		watch.Time.second = 0;
 8002340:	4b2b      	ldr	r3, [pc, #172]	@ (80023f0 <updateWatchTime+0xec>)
 8002342:	2200      	movs	r2, #0
 8002344:	719a      	strb	r2, [r3, #6]
		watch.Time.minutes++;
 8002346:	4b2a      	ldr	r3, [pc, #168]	@ (80023f0 <updateWatchTime+0xec>)
 8002348:	795b      	ldrb	r3, [r3, #5]
 800234a:	b2db      	uxtb	r3, r3
 800234c:	3301      	adds	r3, #1
 800234e:	b2da      	uxtb	r2, r3
 8002350:	4b27      	ldr	r3, [pc, #156]	@ (80023f0 <updateWatchTime+0xec>)
 8002352:	715a      	strb	r2, [r3, #5]
	}
	if(watch.Time.minutes >= 60)
 8002354:	4b26      	ldr	r3, [pc, #152]	@ (80023f0 <updateWatchTime+0xec>)
 8002356:	795b      	ldrb	r3, [r3, #5]
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b3b      	cmp	r3, #59	@ 0x3b
 800235c:	d909      	bls.n	8002372 <updateWatchTime+0x6e>
	{
		watch.Time.minutes = 0;
 800235e:	4b24      	ldr	r3, [pc, #144]	@ (80023f0 <updateWatchTime+0xec>)
 8002360:	2200      	movs	r2, #0
 8002362:	715a      	strb	r2, [r3, #5]
		watch.Time.hours++;
 8002364:	4b22      	ldr	r3, [pc, #136]	@ (80023f0 <updateWatchTime+0xec>)
 8002366:	791b      	ldrb	r3, [r3, #4]
 8002368:	b2db      	uxtb	r3, r3
 800236a:	3301      	adds	r3, #1
 800236c:	b2da      	uxtb	r2, r3
 800236e:	4b20      	ldr	r3, [pc, #128]	@ (80023f0 <updateWatchTime+0xec>)
 8002370:	711a      	strb	r2, [r3, #4]
	}
	if(watch.Time.hours >= 24)
 8002372:	4b1f      	ldr	r3, [pc, #124]	@ (80023f0 <updateWatchTime+0xec>)
 8002374:	791b      	ldrb	r3, [r3, #4]
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b17      	cmp	r3, #23
 800237a:	d909      	bls.n	8002390 <updateWatchTime+0x8c>
	{
		watch.Time.hours = 0;
 800237c:	4b1c      	ldr	r3, [pc, #112]	@ (80023f0 <updateWatchTime+0xec>)
 800237e:	2200      	movs	r2, #0
 8002380:	711a      	strb	r2, [r3, #4]
		watch.Time.days++;
 8002382:	4b1b      	ldr	r3, [pc, #108]	@ (80023f0 <updateWatchTime+0xec>)
 8002384:	78db      	ldrb	r3, [r3, #3]
 8002386:	b2db      	uxtb	r3, r3
 8002388:	3301      	adds	r3, #1
 800238a:	b2da      	uxtb	r2, r3
 800238c:	4b18      	ldr	r3, [pc, #96]	@ (80023f0 <updateWatchTime+0xec>)
 800238e:	70da      	strb	r2, [r3, #3]
	}
	if(watch.Time.days > getDaysInMonth(&watch))
 8002390:	4b17      	ldr	r3, [pc, #92]	@ (80023f0 <updateWatchTime+0xec>)
 8002392:	78db      	ldrb	r3, [r3, #3]
 8002394:	b2db      	uxtb	r3, r3
 8002396:	461c      	mov	r4, r3
 8002398:	4815      	ldr	r0, [pc, #84]	@ (80023f0 <updateWatchTime+0xec>)
 800239a:	f7ff ff6b 	bl	8002274 <getDaysInMonth>
 800239e:	4603      	mov	r3, r0
 80023a0:	429c      	cmp	r4, r3
 80023a2:	dd09      	ble.n	80023b8 <updateWatchTime+0xb4>
	{
		watch.Time.days = 1;
 80023a4:	4b12      	ldr	r3, [pc, #72]	@ (80023f0 <updateWatchTime+0xec>)
 80023a6:	2201      	movs	r2, #1
 80023a8:	70da      	strb	r2, [r3, #3]
		watch.Time.months++;
 80023aa:	4b11      	ldr	r3, [pc, #68]	@ (80023f0 <updateWatchTime+0xec>)
 80023ac:	789b      	ldrb	r3, [r3, #2]
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	3301      	adds	r3, #1
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	4b0e      	ldr	r3, [pc, #56]	@ (80023f0 <updateWatchTime+0xec>)
 80023b6:	709a      	strb	r2, [r3, #2]
	}
	if(watch.Time.months > 12)
 80023b8:	4b0d      	ldr	r3, [pc, #52]	@ (80023f0 <updateWatchTime+0xec>)
 80023ba:	789b      	ldrb	r3, [r3, #2]
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b0c      	cmp	r3, #12
 80023c0:	d909      	bls.n	80023d6 <updateWatchTime+0xd2>
	{
		watch.Time.months = 1;
 80023c2:	4b0b      	ldr	r3, [pc, #44]	@ (80023f0 <updateWatchTime+0xec>)
 80023c4:	2201      	movs	r2, #1
 80023c6:	709a      	strb	r2, [r3, #2]
		watch.Time.years++;
 80023c8:	4b09      	ldr	r3, [pc, #36]	@ (80023f0 <updateWatchTime+0xec>)
 80023ca:	881b      	ldrh	r3, [r3, #0]
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	3301      	adds	r3, #1
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	4b07      	ldr	r3, [pc, #28]	@ (80023f0 <updateWatchTime+0xec>)
 80023d4:	801a      	strh	r2, [r3, #0]
	}
	watch.isLeap = isLeapYear(watch.Time.years);
 80023d6:	4b06      	ldr	r3, [pc, #24]	@ (80023f0 <updateWatchTime+0xec>)
 80023d8:	881b      	ldrh	r3, [r3, #0]
 80023da:	b29b      	uxth	r3, r3
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff ff19 	bl	8002214 <isLeapYear>
 80023e2:	4603      	mov	r3, r0
 80023e4:	461a      	mov	r2, r3
 80023e6:	4b02      	ldr	r3, [pc, #8]	@ (80023f0 <updateWatchTime+0xec>)
 80023e8:	729a      	strb	r2, [r3, #10]
}
 80023ea:	bf00      	nop
 80023ec:	bd98      	pop	{r3, r4, r7, pc}
 80023ee:	bf00      	nop
 80023f0:	200001ac 	.word	0x200001ac

080023f4 <updateWatchDisplay>:

void updateWatchDisplay(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af02      	add	r7, sp, #8
	char* BuzState;

    // 7SEG
    _7SEG_SetNumber(DGT1, watch.Time.second / 10, OFF);
 80023fa:	4b57      	ldr	r3, [pc, #348]	@ (8002558 <updateWatchDisplay+0x164>)
 80023fc:	799b      	ldrb	r3, [r3, #6]
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	4a56      	ldr	r2, [pc, #344]	@ (800255c <updateWatchDisplay+0x168>)
 8002402:	fba2 2303 	umull	r2, r3, r2, r3
 8002406:	08db      	lsrs	r3, r3, #3
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2200      	movs	r2, #0
 800240c:	4619      	mov	r1, r3
 800240e:	2000      	movs	r0, #0
 8002410:	f7fe f98c 	bl	800072c <_7SEG_SetNumber>
    _7SEG_SetNumber(DGT2, watch.Time.second % 10, OFF);
 8002414:	4b50      	ldr	r3, [pc, #320]	@ (8002558 <updateWatchDisplay+0x164>)
 8002416:	799b      	ldrb	r3, [r3, #6]
 8002418:	b2da      	uxtb	r2, r3
 800241a:	4b50      	ldr	r3, [pc, #320]	@ (800255c <updateWatchDisplay+0x168>)
 800241c:	fba3 1302 	umull	r1, r3, r3, r2
 8002420:	08d9      	lsrs	r1, r3, #3
 8002422:	460b      	mov	r3, r1
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	440b      	add	r3, r1
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2200      	movs	r2, #0
 8002430:	4619      	mov	r1, r3
 8002432:	2001      	movs	r0, #1
 8002434:	f7fe f97a 	bl	800072c <_7SEG_SetNumber>

    // CLCD
    if(watch.isLeap)
 8002438:	4b47      	ldr	r3, [pc, #284]	@ (8002558 <updateWatchDisplay+0x164>)
 800243a:	7a9b      	ldrb	r3, [r3, #10]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d011      	beq.n	8002464 <updateWatchDisplay+0x70>
    {
    	sprintf(clcd.str1, "LEAP  %04d.%02d.%02d",
    			watch.Time.years,
 8002440:	4b45      	ldr	r3, [pc, #276]	@ (8002558 <updateWatchDisplay+0x164>)
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	b29b      	uxth	r3, r3
    	sprintf(clcd.str1, "LEAP  %04d.%02d.%02d",
 8002446:	461a      	mov	r2, r3
				watch.Time.months,
 8002448:	4b43      	ldr	r3, [pc, #268]	@ (8002558 <updateWatchDisplay+0x164>)
 800244a:	789b      	ldrb	r3, [r3, #2]
 800244c:	b2db      	uxtb	r3, r3
    	sprintf(clcd.str1, "LEAP  %04d.%02d.%02d",
 800244e:	4619      	mov	r1, r3
				watch.Time.days);
 8002450:	4b41      	ldr	r3, [pc, #260]	@ (8002558 <updateWatchDisplay+0x164>)
 8002452:	78db      	ldrb	r3, [r3, #3]
 8002454:	b2db      	uxtb	r3, r3
    	sprintf(clcd.str1, "LEAP  %04d.%02d.%02d",
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	460b      	mov	r3, r1
 800245a:	4941      	ldr	r1, [pc, #260]	@ (8002560 <updateWatchDisplay+0x16c>)
 800245c:	4841      	ldr	r0, [pc, #260]	@ (8002564 <updateWatchDisplay+0x170>)
 800245e:	f003 faef 	bl	8005a40 <siprintf>
 8002462:	e010      	b.n	8002486 <updateWatchDisplay+0x92>
    }
    else
    {
    	sprintf(clcd.str1, "      %04d.%02d.%02d",
    	    	watch.Time.years,
 8002464:	4b3c      	ldr	r3, [pc, #240]	@ (8002558 <updateWatchDisplay+0x164>)
 8002466:	881b      	ldrh	r3, [r3, #0]
 8002468:	b29b      	uxth	r3, r3
    	sprintf(clcd.str1, "      %04d.%02d.%02d",
 800246a:	461a      	mov	r2, r3
    			watch.Time.months,
 800246c:	4b3a      	ldr	r3, [pc, #232]	@ (8002558 <updateWatchDisplay+0x164>)
 800246e:	789b      	ldrb	r3, [r3, #2]
 8002470:	b2db      	uxtb	r3, r3
    	sprintf(clcd.str1, "      %04d.%02d.%02d",
 8002472:	4619      	mov	r1, r3
    			watch.Time.days);
 8002474:	4b38      	ldr	r3, [pc, #224]	@ (8002558 <updateWatchDisplay+0x164>)
 8002476:	78db      	ldrb	r3, [r3, #3]
 8002478:	b2db      	uxtb	r3, r3
    	sprintf(clcd.str1, "      %04d.%02d.%02d",
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	460b      	mov	r3, r1
 800247e:	493a      	ldr	r1, [pc, #232]	@ (8002568 <updateWatchDisplay+0x174>)
 8002480:	4838      	ldr	r0, [pc, #224]	@ (8002564 <updateWatchDisplay+0x170>)
 8002482:	f003 fadd 	bl	8005a40 <siprintf>
    }


    if (BuzLock == 0)
 8002486:	4b39      	ldr	r3, [pc, #228]	@ (800256c <updateWatchDisplay+0x178>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	f083 0301 	eor.w	r3, r3, #1
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	d002      	beq.n	800249a <updateWatchDisplay+0xa6>
    {
        BuzState = "BZ OFF";
 8002494:	4b36      	ldr	r3, [pc, #216]	@ (8002570 <updateWatchDisplay+0x17c>)
 8002496:	60fb      	str	r3, [r7, #12]
 8002498:	e005      	b.n	80024a6 <updateWatchDisplay+0xb2>
    }
    else if(BuzLock == 1)
 800249a:	4b34      	ldr	r3, [pc, #208]	@ (800256c <updateWatchDisplay+0x178>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <updateWatchDisplay+0xb2>
    {
    	BuzState = "BZ ON";
 80024a2:	4b34      	ldr	r3, [pc, #208]	@ (8002574 <updateWatchDisplay+0x180>)
 80024a4:	60fb      	str	r3, [r7, #12]
    }

    if(watch.WatchMode == MODE_12_HOUR)
 80024a6:	4b2c      	ldr	r3, [pc, #176]	@ (8002558 <updateWatchDisplay+0x164>)
 80024a8:	7adb      	ldrb	r3, [r3, #11]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d133      	bne.n	8002516 <updateWatchDisplay+0x122>
    {
    	int displayHour = watch.Time.hours;
 80024ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002558 <updateWatchDisplay+0x164>)
 80024b0:	791b      	ldrb	r3, [r3, #4]
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	60bb      	str	r3, [r7, #8]
    	const char* period = "AM";
 80024b6:	4b30      	ldr	r3, [pc, #192]	@ (8002578 <updateWatchDisplay+0x184>)
 80024b8:	607b      	str	r3, [r7, #4]

    	if (displayHour == 0)
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d104      	bne.n	80024ca <updateWatchDisplay+0xd6>
    	{
    	    displayHour = 12; // 0시를 12시로 표시
 80024c0:	230c      	movs	r3, #12
 80024c2:	60bb      	str	r3, [r7, #8]
    	    period = "AM"; // 자정
 80024c4:	4b2c      	ldr	r3, [pc, #176]	@ (8002578 <updateWatchDisplay+0x184>)
 80024c6:	607b      	str	r3, [r7, #4]
 80024c8:	e00d      	b.n	80024e6 <updateWatchDisplay+0xf2>
    	}
    	else if (displayHour < 12)
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	2b0b      	cmp	r3, #11
 80024ce:	dc02      	bgt.n	80024d6 <updateWatchDisplay+0xe2>
    	{
    	    period = "AM"; // 오전
 80024d0:	4b29      	ldr	r3, [pc, #164]	@ (8002578 <updateWatchDisplay+0x184>)
 80024d2:	607b      	str	r3, [r7, #4]
 80024d4:	e007      	b.n	80024e6 <updateWatchDisplay+0xf2>
    	}
    	else
    	{
    	    period = "PM"; // 오후
 80024d6:	4b29      	ldr	r3, [pc, #164]	@ (800257c <updateWatchDisplay+0x188>)
 80024d8:	607b      	str	r3, [r7, #4]
    	    if (displayHour > 12)
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	2b0c      	cmp	r3, #12
 80024de:	dd02      	ble.n	80024e6 <updateWatchDisplay+0xf2>
    	    {
    	        displayHour -= 12;
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	3b0c      	subs	r3, #12
 80024e4:	60bb      	str	r3, [r7, #8]
    	    }
    	}
    	printf("Hours: %d, Minutes: %02d\n", watch.Time.hours, watch.Time.minutes);
 80024e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002558 <updateWatchDisplay+0x164>)
 80024e8:	791b      	ldrb	r3, [r3, #4]
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	4619      	mov	r1, r3
 80024ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002558 <updateWatchDisplay+0x164>)
 80024f0:	795b      	ldrb	r3, [r3, #5]
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	461a      	mov	r2, r3
 80024f6:	4822      	ldr	r0, [pc, #136]	@ (8002580 <updateWatchDisplay+0x18c>)
 80024f8:	f003 fa90 	bl	8005a1c <iprintf>

    	sprintf(clcd.str2,"%s  %s %02d:%02d",
    			BuzState,
    			period,
				displayHour,
    			watch.Time.minutes);
 80024fc:	4b16      	ldr	r3, [pc, #88]	@ (8002558 <updateWatchDisplay+0x164>)
 80024fe:	795b      	ldrb	r3, [r3, #5]
 8002500:	b2db      	uxtb	r3, r3
    	sprintf(clcd.str2,"%s  %s %02d:%02d",
 8002502:	9301      	str	r3, [sp, #4]
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	491d      	ldr	r1, [pc, #116]	@ (8002584 <updateWatchDisplay+0x190>)
 800250e:	481e      	ldr	r0, [pc, #120]	@ (8002588 <updateWatchDisplay+0x194>)
 8002510:	f003 fa96 	bl	8005a40 <siprintf>
 8002514:	e011      	b.n	800253a <updateWatchDisplay+0x146>

    }
    else if(watch.WatchMode == MODE_24_HOUR)
 8002516:	4b10      	ldr	r3, [pc, #64]	@ (8002558 <updateWatchDisplay+0x164>)
 8002518:	7adb      	ldrb	r3, [r3, #11]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d10d      	bne.n	800253a <updateWatchDisplay+0x146>
    {
    	sprintf(clcd.str2,"%s     %02d:%02d",
    			BuzState,
    			watch.Time.hours,
 800251e:	4b0e      	ldr	r3, [pc, #56]	@ (8002558 <updateWatchDisplay+0x164>)
 8002520:	791b      	ldrb	r3, [r3, #4]
 8002522:	b2db      	uxtb	r3, r3
    	sprintf(clcd.str2,"%s     %02d:%02d",
 8002524:	461a      	mov	r2, r3
				watch.Time.minutes
 8002526:	4b0c      	ldr	r3, [pc, #48]	@ (8002558 <updateWatchDisplay+0x164>)
 8002528:	795b      	ldrb	r3, [r3, #5]
 800252a:	b2db      	uxtb	r3, r3
    	sprintf(clcd.str2,"%s     %02d:%02d",
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	4613      	mov	r3, r2
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	4916      	ldr	r1, [pc, #88]	@ (800258c <updateWatchDisplay+0x198>)
 8002534:	4814      	ldr	r0, [pc, #80]	@ (8002588 <updateWatchDisplay+0x194>)
 8002536:	f003 fa83 	bl	8005a40 <siprintf>
    			);
    }

    CLCD_Puts(0, 0, clcd.str1);
 800253a:	4a0a      	ldr	r2, [pc, #40]	@ (8002564 <updateWatchDisplay+0x170>)
 800253c:	2100      	movs	r1, #0
 800253e:	2000      	movs	r0, #0
 8002540:	f7fe feda 	bl	80012f8 <CLCD_Puts>
    CLCD_Puts(0, 1, clcd.str2);
 8002544:	4a10      	ldr	r2, [pc, #64]	@ (8002588 <updateWatchDisplay+0x194>)
 8002546:	2101      	movs	r1, #1
 8002548:	2000      	movs	r0, #0
 800254a:	f7fe fed5 	bl	80012f8 <CLCD_Puts>
}
 800254e:	bf00      	nop
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	200001ac 	.word	0x200001ac
 800255c:	cccccccd 	.word	0xcccccccd
 8002560:	08006ad8 	.word	0x08006ad8
 8002564:	20000000 	.word	0x20000000
 8002568:	08006af0 	.word	0x08006af0
 800256c:	200000cd 	.word	0x200000cd
 8002570:	08006b08 	.word	0x08006b08
 8002574:	08006b10 	.word	0x08006b10
 8002578:	08006b18 	.word	0x08006b18
 800257c:	08006b1c 	.word	0x08006b1c
 8002580:	08006b20 	.word	0x08006b20
 8002584:	08006b3c 	.word	0x08006b3c
 8002588:	20000010 	.word	0x20000010
 800258c:	08006b50 	.word	0x08006b50

08002590 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002590:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80025c8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002594:	f7ff fca0 	bl	8001ed8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002598:	480c      	ldr	r0, [pc, #48]	@ (80025cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800259a:	490d      	ldr	r1, [pc, #52]	@ (80025d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800259c:	4a0d      	ldr	r2, [pc, #52]	@ (80025d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800259e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025a0:	e002      	b.n	80025a8 <LoopCopyDataInit>

080025a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025a6:	3304      	adds	r3, #4

080025a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025ac:	d3f9      	bcc.n	80025a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ae:	4a0a      	ldr	r2, [pc, #40]	@ (80025d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025b0:	4c0a      	ldr	r4, [pc, #40]	@ (80025dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80025b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025b4:	e001      	b.n	80025ba <LoopFillZerobss>

080025b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025b8:	3204      	adds	r2, #4

080025ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025bc:	d3fb      	bcc.n	80025b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025be:	f003 faf7 	bl	8005bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025c2:	f7ff f8d1 	bl	8001768 <main>
  bx  lr    
 80025c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80025c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025d0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80025d4:	08006bc0 	.word	0x08006bc0
  ldr r2, =_sbss
 80025d8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80025dc:	20000308 	.word	0x20000308

080025e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025e0:	e7fe      	b.n	80025e0 <ADC_IRQHandler>
	...

080025e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002624 <HAL_Init+0x40>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002624 <HAL_Init+0x40>)
 80025ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002624 <HAL_Init+0x40>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002624 <HAL_Init+0x40>)
 80025fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002600:	4b08      	ldr	r3, [pc, #32]	@ (8002624 <HAL_Init+0x40>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a07      	ldr	r2, [pc, #28]	@ (8002624 <HAL_Init+0x40>)
 8002606:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800260a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800260c:	2003      	movs	r0, #3
 800260e:	f000 f94f 	bl	80028b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002612:	200f      	movs	r0, #15
 8002614:	f000 f808 	bl	8002628 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002618:	f7ff fb50 	bl	8001cbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40023c00 	.word	0x40023c00

08002628 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002630:	4b12      	ldr	r3, [pc, #72]	@ (800267c <HAL_InitTick+0x54>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	4b12      	ldr	r3, [pc, #72]	@ (8002680 <HAL_InitTick+0x58>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	4619      	mov	r1, r3
 800263a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800263e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002642:	fbb2 f3f3 	udiv	r3, r2, r3
 8002646:	4618      	mov	r0, r3
 8002648:	f000 f967 	bl	800291a <HAL_SYSTICK_Config>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e00e      	b.n	8002674 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b0f      	cmp	r3, #15
 800265a:	d80a      	bhi.n	8002672 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800265c:	2200      	movs	r2, #0
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	f04f 30ff 	mov.w	r0, #4294967295
 8002664:	f000 f92f 	bl	80028c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002668:	4a06      	ldr	r2, [pc, #24]	@ (8002684 <HAL_InitTick+0x5c>)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800266e:	2300      	movs	r3, #0
 8002670:	e000      	b.n	8002674 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
}
 8002674:	4618      	mov	r0, r3
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	20000020 	.word	0x20000020
 8002680:	20000028 	.word	0x20000028
 8002684:	20000024 	.word	0x20000024

08002688 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800268c:	4b06      	ldr	r3, [pc, #24]	@ (80026a8 <HAL_IncTick+0x20>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	461a      	mov	r2, r3
 8002692:	4b06      	ldr	r3, [pc, #24]	@ (80026ac <HAL_IncTick+0x24>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4413      	add	r3, r2
 8002698:	4a04      	ldr	r2, [pc, #16]	@ (80026ac <HAL_IncTick+0x24>)
 800269a:	6013      	str	r3, [r2, #0]
}
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	20000028 	.word	0x20000028
 80026ac:	200001b8 	.word	0x200001b8

080026b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  return uwTick;
 80026b4:	4b03      	ldr	r3, [pc, #12]	@ (80026c4 <HAL_GetTick+0x14>)
 80026b6:	681b      	ldr	r3, [r3, #0]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	200001b8 	.word	0x200001b8

080026c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026d0:	f7ff ffee 	bl	80026b0 <HAL_GetTick>
 80026d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e0:	d005      	beq.n	80026ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026e2:	4b0a      	ldr	r3, [pc, #40]	@ (800270c <HAL_Delay+0x44>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	461a      	mov	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4413      	add	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026ee:	bf00      	nop
 80026f0:	f7ff ffde 	bl	80026b0 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d8f7      	bhi.n	80026f0 <HAL_Delay+0x28>
  {
  }
}
 8002700:	bf00      	nop
 8002702:	bf00      	nop
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	20000028 	.word	0x20000028

08002710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002720:	4b0c      	ldr	r3, [pc, #48]	@ (8002754 <__NVIC_SetPriorityGrouping+0x44>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800272c:	4013      	ands	r3, r2
 800272e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002738:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800273c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002742:	4a04      	ldr	r2, [pc, #16]	@ (8002754 <__NVIC_SetPriorityGrouping+0x44>)
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	60d3      	str	r3, [r2, #12]
}
 8002748:	bf00      	nop
 800274a:	3714      	adds	r7, #20
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800275c:	4b04      	ldr	r3, [pc, #16]	@ (8002770 <__NVIC_GetPriorityGrouping+0x18>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	0a1b      	lsrs	r3, r3, #8
 8002762:	f003 0307 	and.w	r3, r3, #7
}
 8002766:	4618      	mov	r0, r3
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800277e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002782:	2b00      	cmp	r3, #0
 8002784:	db0b      	blt.n	800279e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	f003 021f 	and.w	r2, r3, #31
 800278c:	4907      	ldr	r1, [pc, #28]	@ (80027ac <__NVIC_EnableIRQ+0x38>)
 800278e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002792:	095b      	lsrs	r3, r3, #5
 8002794:	2001      	movs	r0, #1
 8002796:	fa00 f202 	lsl.w	r2, r0, r2
 800279a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	e000e100 	.word	0xe000e100

080027b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	6039      	str	r1, [r7, #0]
 80027ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	db0a      	blt.n	80027da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	490c      	ldr	r1, [pc, #48]	@ (80027fc <__NVIC_SetPriority+0x4c>)
 80027ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ce:	0112      	lsls	r2, r2, #4
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	440b      	add	r3, r1
 80027d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027d8:	e00a      	b.n	80027f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	4908      	ldr	r1, [pc, #32]	@ (8002800 <__NVIC_SetPriority+0x50>)
 80027e0:	79fb      	ldrb	r3, [r7, #7]
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	3b04      	subs	r3, #4
 80027e8:	0112      	lsls	r2, r2, #4
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	440b      	add	r3, r1
 80027ee:	761a      	strb	r2, [r3, #24]
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	e000e100 	.word	0xe000e100
 8002800:	e000ed00 	.word	0xe000ed00

08002804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002804:	b480      	push	{r7}
 8002806:	b089      	sub	sp, #36	@ 0x24
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	f1c3 0307 	rsb	r3, r3, #7
 800281e:	2b04      	cmp	r3, #4
 8002820:	bf28      	it	cs
 8002822:	2304      	movcs	r3, #4
 8002824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	3304      	adds	r3, #4
 800282a:	2b06      	cmp	r3, #6
 800282c:	d902      	bls.n	8002834 <NVIC_EncodePriority+0x30>
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	3b03      	subs	r3, #3
 8002832:	e000      	b.n	8002836 <NVIC_EncodePriority+0x32>
 8002834:	2300      	movs	r3, #0
 8002836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002838:	f04f 32ff 	mov.w	r2, #4294967295
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	43da      	mvns	r2, r3
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	401a      	ands	r2, r3
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800284c:	f04f 31ff 	mov.w	r1, #4294967295
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	fa01 f303 	lsl.w	r3, r1, r3
 8002856:	43d9      	mvns	r1, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800285c:	4313      	orrs	r3, r2
         );
}
 800285e:	4618      	mov	r0, r3
 8002860:	3724      	adds	r7, #36	@ 0x24
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
	...

0800286c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3b01      	subs	r3, #1
 8002878:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800287c:	d301      	bcc.n	8002882 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800287e:	2301      	movs	r3, #1
 8002880:	e00f      	b.n	80028a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002882:	4a0a      	ldr	r2, [pc, #40]	@ (80028ac <SysTick_Config+0x40>)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3b01      	subs	r3, #1
 8002888:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800288a:	210f      	movs	r1, #15
 800288c:	f04f 30ff 	mov.w	r0, #4294967295
 8002890:	f7ff ff8e 	bl	80027b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002894:	4b05      	ldr	r3, [pc, #20]	@ (80028ac <SysTick_Config+0x40>)
 8002896:	2200      	movs	r2, #0
 8002898:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800289a:	4b04      	ldr	r3, [pc, #16]	@ (80028ac <SysTick_Config+0x40>)
 800289c:	2207      	movs	r2, #7
 800289e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	e000e010 	.word	0xe000e010

080028b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff ff29 	bl	8002710 <__NVIC_SetPriorityGrouping>
}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b086      	sub	sp, #24
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	4603      	mov	r3, r0
 80028ce:	60b9      	str	r1, [r7, #8]
 80028d0:	607a      	str	r2, [r7, #4]
 80028d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028d8:	f7ff ff3e 	bl	8002758 <__NVIC_GetPriorityGrouping>
 80028dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	68b9      	ldr	r1, [r7, #8]
 80028e2:	6978      	ldr	r0, [r7, #20]
 80028e4:	f7ff ff8e 	bl	8002804 <NVIC_EncodePriority>
 80028e8:	4602      	mov	r2, r0
 80028ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ee:	4611      	mov	r1, r2
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff ff5d 	bl	80027b0 <__NVIC_SetPriority>
}
 80028f6:	bf00      	nop
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b082      	sub	sp, #8
 8002902:	af00      	add	r7, sp, #0
 8002904:	4603      	mov	r3, r0
 8002906:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff ff31 	bl	8002774 <__NVIC_EnableIRQ>
}
 8002912:	bf00      	nop
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b082      	sub	sp, #8
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7ff ffa2 	bl	800286c <SysTick_Config>
 8002928:	4603      	mov	r3, r0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b084      	sub	sp, #16
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800293e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002940:	f7ff feb6 	bl	80026b0 <HAL_GetTick>
 8002944:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d008      	beq.n	8002964 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2280      	movs	r2, #128	@ 0x80
 8002956:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e052      	b.n	8002a0a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0216 	bic.w	r2, r2, #22
 8002972:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	695a      	ldr	r2, [r3, #20]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002982:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002988:	2b00      	cmp	r3, #0
 800298a:	d103      	bne.n	8002994 <HAL_DMA_Abort+0x62>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002990:	2b00      	cmp	r3, #0
 8002992:	d007      	beq.n	80029a4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0208 	bic.w	r2, r2, #8
 80029a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0201 	bic.w	r2, r2, #1
 80029b2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029b4:	e013      	b.n	80029de <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029b6:	f7ff fe7b 	bl	80026b0 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b05      	cmp	r3, #5
 80029c2:	d90c      	bls.n	80029de <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2220      	movs	r2, #32
 80029c8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2203      	movs	r2, #3
 80029ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e015      	b.n	8002a0a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1e4      	bne.n	80029b6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f0:	223f      	movs	r2, #63	@ 0x3f
 80029f2:	409a      	lsls	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d004      	beq.n	8002a30 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2280      	movs	r2, #128	@ 0x80
 8002a2a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e00c      	b.n	8002a4a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2205      	movs	r2, #5
 8002a34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0201 	bic.w	r2, r2, #1
 8002a46:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
	...

08002a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b089      	sub	sp, #36	@ 0x24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61fb      	str	r3, [r7, #28]
 8002a72:	e16b      	b.n	8002d4c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a74:	2201      	movs	r2, #1
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	4013      	ands	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	f040 815a 	bne.w	8002d46 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d005      	beq.n	8002aaa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d130      	bne.n	8002b0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	2203      	movs	r2, #3
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43db      	mvns	r3, r3
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	68da      	ldr	r2, [r3, #12]
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4013      	ands	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	091b      	lsrs	r3, r3, #4
 8002af6:	f003 0201 	and.w	r2, r3, #1
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 0303 	and.w	r3, r3, #3
 8002b14:	2b03      	cmp	r3, #3
 8002b16:	d017      	beq.n	8002b48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	2203      	movs	r2, #3
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f003 0303 	and.w	r3, r3, #3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d123      	bne.n	8002b9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	08da      	lsrs	r2, r3, #3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3208      	adds	r2, #8
 8002b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	220f      	movs	r2, #15
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	43db      	mvns	r3, r3
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4013      	ands	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	691a      	ldr	r2, [r3, #16]
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	08da      	lsrs	r2, r3, #3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	3208      	adds	r2, #8
 8002b96:	69b9      	ldr	r1, [r7, #24]
 8002b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 0203 	and.w	r2, r3, #3
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 80b4 	beq.w	8002d46 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bde:	2300      	movs	r3, #0
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	4b60      	ldr	r3, [pc, #384]	@ (8002d64 <HAL_GPIO_Init+0x30c>)
 8002be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be6:	4a5f      	ldr	r2, [pc, #380]	@ (8002d64 <HAL_GPIO_Init+0x30c>)
 8002be8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bec:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bee:	4b5d      	ldr	r3, [pc, #372]	@ (8002d64 <HAL_GPIO_Init+0x30c>)
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bfa:	4a5b      	ldr	r2, [pc, #364]	@ (8002d68 <HAL_GPIO_Init+0x310>)
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	089b      	lsrs	r3, r3, #2
 8002c00:	3302      	adds	r3, #2
 8002c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	220f      	movs	r2, #15
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	43db      	mvns	r3, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a52      	ldr	r2, [pc, #328]	@ (8002d6c <HAL_GPIO_Init+0x314>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d02b      	beq.n	8002c7e <HAL_GPIO_Init+0x226>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a51      	ldr	r2, [pc, #324]	@ (8002d70 <HAL_GPIO_Init+0x318>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d025      	beq.n	8002c7a <HAL_GPIO_Init+0x222>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a50      	ldr	r2, [pc, #320]	@ (8002d74 <HAL_GPIO_Init+0x31c>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d01f      	beq.n	8002c76 <HAL_GPIO_Init+0x21e>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a4f      	ldr	r2, [pc, #316]	@ (8002d78 <HAL_GPIO_Init+0x320>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d019      	beq.n	8002c72 <HAL_GPIO_Init+0x21a>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a4e      	ldr	r2, [pc, #312]	@ (8002d7c <HAL_GPIO_Init+0x324>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d013      	beq.n	8002c6e <HAL_GPIO_Init+0x216>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a4d      	ldr	r2, [pc, #308]	@ (8002d80 <HAL_GPIO_Init+0x328>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d00d      	beq.n	8002c6a <HAL_GPIO_Init+0x212>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a4c      	ldr	r2, [pc, #304]	@ (8002d84 <HAL_GPIO_Init+0x32c>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d007      	beq.n	8002c66 <HAL_GPIO_Init+0x20e>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a4b      	ldr	r2, [pc, #300]	@ (8002d88 <HAL_GPIO_Init+0x330>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d101      	bne.n	8002c62 <HAL_GPIO_Init+0x20a>
 8002c5e:	2307      	movs	r3, #7
 8002c60:	e00e      	b.n	8002c80 <HAL_GPIO_Init+0x228>
 8002c62:	2308      	movs	r3, #8
 8002c64:	e00c      	b.n	8002c80 <HAL_GPIO_Init+0x228>
 8002c66:	2306      	movs	r3, #6
 8002c68:	e00a      	b.n	8002c80 <HAL_GPIO_Init+0x228>
 8002c6a:	2305      	movs	r3, #5
 8002c6c:	e008      	b.n	8002c80 <HAL_GPIO_Init+0x228>
 8002c6e:	2304      	movs	r3, #4
 8002c70:	e006      	b.n	8002c80 <HAL_GPIO_Init+0x228>
 8002c72:	2303      	movs	r3, #3
 8002c74:	e004      	b.n	8002c80 <HAL_GPIO_Init+0x228>
 8002c76:	2302      	movs	r3, #2
 8002c78:	e002      	b.n	8002c80 <HAL_GPIO_Init+0x228>
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e000      	b.n	8002c80 <HAL_GPIO_Init+0x228>
 8002c7e:	2300      	movs	r3, #0
 8002c80:	69fa      	ldr	r2, [r7, #28]
 8002c82:	f002 0203 	and.w	r2, r2, #3
 8002c86:	0092      	lsls	r2, r2, #2
 8002c88:	4093      	lsls	r3, r2
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c90:	4935      	ldr	r1, [pc, #212]	@ (8002d68 <HAL_GPIO_Init+0x310>)
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	089b      	lsrs	r3, r3, #2
 8002c96:	3302      	adds	r3, #2
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c9e:	4b3b      	ldr	r3, [pc, #236]	@ (8002d8c <HAL_GPIO_Init+0x334>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4013      	ands	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cc2:	4a32      	ldr	r2, [pc, #200]	@ (8002d8c <HAL_GPIO_Init+0x334>)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cc8:	4b30      	ldr	r3, [pc, #192]	@ (8002d8c <HAL_GPIO_Init+0x334>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d003      	beq.n	8002cec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cec:	4a27      	ldr	r2, [pc, #156]	@ (8002d8c <HAL_GPIO_Init+0x334>)
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cf2:	4b26      	ldr	r3, [pc, #152]	@ (8002d8c <HAL_GPIO_Init+0x334>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	43db      	mvns	r3, r3
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d16:	4a1d      	ldr	r2, [pc, #116]	@ (8002d8c <HAL_GPIO_Init+0x334>)
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002d8c <HAL_GPIO_Init+0x334>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	43db      	mvns	r3, r3
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d40:	4a12      	ldr	r2, [pc, #72]	@ (8002d8c <HAL_GPIO_Init+0x334>)
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	61fb      	str	r3, [r7, #28]
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	2b0f      	cmp	r3, #15
 8002d50:	f67f ae90 	bls.w	8002a74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d54:	bf00      	nop
 8002d56:	bf00      	nop
 8002d58:	3724      	adds	r7, #36	@ 0x24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	40023800 	.word	0x40023800
 8002d68:	40013800 	.word	0x40013800
 8002d6c:	40020000 	.word	0x40020000
 8002d70:	40020400 	.word	0x40020400
 8002d74:	40020800 	.word	0x40020800
 8002d78:	40020c00 	.word	0x40020c00
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	40021400 	.word	0x40021400
 8002d84:	40021800 	.word	0x40021800
 8002d88:	40021c00 	.word	0x40021c00
 8002d8c:	40013c00 	.word	0x40013c00

08002d90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691a      	ldr	r2, [r3, #16]
 8002da0:	887b      	ldrh	r3, [r7, #2]
 8002da2:	4013      	ands	r3, r2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d002      	beq.n	8002dae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002da8:	2301      	movs	r3, #1
 8002daa:	73fb      	strb	r3, [r7, #15]
 8002dac:	e001      	b.n	8002db2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dae:	2300      	movs	r3, #0
 8002db0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3714      	adds	r7, #20
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	460b      	mov	r3, r1
 8002dca:	807b      	strh	r3, [r7, #2]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dd0:	787b      	ldrb	r3, [r7, #1]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dd6:	887a      	ldrh	r2, [r7, #2]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ddc:	e003      	b.n	8002de6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dde:	887b      	ldrh	r3, [r7, #2]
 8002de0:	041a      	lsls	r2, r3, #16
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	619a      	str	r2, [r3, #24]
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
	...

08002df4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002dfe:	4b08      	ldr	r3, [pc, #32]	@ (8002e20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e00:	695a      	ldr	r2, [r3, #20]
 8002e02:	88fb      	ldrh	r3, [r7, #6]
 8002e04:	4013      	ands	r3, r2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d006      	beq.n	8002e18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e0a:	4a05      	ldr	r2, [pc, #20]	@ (8002e20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e0c:	88fb      	ldrh	r3, [r7, #6]
 8002e0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e10:	88fb      	ldrh	r3, [r7, #6]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7fe fe82 	bl	8001b1c <HAL_GPIO_EXTI_Callback>
  }
}
 8002e18:	bf00      	nop
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40013c00 	.word	0x40013c00

08002e24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e267      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d075      	beq.n	8002f2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e42:	4b88      	ldr	r3, [pc, #544]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 030c 	and.w	r3, r3, #12
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	d00c      	beq.n	8002e68 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e4e:	4b85      	ldr	r3, [pc, #532]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e56:	2b08      	cmp	r3, #8
 8002e58:	d112      	bne.n	8002e80 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e5a:	4b82      	ldr	r3, [pc, #520]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e66:	d10b      	bne.n	8002e80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e68:	4b7e      	ldr	r3, [pc, #504]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d05b      	beq.n	8002f2c <HAL_RCC_OscConfig+0x108>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d157      	bne.n	8002f2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e242      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e88:	d106      	bne.n	8002e98 <HAL_RCC_OscConfig+0x74>
 8002e8a:	4b76      	ldr	r3, [pc, #472]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a75      	ldr	r2, [pc, #468]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002e90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	e01d      	b.n	8002ed4 <HAL_RCC_OscConfig+0xb0>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ea0:	d10c      	bne.n	8002ebc <HAL_RCC_OscConfig+0x98>
 8002ea2:	4b70      	ldr	r3, [pc, #448]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a6f      	ldr	r2, [pc, #444]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ea8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	4b6d      	ldr	r3, [pc, #436]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a6c      	ldr	r2, [pc, #432]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eb8:	6013      	str	r3, [r2, #0]
 8002eba:	e00b      	b.n	8002ed4 <HAL_RCC_OscConfig+0xb0>
 8002ebc:	4b69      	ldr	r3, [pc, #420]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a68      	ldr	r2, [pc, #416]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ec2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ec6:	6013      	str	r3, [r2, #0]
 8002ec8:	4b66      	ldr	r3, [pc, #408]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a65      	ldr	r2, [pc, #404]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ece:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ed2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d013      	beq.n	8002f04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002edc:	f7ff fbe8 	bl	80026b0 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ee4:	f7ff fbe4 	bl	80026b0 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b64      	cmp	r3, #100	@ 0x64
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e207      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef6:	4b5b      	ldr	r3, [pc, #364]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0f0      	beq.n	8002ee4 <HAL_RCC_OscConfig+0xc0>
 8002f02:	e014      	b.n	8002f2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f04:	f7ff fbd4 	bl	80026b0 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f0c:	f7ff fbd0 	bl	80026b0 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b64      	cmp	r3, #100	@ 0x64
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e1f3      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f1e:	4b51      	ldr	r3, [pc, #324]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f0      	bne.n	8002f0c <HAL_RCC_OscConfig+0xe8>
 8002f2a:	e000      	b.n	8002f2e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d063      	beq.n	8003002 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f3a:	4b4a      	ldr	r3, [pc, #296]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 030c 	and.w	r3, r3, #12
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00b      	beq.n	8002f5e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f46:	4b47      	ldr	r3, [pc, #284]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f4e:	2b08      	cmp	r3, #8
 8002f50:	d11c      	bne.n	8002f8c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f52:	4b44      	ldr	r3, [pc, #272]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d116      	bne.n	8002f8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f5e:	4b41      	ldr	r3, [pc, #260]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d005      	beq.n	8002f76 <HAL_RCC_OscConfig+0x152>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d001      	beq.n	8002f76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e1c7      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f76:	4b3b      	ldr	r3, [pc, #236]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	4937      	ldr	r1, [pc, #220]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f8a:	e03a      	b.n	8003002 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d020      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f94:	4b34      	ldr	r3, [pc, #208]	@ (8003068 <HAL_RCC_OscConfig+0x244>)
 8002f96:	2201      	movs	r2, #1
 8002f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9a:	f7ff fb89 	bl	80026b0 <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fa2:	f7ff fb85 	bl	80026b0 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e1a8      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb4:	4b2b      	ldr	r3, [pc, #172]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0f0      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc0:	4b28      	ldr	r3, [pc, #160]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	4925      	ldr	r1, [pc, #148]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	600b      	str	r3, [r1, #0]
 8002fd4:	e015      	b.n	8003002 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fd6:	4b24      	ldr	r3, [pc, #144]	@ (8003068 <HAL_RCC_OscConfig+0x244>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fdc:	f7ff fb68 	bl	80026b0 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fe4:	f7ff fb64 	bl	80026b0 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e187      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ff6:	4b1b      	ldr	r3, [pc, #108]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f0      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d036      	beq.n	800307c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d016      	beq.n	8003044 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003016:	4b15      	ldr	r3, [pc, #84]	@ (800306c <HAL_RCC_OscConfig+0x248>)
 8003018:	2201      	movs	r2, #1
 800301a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800301c:	f7ff fb48 	bl	80026b0 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003024:	f7ff fb44 	bl	80026b0 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e167      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003036:	4b0b      	ldr	r3, [pc, #44]	@ (8003064 <HAL_RCC_OscConfig+0x240>)
 8003038:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0f0      	beq.n	8003024 <HAL_RCC_OscConfig+0x200>
 8003042:	e01b      	b.n	800307c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003044:	4b09      	ldr	r3, [pc, #36]	@ (800306c <HAL_RCC_OscConfig+0x248>)
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800304a:	f7ff fb31 	bl	80026b0 <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003050:	e00e      	b.n	8003070 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003052:	f7ff fb2d 	bl	80026b0 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d907      	bls.n	8003070 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e150      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
 8003064:	40023800 	.word	0x40023800
 8003068:	42470000 	.word	0x42470000
 800306c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003070:	4b88      	ldr	r3, [pc, #544]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 8003072:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1ea      	bne.n	8003052 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 8097 	beq.w	80031b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800308a:	2300      	movs	r3, #0
 800308c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800308e:	4b81      	ldr	r3, [pc, #516]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 8003090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003092:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10f      	bne.n	80030ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800309a:	2300      	movs	r3, #0
 800309c:	60bb      	str	r3, [r7, #8]
 800309e:	4b7d      	ldr	r3, [pc, #500]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 80030a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a2:	4a7c      	ldr	r2, [pc, #496]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 80030a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80030aa:	4b7a      	ldr	r3, [pc, #488]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 80030ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030b2:	60bb      	str	r3, [r7, #8]
 80030b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030b6:	2301      	movs	r3, #1
 80030b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ba:	4b77      	ldr	r3, [pc, #476]	@ (8003298 <HAL_RCC_OscConfig+0x474>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d118      	bne.n	80030f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030c6:	4b74      	ldr	r3, [pc, #464]	@ (8003298 <HAL_RCC_OscConfig+0x474>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a73      	ldr	r2, [pc, #460]	@ (8003298 <HAL_RCC_OscConfig+0x474>)
 80030cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030d2:	f7ff faed 	bl	80026b0 <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d8:	e008      	b.n	80030ec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030da:	f7ff fae9 	bl	80026b0 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e10c      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ec:	4b6a      	ldr	r3, [pc, #424]	@ (8003298 <HAL_RCC_OscConfig+0x474>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0f0      	beq.n	80030da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d106      	bne.n	800310e <HAL_RCC_OscConfig+0x2ea>
 8003100:	4b64      	ldr	r3, [pc, #400]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 8003102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003104:	4a63      	ldr	r2, [pc, #396]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 8003106:	f043 0301 	orr.w	r3, r3, #1
 800310a:	6713      	str	r3, [r2, #112]	@ 0x70
 800310c:	e01c      	b.n	8003148 <HAL_RCC_OscConfig+0x324>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	2b05      	cmp	r3, #5
 8003114:	d10c      	bne.n	8003130 <HAL_RCC_OscConfig+0x30c>
 8003116:	4b5f      	ldr	r3, [pc, #380]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 8003118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800311a:	4a5e      	ldr	r2, [pc, #376]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 800311c:	f043 0304 	orr.w	r3, r3, #4
 8003120:	6713      	str	r3, [r2, #112]	@ 0x70
 8003122:	4b5c      	ldr	r3, [pc, #368]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 8003124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003126:	4a5b      	ldr	r2, [pc, #364]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 8003128:	f043 0301 	orr.w	r3, r3, #1
 800312c:	6713      	str	r3, [r2, #112]	@ 0x70
 800312e:	e00b      	b.n	8003148 <HAL_RCC_OscConfig+0x324>
 8003130:	4b58      	ldr	r3, [pc, #352]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 8003132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003134:	4a57      	ldr	r2, [pc, #348]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 8003136:	f023 0301 	bic.w	r3, r3, #1
 800313a:	6713      	str	r3, [r2, #112]	@ 0x70
 800313c:	4b55      	ldr	r3, [pc, #340]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 800313e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003140:	4a54      	ldr	r2, [pc, #336]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 8003142:	f023 0304 	bic.w	r3, r3, #4
 8003146:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d015      	beq.n	800317c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003150:	f7ff faae 	bl	80026b0 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003156:	e00a      	b.n	800316e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003158:	f7ff faaa 	bl	80026b0 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003166:	4293      	cmp	r3, r2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e0cb      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800316e:	4b49      	ldr	r3, [pc, #292]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 8003170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0ee      	beq.n	8003158 <HAL_RCC_OscConfig+0x334>
 800317a:	e014      	b.n	80031a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800317c:	f7ff fa98 	bl	80026b0 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003182:	e00a      	b.n	800319a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003184:	f7ff fa94 	bl	80026b0 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003192:	4293      	cmp	r3, r2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e0b5      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800319a:	4b3e      	ldr	r3, [pc, #248]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 800319c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1ee      	bne.n	8003184 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031a6:	7dfb      	ldrb	r3, [r7, #23]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d105      	bne.n	80031b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ac:	4b39      	ldr	r3, [pc, #228]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 80031ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b0:	4a38      	ldr	r2, [pc, #224]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 80031b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 80a1 	beq.w	8003304 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031c2:	4b34      	ldr	r3, [pc, #208]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 030c 	and.w	r3, r3, #12
 80031ca:	2b08      	cmp	r3, #8
 80031cc:	d05c      	beq.n	8003288 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d141      	bne.n	800325a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d6:	4b31      	ldr	r3, [pc, #196]	@ (800329c <HAL_RCC_OscConfig+0x478>)
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031dc:	f7ff fa68 	bl	80026b0 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e4:	f7ff fa64 	bl	80026b0 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e087      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f6:	4b27      	ldr	r3, [pc, #156]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f0      	bne.n	80031e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69da      	ldr	r2, [r3, #28]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003210:	019b      	lsls	r3, r3, #6
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003218:	085b      	lsrs	r3, r3, #1
 800321a:	3b01      	subs	r3, #1
 800321c:	041b      	lsls	r3, r3, #16
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003224:	061b      	lsls	r3, r3, #24
 8003226:	491b      	ldr	r1, [pc, #108]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 8003228:	4313      	orrs	r3, r2
 800322a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800322c:	4b1b      	ldr	r3, [pc, #108]	@ (800329c <HAL_RCC_OscConfig+0x478>)
 800322e:	2201      	movs	r2, #1
 8003230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003232:	f7ff fa3d 	bl	80026b0 <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800323a:	f7ff fa39 	bl	80026b0 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e05c      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800324c:	4b11      	ldr	r3, [pc, #68]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0f0      	beq.n	800323a <HAL_RCC_OscConfig+0x416>
 8003258:	e054      	b.n	8003304 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325a:	4b10      	ldr	r3, [pc, #64]	@ (800329c <HAL_RCC_OscConfig+0x478>)
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003260:	f7ff fa26 	bl	80026b0 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003268:	f7ff fa22 	bl	80026b0 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e045      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327a:	4b06      	ldr	r3, [pc, #24]	@ (8003294 <HAL_RCC_OscConfig+0x470>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f0      	bne.n	8003268 <HAL_RCC_OscConfig+0x444>
 8003286:	e03d      	b.n	8003304 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d107      	bne.n	80032a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e038      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
 8003294:	40023800 	.word	0x40023800
 8003298:	40007000 	.word	0x40007000
 800329c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003310 <HAL_RCC_OscConfig+0x4ec>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d028      	beq.n	8003300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d121      	bne.n	8003300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d11a      	bne.n	8003300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80032d0:	4013      	ands	r3, r2
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80032d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032d8:	4293      	cmp	r3, r2
 80032da:	d111      	bne.n	8003300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e6:	085b      	lsrs	r3, r3, #1
 80032e8:	3b01      	subs	r3, #1
 80032ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d107      	bne.n	8003300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d001      	beq.n	8003304 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e000      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	40023800 	.word	0x40023800

08003314 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e0cc      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003328:	4b68      	ldr	r3, [pc, #416]	@ (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	429a      	cmp	r2, r3
 8003334:	d90c      	bls.n	8003350 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003336:	4b65      	ldr	r3, [pc, #404]	@ (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	b2d2      	uxtb	r2, r2
 800333c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800333e:	4b63      	ldr	r3, [pc, #396]	@ (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	429a      	cmp	r2, r3
 800334a:	d001      	beq.n	8003350 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e0b8      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d020      	beq.n	800339e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	d005      	beq.n	8003374 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003368:	4b59      	ldr	r3, [pc, #356]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	4a58      	ldr	r2, [pc, #352]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003372:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0308 	and.w	r3, r3, #8
 800337c:	2b00      	cmp	r3, #0
 800337e:	d005      	beq.n	800338c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003380:	4b53      	ldr	r3, [pc, #332]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	4a52      	ldr	r2, [pc, #328]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800338a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800338c:	4b50      	ldr	r3, [pc, #320]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	494d      	ldr	r1, [pc, #308]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	4313      	orrs	r3, r2
 800339c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d044      	beq.n	8003434 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d107      	bne.n	80033c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b2:	4b47      	ldr	r3, [pc, #284]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d119      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e07f      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d003      	beq.n	80033d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ce:	2b03      	cmp	r3, #3
 80033d0:	d107      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033d2:	4b3f      	ldr	r3, [pc, #252]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d109      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e06f      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e2:	4b3b      	ldr	r3, [pc, #236]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e067      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033f2:	4b37      	ldr	r3, [pc, #220]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f023 0203 	bic.w	r2, r3, #3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	4934      	ldr	r1, [pc, #208]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003400:	4313      	orrs	r3, r2
 8003402:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003404:	f7ff f954 	bl	80026b0 <HAL_GetTick>
 8003408:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800340a:	e00a      	b.n	8003422 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800340c:	f7ff f950 	bl	80026b0 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	f241 3288 	movw	r2, #5000	@ 0x1388
 800341a:	4293      	cmp	r3, r2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e04f      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003422:	4b2b      	ldr	r3, [pc, #172]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 020c 	and.w	r2, r3, #12
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	429a      	cmp	r2, r3
 8003432:	d1eb      	bne.n	800340c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003434:	4b25      	ldr	r3, [pc, #148]	@ (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d20c      	bcs.n	800345c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003442:	4b22      	ldr	r3, [pc, #136]	@ (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800344a:	4b20      	ldr	r3, [pc, #128]	@ (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	429a      	cmp	r2, r3
 8003456:	d001      	beq.n	800345c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e032      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	d008      	beq.n	800347a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003468:	4b19      	ldr	r3, [pc, #100]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	4916      	ldr	r1, [pc, #88]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	4313      	orrs	r3, r2
 8003478:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	2b00      	cmp	r3, #0
 8003484:	d009      	beq.n	800349a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003486:	4b12      	ldr	r3, [pc, #72]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	490e      	ldr	r1, [pc, #56]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003496:	4313      	orrs	r3, r2
 8003498:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800349a:	f000 f821 	bl	80034e0 <HAL_RCC_GetSysClockFreq>
 800349e:	4602      	mov	r2, r0
 80034a0:	4b0b      	ldr	r3, [pc, #44]	@ (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	091b      	lsrs	r3, r3, #4
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	490a      	ldr	r1, [pc, #40]	@ (80034d4 <HAL_RCC_ClockConfig+0x1c0>)
 80034ac:	5ccb      	ldrb	r3, [r1, r3]
 80034ae:	fa22 f303 	lsr.w	r3, r2, r3
 80034b2:	4a09      	ldr	r2, [pc, #36]	@ (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 80034b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80034b6:	4b09      	ldr	r3, [pc, #36]	@ (80034dc <HAL_RCC_ClockConfig+0x1c8>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7ff f8b4 	bl	8002628 <HAL_InitTick>

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	40023c00 	.word	0x40023c00
 80034d0:	40023800 	.word	0x40023800
 80034d4:	08006b64 	.word	0x08006b64
 80034d8:	20000020 	.word	0x20000020
 80034dc:	20000024 	.word	0x20000024

080034e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034e4:	b094      	sub	sp, #80	@ 0x50
 80034e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80034e8:	2300      	movs	r3, #0
 80034ea:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80034f4:	2300      	movs	r3, #0
 80034f6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034f8:	4b79      	ldr	r3, [pc, #484]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f003 030c 	and.w	r3, r3, #12
 8003500:	2b08      	cmp	r3, #8
 8003502:	d00d      	beq.n	8003520 <HAL_RCC_GetSysClockFreq+0x40>
 8003504:	2b08      	cmp	r3, #8
 8003506:	f200 80e1 	bhi.w	80036cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800350a:	2b00      	cmp	r3, #0
 800350c:	d002      	beq.n	8003514 <HAL_RCC_GetSysClockFreq+0x34>
 800350e:	2b04      	cmp	r3, #4
 8003510:	d003      	beq.n	800351a <HAL_RCC_GetSysClockFreq+0x3a>
 8003512:	e0db      	b.n	80036cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003514:	4b73      	ldr	r3, [pc, #460]	@ (80036e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003516:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003518:	e0db      	b.n	80036d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800351a:	4b73      	ldr	r3, [pc, #460]	@ (80036e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800351c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800351e:	e0d8      	b.n	80036d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003520:	4b6f      	ldr	r3, [pc, #444]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003528:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800352a:	4b6d      	ldr	r3, [pc, #436]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d063      	beq.n	80035fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003536:	4b6a      	ldr	r3, [pc, #424]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	099b      	lsrs	r3, r3, #6
 800353c:	2200      	movs	r2, #0
 800353e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003540:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003548:	633b      	str	r3, [r7, #48]	@ 0x30
 800354a:	2300      	movs	r3, #0
 800354c:	637b      	str	r3, [r7, #52]	@ 0x34
 800354e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003552:	4622      	mov	r2, r4
 8003554:	462b      	mov	r3, r5
 8003556:	f04f 0000 	mov.w	r0, #0
 800355a:	f04f 0100 	mov.w	r1, #0
 800355e:	0159      	lsls	r1, r3, #5
 8003560:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003564:	0150      	lsls	r0, r2, #5
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	4621      	mov	r1, r4
 800356c:	1a51      	subs	r1, r2, r1
 800356e:	6139      	str	r1, [r7, #16]
 8003570:	4629      	mov	r1, r5
 8003572:	eb63 0301 	sbc.w	r3, r3, r1
 8003576:	617b      	str	r3, [r7, #20]
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	f04f 0300 	mov.w	r3, #0
 8003580:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003584:	4659      	mov	r1, fp
 8003586:	018b      	lsls	r3, r1, #6
 8003588:	4651      	mov	r1, sl
 800358a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800358e:	4651      	mov	r1, sl
 8003590:	018a      	lsls	r2, r1, #6
 8003592:	4651      	mov	r1, sl
 8003594:	ebb2 0801 	subs.w	r8, r2, r1
 8003598:	4659      	mov	r1, fp
 800359a:	eb63 0901 	sbc.w	r9, r3, r1
 800359e:	f04f 0200 	mov.w	r2, #0
 80035a2:	f04f 0300 	mov.w	r3, #0
 80035a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035b2:	4690      	mov	r8, r2
 80035b4:	4699      	mov	r9, r3
 80035b6:	4623      	mov	r3, r4
 80035b8:	eb18 0303 	adds.w	r3, r8, r3
 80035bc:	60bb      	str	r3, [r7, #8]
 80035be:	462b      	mov	r3, r5
 80035c0:	eb49 0303 	adc.w	r3, r9, r3
 80035c4:	60fb      	str	r3, [r7, #12]
 80035c6:	f04f 0200 	mov.w	r2, #0
 80035ca:	f04f 0300 	mov.w	r3, #0
 80035ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80035d2:	4629      	mov	r1, r5
 80035d4:	024b      	lsls	r3, r1, #9
 80035d6:	4621      	mov	r1, r4
 80035d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035dc:	4621      	mov	r1, r4
 80035de:	024a      	lsls	r2, r1, #9
 80035e0:	4610      	mov	r0, r2
 80035e2:	4619      	mov	r1, r3
 80035e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035e6:	2200      	movs	r2, #0
 80035e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80035f0:	f7fc fe3e 	bl	8000270 <__aeabi_uldivmod>
 80035f4:	4602      	mov	r2, r0
 80035f6:	460b      	mov	r3, r1
 80035f8:	4613      	mov	r3, r2
 80035fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035fc:	e058      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035fe:	4b38      	ldr	r3, [pc, #224]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	099b      	lsrs	r3, r3, #6
 8003604:	2200      	movs	r2, #0
 8003606:	4618      	mov	r0, r3
 8003608:	4611      	mov	r1, r2
 800360a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800360e:	623b      	str	r3, [r7, #32]
 8003610:	2300      	movs	r3, #0
 8003612:	627b      	str	r3, [r7, #36]	@ 0x24
 8003614:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003618:	4642      	mov	r2, r8
 800361a:	464b      	mov	r3, r9
 800361c:	f04f 0000 	mov.w	r0, #0
 8003620:	f04f 0100 	mov.w	r1, #0
 8003624:	0159      	lsls	r1, r3, #5
 8003626:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800362a:	0150      	lsls	r0, r2, #5
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	4641      	mov	r1, r8
 8003632:	ebb2 0a01 	subs.w	sl, r2, r1
 8003636:	4649      	mov	r1, r9
 8003638:	eb63 0b01 	sbc.w	fp, r3, r1
 800363c:	f04f 0200 	mov.w	r2, #0
 8003640:	f04f 0300 	mov.w	r3, #0
 8003644:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003648:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800364c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003650:	ebb2 040a 	subs.w	r4, r2, sl
 8003654:	eb63 050b 	sbc.w	r5, r3, fp
 8003658:	f04f 0200 	mov.w	r2, #0
 800365c:	f04f 0300 	mov.w	r3, #0
 8003660:	00eb      	lsls	r3, r5, #3
 8003662:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003666:	00e2      	lsls	r2, r4, #3
 8003668:	4614      	mov	r4, r2
 800366a:	461d      	mov	r5, r3
 800366c:	4643      	mov	r3, r8
 800366e:	18e3      	adds	r3, r4, r3
 8003670:	603b      	str	r3, [r7, #0]
 8003672:	464b      	mov	r3, r9
 8003674:	eb45 0303 	adc.w	r3, r5, r3
 8003678:	607b      	str	r3, [r7, #4]
 800367a:	f04f 0200 	mov.w	r2, #0
 800367e:	f04f 0300 	mov.w	r3, #0
 8003682:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003686:	4629      	mov	r1, r5
 8003688:	028b      	lsls	r3, r1, #10
 800368a:	4621      	mov	r1, r4
 800368c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003690:	4621      	mov	r1, r4
 8003692:	028a      	lsls	r2, r1, #10
 8003694:	4610      	mov	r0, r2
 8003696:	4619      	mov	r1, r3
 8003698:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800369a:	2200      	movs	r2, #0
 800369c:	61bb      	str	r3, [r7, #24]
 800369e:	61fa      	str	r2, [r7, #28]
 80036a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036a4:	f7fc fde4 	bl	8000270 <__aeabi_uldivmod>
 80036a8:	4602      	mov	r2, r0
 80036aa:	460b      	mov	r3, r1
 80036ac:	4613      	mov	r3, r2
 80036ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80036b0:	4b0b      	ldr	r3, [pc, #44]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	0c1b      	lsrs	r3, r3, #16
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	3301      	adds	r3, #1
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80036c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036ca:	e002      	b.n	80036d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036cc:	4b05      	ldr	r3, [pc, #20]	@ (80036e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80036ce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3750      	adds	r7, #80	@ 0x50
 80036d8:	46bd      	mov	sp, r7
 80036da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036de:	bf00      	nop
 80036e0:	40023800 	.word	0x40023800
 80036e4:	00f42400 	.word	0x00f42400
 80036e8:	007a1200 	.word	0x007a1200

080036ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036f0:	4b03      	ldr	r3, [pc, #12]	@ (8003700 <HAL_RCC_GetHCLKFreq+0x14>)
 80036f2:	681b      	ldr	r3, [r3, #0]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	20000020 	.word	0x20000020

08003704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003708:	f7ff fff0 	bl	80036ec <HAL_RCC_GetHCLKFreq>
 800370c:	4602      	mov	r2, r0
 800370e:	4b05      	ldr	r3, [pc, #20]	@ (8003724 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	0a9b      	lsrs	r3, r3, #10
 8003714:	f003 0307 	and.w	r3, r3, #7
 8003718:	4903      	ldr	r1, [pc, #12]	@ (8003728 <HAL_RCC_GetPCLK1Freq+0x24>)
 800371a:	5ccb      	ldrb	r3, [r1, r3]
 800371c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003720:	4618      	mov	r0, r3
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40023800 	.word	0x40023800
 8003728:	08006b74 	.word	0x08006b74

0800372c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003730:	f7ff ffdc 	bl	80036ec <HAL_RCC_GetHCLKFreq>
 8003734:	4602      	mov	r2, r0
 8003736:	4b05      	ldr	r3, [pc, #20]	@ (800374c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	0b5b      	lsrs	r3, r3, #13
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	4903      	ldr	r1, [pc, #12]	@ (8003750 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003742:	5ccb      	ldrb	r3, [r1, r3]
 8003744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003748:	4618      	mov	r0, r3
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40023800 	.word	0x40023800
 8003750:	08006b74 	.word	0x08006b74

08003754 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e041      	b.n	80037ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d106      	bne.n	8003780 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7fe fc6a 	bl	8002054 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2202      	movs	r2, #2
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3304      	adds	r3, #4
 8003790:	4619      	mov	r1, r3
 8003792:	4610      	mov	r0, r2
 8003794:	f000 fcd2 	bl	800413c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
	...

080037f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b01      	cmp	r3, #1
 8003806:	d001      	beq.n	800380c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e04e      	b.n	80038aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2202      	movs	r2, #2
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68da      	ldr	r2, [r3, #12]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0201 	orr.w	r2, r2, #1
 8003822:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a23      	ldr	r2, [pc, #140]	@ (80038b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d022      	beq.n	8003874 <HAL_TIM_Base_Start_IT+0x80>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003836:	d01d      	beq.n	8003874 <HAL_TIM_Base_Start_IT+0x80>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a1f      	ldr	r2, [pc, #124]	@ (80038bc <HAL_TIM_Base_Start_IT+0xc8>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d018      	beq.n	8003874 <HAL_TIM_Base_Start_IT+0x80>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a1e      	ldr	r2, [pc, #120]	@ (80038c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d013      	beq.n	8003874 <HAL_TIM_Base_Start_IT+0x80>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a1c      	ldr	r2, [pc, #112]	@ (80038c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d00e      	beq.n	8003874 <HAL_TIM_Base_Start_IT+0x80>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a1b      	ldr	r2, [pc, #108]	@ (80038c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d009      	beq.n	8003874 <HAL_TIM_Base_Start_IT+0x80>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a19      	ldr	r2, [pc, #100]	@ (80038cc <HAL_TIM_Base_Start_IT+0xd8>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d004      	beq.n	8003874 <HAL_TIM_Base_Start_IT+0x80>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a18      	ldr	r2, [pc, #96]	@ (80038d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d111      	bne.n	8003898 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2b06      	cmp	r3, #6
 8003884:	d010      	beq.n	80038a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f042 0201 	orr.w	r2, r2, #1
 8003894:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003896:	e007      	b.n	80038a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 0201 	orr.w	r2, r2, #1
 80038a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3714      	adds	r7, #20
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	40010000 	.word	0x40010000
 80038bc:	40000400 	.word	0x40000400
 80038c0:	40000800 	.word	0x40000800
 80038c4:	40000c00 	.word	0x40000c00
 80038c8:	40010400 	.word	0x40010400
 80038cc:	40014000 	.word	0x40014000
 80038d0:	40001800 	.word	0x40001800

080038d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e041      	b.n	800396a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d106      	bne.n	8003900 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f839 	bl	8003972 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2202      	movs	r2, #2
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3304      	adds	r3, #4
 8003910:	4619      	mov	r1, r3
 8003912:	4610      	mov	r0, r2
 8003914:	f000 fc12 	bl	800413c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003972:	b480      	push	{r7}
 8003974:	b083      	sub	sp, #12
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800397a:	bf00      	nop
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
	...

08003988 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d109      	bne.n	80039ac <HAL_TIM_PWM_Start+0x24>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	bf14      	ite	ne
 80039a4:	2301      	movne	r3, #1
 80039a6:	2300      	moveq	r3, #0
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	e022      	b.n	80039f2 <HAL_TIM_PWM_Start+0x6a>
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	d109      	bne.n	80039c6 <HAL_TIM_PWM_Start+0x3e>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	bf14      	ite	ne
 80039be:	2301      	movne	r3, #1
 80039c0:	2300      	moveq	r3, #0
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	e015      	b.n	80039f2 <HAL_TIM_PWM_Start+0x6a>
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	2b08      	cmp	r3, #8
 80039ca:	d109      	bne.n	80039e0 <HAL_TIM_PWM_Start+0x58>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	bf14      	ite	ne
 80039d8:	2301      	movne	r3, #1
 80039da:	2300      	moveq	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	e008      	b.n	80039f2 <HAL_TIM_PWM_Start+0x6a>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	bf14      	ite	ne
 80039ec:	2301      	movne	r3, #1
 80039ee:	2300      	moveq	r3, #0
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e07c      	b.n	8003af4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d104      	bne.n	8003a0a <HAL_TIM_PWM_Start+0x82>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2202      	movs	r2, #2
 8003a04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a08:	e013      	b.n	8003a32 <HAL_TIM_PWM_Start+0xaa>
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	2b04      	cmp	r3, #4
 8003a0e:	d104      	bne.n	8003a1a <HAL_TIM_PWM_Start+0x92>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2202      	movs	r2, #2
 8003a14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a18:	e00b      	b.n	8003a32 <HAL_TIM_PWM_Start+0xaa>
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2b08      	cmp	r3, #8
 8003a1e:	d104      	bne.n	8003a2a <HAL_TIM_PWM_Start+0xa2>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a28:	e003      	b.n	8003a32 <HAL_TIM_PWM_Start+0xaa>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2201      	movs	r2, #1
 8003a38:	6839      	ldr	r1, [r7, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 fe74 	bl	8004728 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a2d      	ldr	r2, [pc, #180]	@ (8003afc <HAL_TIM_PWM_Start+0x174>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d004      	beq.n	8003a54 <HAL_TIM_PWM_Start+0xcc>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a2c      	ldr	r2, [pc, #176]	@ (8003b00 <HAL_TIM_PWM_Start+0x178>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d101      	bne.n	8003a58 <HAL_TIM_PWM_Start+0xd0>
 8003a54:	2301      	movs	r3, #1
 8003a56:	e000      	b.n	8003a5a <HAL_TIM_PWM_Start+0xd2>
 8003a58:	2300      	movs	r3, #0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d007      	beq.n	8003a6e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a6c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a22      	ldr	r2, [pc, #136]	@ (8003afc <HAL_TIM_PWM_Start+0x174>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d022      	beq.n	8003abe <HAL_TIM_PWM_Start+0x136>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a80:	d01d      	beq.n	8003abe <HAL_TIM_PWM_Start+0x136>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a1f      	ldr	r2, [pc, #124]	@ (8003b04 <HAL_TIM_PWM_Start+0x17c>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d018      	beq.n	8003abe <HAL_TIM_PWM_Start+0x136>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a1d      	ldr	r2, [pc, #116]	@ (8003b08 <HAL_TIM_PWM_Start+0x180>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d013      	beq.n	8003abe <HAL_TIM_PWM_Start+0x136>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a1c      	ldr	r2, [pc, #112]	@ (8003b0c <HAL_TIM_PWM_Start+0x184>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d00e      	beq.n	8003abe <HAL_TIM_PWM_Start+0x136>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a16      	ldr	r2, [pc, #88]	@ (8003b00 <HAL_TIM_PWM_Start+0x178>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d009      	beq.n	8003abe <HAL_TIM_PWM_Start+0x136>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a18      	ldr	r2, [pc, #96]	@ (8003b10 <HAL_TIM_PWM_Start+0x188>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d004      	beq.n	8003abe <HAL_TIM_PWM_Start+0x136>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a16      	ldr	r2, [pc, #88]	@ (8003b14 <HAL_TIM_PWM_Start+0x18c>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d111      	bne.n	8003ae2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2b06      	cmp	r3, #6
 8003ace:	d010      	beq.n	8003af2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f042 0201 	orr.w	r2, r2, #1
 8003ade:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ae0:	e007      	b.n	8003af2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f042 0201 	orr.w	r2, r2, #1
 8003af0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	40010000 	.word	0x40010000
 8003b00:	40010400 	.word	0x40010400
 8003b04:	40000400 	.word	0x40000400
 8003b08:	40000800 	.word	0x40000800
 8003b0c:	40000c00 	.word	0x40000c00
 8003b10:	40014000 	.word	0x40014000
 8003b14:	40001800 	.word	0x40001800

08003b18 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2200      	movs	r2, #0
 8003b28:	6839      	ldr	r1, [r7, #0]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f000 fdfc 	bl	8004728 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a2e      	ldr	r2, [pc, #184]	@ (8003bf0 <HAL_TIM_PWM_Stop+0xd8>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d004      	beq.n	8003b44 <HAL_TIM_PWM_Stop+0x2c>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a2d      	ldr	r2, [pc, #180]	@ (8003bf4 <HAL_TIM_PWM_Stop+0xdc>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d101      	bne.n	8003b48 <HAL_TIM_PWM_Stop+0x30>
 8003b44:	2301      	movs	r3, #1
 8003b46:	e000      	b.n	8003b4a <HAL_TIM_PWM_Stop+0x32>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d017      	beq.n	8003b7e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6a1a      	ldr	r2, [r3, #32]
 8003b54:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003b58:	4013      	ands	r3, r2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10f      	bne.n	8003b7e <HAL_TIM_PWM_Stop+0x66>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6a1a      	ldr	r2, [r3, #32]
 8003b64:	f240 4344 	movw	r3, #1092	@ 0x444
 8003b68:	4013      	ands	r3, r2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d107      	bne.n	8003b7e <HAL_TIM_PWM_Stop+0x66>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b7c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	6a1a      	ldr	r2, [r3, #32]
 8003b84:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003b88:	4013      	ands	r3, r2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10f      	bne.n	8003bae <HAL_TIM_PWM_Stop+0x96>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6a1a      	ldr	r2, [r3, #32]
 8003b94:	f240 4344 	movw	r3, #1092	@ 0x444
 8003b98:	4013      	ands	r3, r2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d107      	bne.n	8003bae <HAL_TIM_PWM_Stop+0x96>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 0201 	bic.w	r2, r2, #1
 8003bac:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d104      	bne.n	8003bbe <HAL_TIM_PWM_Stop+0xa6>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bbc:	e013      	b.n	8003be6 <HAL_TIM_PWM_Stop+0xce>
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2b04      	cmp	r3, #4
 8003bc2:	d104      	bne.n	8003bce <HAL_TIM_PWM_Stop+0xb6>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bcc:	e00b      	b.n	8003be6 <HAL_TIM_PWM_Stop+0xce>
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	d104      	bne.n	8003bde <HAL_TIM_PWM_Stop+0xc6>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bdc:	e003      	b.n	8003be6 <HAL_TIM_PWM_Stop+0xce>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	40010000 	.word	0x40010000
 8003bf4:	40010400 	.word	0x40010400

08003bf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d020      	beq.n	8003c5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d01b      	beq.n	8003c5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f06f 0202 	mvn.w	r2, #2
 8003c2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	f003 0303 	and.w	r3, r3, #3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 fa5b 	bl	80040fe <HAL_TIM_IC_CaptureCallback>
 8003c48:	e005      	b.n	8003c56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 fa4d 	bl	80040ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 fa5e 	bl	8004112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	f003 0304 	and.w	r3, r3, #4
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d020      	beq.n	8003ca8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d01b      	beq.n	8003ca8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f06f 0204 	mvn.w	r2, #4
 8003c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 fa35 	bl	80040fe <HAL_TIM_IC_CaptureCallback>
 8003c94:	e005      	b.n	8003ca2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 fa27 	bl	80040ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 fa38 	bl	8004112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	f003 0308 	and.w	r3, r3, #8
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d020      	beq.n	8003cf4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f003 0308 	and.w	r3, r3, #8
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d01b      	beq.n	8003cf4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f06f 0208 	mvn.w	r2, #8
 8003cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2204      	movs	r2, #4
 8003cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	f003 0303 	and.w	r3, r3, #3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 fa0f 	bl	80040fe <HAL_TIM_IC_CaptureCallback>
 8003ce0:	e005      	b.n	8003cee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 fa01 	bl	80040ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 fa12 	bl	8004112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	f003 0310 	and.w	r3, r3, #16
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d020      	beq.n	8003d40 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f003 0310 	and.w	r3, r3, #16
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d01b      	beq.n	8003d40 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f06f 0210 	mvn.w	r2, #16
 8003d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2208      	movs	r2, #8
 8003d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d003      	beq.n	8003d2e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f9e9 	bl	80040fe <HAL_TIM_IC_CaptureCallback>
 8003d2c:	e005      	b.n	8003d3a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f9db 	bl	80040ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 f9ec 	bl	8004112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00c      	beq.n	8003d64 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d007      	beq.n	8003d64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f06f 0201 	mvn.w	r2, #1
 8003d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7fd ff68 	bl	8001c34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00c      	beq.n	8003d88 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d007      	beq.n	8003d88 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 fd7c 	bl	8004880 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00c      	beq.n	8003dac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d007      	beq.n	8003dac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f9bd 	bl	8004126 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	f003 0320 	and.w	r3, r3, #32
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00c      	beq.n	8003dd0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f003 0320 	and.w	r3, r3, #32
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d007      	beq.n	8003dd0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f06f 0220 	mvn.w	r2, #32
 8003dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 fd4e 	bl	800486c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dd0:	bf00      	nop
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003de4:	2300      	movs	r3, #0
 8003de6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d101      	bne.n	8003df6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003df2:	2302      	movs	r3, #2
 8003df4:	e0ae      	b.n	8003f54 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b0c      	cmp	r3, #12
 8003e02:	f200 809f 	bhi.w	8003f44 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e06:	a201      	add	r2, pc, #4	@ (adr r2, 8003e0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0c:	08003e41 	.word	0x08003e41
 8003e10:	08003f45 	.word	0x08003f45
 8003e14:	08003f45 	.word	0x08003f45
 8003e18:	08003f45 	.word	0x08003f45
 8003e1c:	08003e81 	.word	0x08003e81
 8003e20:	08003f45 	.word	0x08003f45
 8003e24:	08003f45 	.word	0x08003f45
 8003e28:	08003f45 	.word	0x08003f45
 8003e2c:	08003ec3 	.word	0x08003ec3
 8003e30:	08003f45 	.word	0x08003f45
 8003e34:	08003f45 	.word	0x08003f45
 8003e38:	08003f45 	.word	0x08003f45
 8003e3c:	08003f03 	.word	0x08003f03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68b9      	ldr	r1, [r7, #8]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 fa24 	bl	8004294 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	699a      	ldr	r2, [r3, #24]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f042 0208 	orr.w	r2, r2, #8
 8003e5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	699a      	ldr	r2, [r3, #24]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0204 	bic.w	r2, r2, #4
 8003e6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6999      	ldr	r1, [r3, #24]
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	691a      	ldr	r2, [r3, #16]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	619a      	str	r2, [r3, #24]
      break;
 8003e7e:	e064      	b.n	8003f4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68b9      	ldr	r1, [r7, #8]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 fa74 	bl	8004374 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	699a      	ldr	r2, [r3, #24]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	699a      	ldr	r2, [r3, #24]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003eaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6999      	ldr	r1, [r3, #24]
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	021a      	lsls	r2, r3, #8
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	619a      	str	r2, [r3, #24]
      break;
 8003ec0:	e043      	b.n	8003f4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68b9      	ldr	r1, [r7, #8]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 fac9 	bl	8004460 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	69da      	ldr	r2, [r3, #28]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f042 0208 	orr.w	r2, r2, #8
 8003edc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	69da      	ldr	r2, [r3, #28]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 0204 	bic.w	r2, r2, #4
 8003eec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	69d9      	ldr	r1, [r3, #28]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	691a      	ldr	r2, [r3, #16]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	61da      	str	r2, [r3, #28]
      break;
 8003f00:	e023      	b.n	8003f4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68b9      	ldr	r1, [r7, #8]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 fb1d 	bl	8004548 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	69da      	ldr	r2, [r3, #28]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	69da      	ldr	r2, [r3, #28]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	69d9      	ldr	r1, [r3, #28]
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	021a      	lsls	r2, r3, #8
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	61da      	str	r2, [r3, #28]
      break;
 8003f42:	e002      	b.n	8003f4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	75fb      	strb	r3, [r7, #23]
      break;
 8003f48:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3718      	adds	r7, #24
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f66:	2300      	movs	r3, #0
 8003f68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d101      	bne.n	8003f78 <HAL_TIM_ConfigClockSource+0x1c>
 8003f74:	2302      	movs	r3, #2
 8003f76:	e0b4      	b.n	80040e2 <HAL_TIM_ConfigClockSource+0x186>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2202      	movs	r2, #2
 8003f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003f96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68ba      	ldr	r2, [r7, #8]
 8003fa6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fb0:	d03e      	beq.n	8004030 <HAL_TIM_ConfigClockSource+0xd4>
 8003fb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fb6:	f200 8087 	bhi.w	80040c8 <HAL_TIM_ConfigClockSource+0x16c>
 8003fba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fbe:	f000 8086 	beq.w	80040ce <HAL_TIM_ConfigClockSource+0x172>
 8003fc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fc6:	d87f      	bhi.n	80040c8 <HAL_TIM_ConfigClockSource+0x16c>
 8003fc8:	2b70      	cmp	r3, #112	@ 0x70
 8003fca:	d01a      	beq.n	8004002 <HAL_TIM_ConfigClockSource+0xa6>
 8003fcc:	2b70      	cmp	r3, #112	@ 0x70
 8003fce:	d87b      	bhi.n	80040c8 <HAL_TIM_ConfigClockSource+0x16c>
 8003fd0:	2b60      	cmp	r3, #96	@ 0x60
 8003fd2:	d050      	beq.n	8004076 <HAL_TIM_ConfigClockSource+0x11a>
 8003fd4:	2b60      	cmp	r3, #96	@ 0x60
 8003fd6:	d877      	bhi.n	80040c8 <HAL_TIM_ConfigClockSource+0x16c>
 8003fd8:	2b50      	cmp	r3, #80	@ 0x50
 8003fda:	d03c      	beq.n	8004056 <HAL_TIM_ConfigClockSource+0xfa>
 8003fdc:	2b50      	cmp	r3, #80	@ 0x50
 8003fde:	d873      	bhi.n	80040c8 <HAL_TIM_ConfigClockSource+0x16c>
 8003fe0:	2b40      	cmp	r3, #64	@ 0x40
 8003fe2:	d058      	beq.n	8004096 <HAL_TIM_ConfigClockSource+0x13a>
 8003fe4:	2b40      	cmp	r3, #64	@ 0x40
 8003fe6:	d86f      	bhi.n	80040c8 <HAL_TIM_ConfigClockSource+0x16c>
 8003fe8:	2b30      	cmp	r3, #48	@ 0x30
 8003fea:	d064      	beq.n	80040b6 <HAL_TIM_ConfigClockSource+0x15a>
 8003fec:	2b30      	cmp	r3, #48	@ 0x30
 8003fee:	d86b      	bhi.n	80040c8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ff0:	2b20      	cmp	r3, #32
 8003ff2:	d060      	beq.n	80040b6 <HAL_TIM_ConfigClockSource+0x15a>
 8003ff4:	2b20      	cmp	r3, #32
 8003ff6:	d867      	bhi.n	80040c8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d05c      	beq.n	80040b6 <HAL_TIM_ConfigClockSource+0x15a>
 8003ffc:	2b10      	cmp	r3, #16
 8003ffe:	d05a      	beq.n	80040b6 <HAL_TIM_ConfigClockSource+0x15a>
 8004000:	e062      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004012:	f000 fb69 	bl	80046e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004024:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	609a      	str	r2, [r3, #8]
      break;
 800402e:	e04f      	b.n	80040d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004040:	f000 fb52 	bl	80046e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689a      	ldr	r2, [r3, #8]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004052:	609a      	str	r2, [r3, #8]
      break;
 8004054:	e03c      	b.n	80040d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004062:	461a      	mov	r2, r3
 8004064:	f000 fac6 	bl	80045f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2150      	movs	r1, #80	@ 0x50
 800406e:	4618      	mov	r0, r3
 8004070:	f000 fb1f 	bl	80046b2 <TIM_ITRx_SetConfig>
      break;
 8004074:	e02c      	b.n	80040d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004082:	461a      	mov	r2, r3
 8004084:	f000 fae5 	bl	8004652 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2160      	movs	r1, #96	@ 0x60
 800408e:	4618      	mov	r0, r3
 8004090:	f000 fb0f 	bl	80046b2 <TIM_ITRx_SetConfig>
      break;
 8004094:	e01c      	b.n	80040d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040a2:	461a      	mov	r2, r3
 80040a4:	f000 faa6 	bl	80045f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2140      	movs	r1, #64	@ 0x40
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 faff 	bl	80046b2 <TIM_ITRx_SetConfig>
      break;
 80040b4:	e00c      	b.n	80040d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4619      	mov	r1, r3
 80040c0:	4610      	mov	r0, r2
 80040c2:	f000 faf6 	bl	80046b2 <TIM_ITRx_SetConfig>
      break;
 80040c6:	e003      	b.n	80040d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	73fb      	strb	r3, [r7, #15]
      break;
 80040cc:	e000      	b.n	80040d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80040ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80040e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b083      	sub	sp, #12
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040f2:	bf00      	nop
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040fe:	b480      	push	{r7}
 8004100:	b083      	sub	sp, #12
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800411a:	bf00      	nop
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004126:	b480      	push	{r7}
 8004128:	b083      	sub	sp, #12
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800412e:	bf00      	nop
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
	...

0800413c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a46      	ldr	r2, [pc, #280]	@ (8004268 <TIM_Base_SetConfig+0x12c>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d013      	beq.n	800417c <TIM_Base_SetConfig+0x40>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800415a:	d00f      	beq.n	800417c <TIM_Base_SetConfig+0x40>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a43      	ldr	r2, [pc, #268]	@ (800426c <TIM_Base_SetConfig+0x130>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d00b      	beq.n	800417c <TIM_Base_SetConfig+0x40>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a42      	ldr	r2, [pc, #264]	@ (8004270 <TIM_Base_SetConfig+0x134>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d007      	beq.n	800417c <TIM_Base_SetConfig+0x40>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a41      	ldr	r2, [pc, #260]	@ (8004274 <TIM_Base_SetConfig+0x138>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d003      	beq.n	800417c <TIM_Base_SetConfig+0x40>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a40      	ldr	r2, [pc, #256]	@ (8004278 <TIM_Base_SetConfig+0x13c>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d108      	bne.n	800418e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004182:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	4313      	orrs	r3, r2
 800418c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a35      	ldr	r2, [pc, #212]	@ (8004268 <TIM_Base_SetConfig+0x12c>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d02b      	beq.n	80041ee <TIM_Base_SetConfig+0xb2>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800419c:	d027      	beq.n	80041ee <TIM_Base_SetConfig+0xb2>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a32      	ldr	r2, [pc, #200]	@ (800426c <TIM_Base_SetConfig+0x130>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d023      	beq.n	80041ee <TIM_Base_SetConfig+0xb2>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a31      	ldr	r2, [pc, #196]	@ (8004270 <TIM_Base_SetConfig+0x134>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d01f      	beq.n	80041ee <TIM_Base_SetConfig+0xb2>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a30      	ldr	r2, [pc, #192]	@ (8004274 <TIM_Base_SetConfig+0x138>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d01b      	beq.n	80041ee <TIM_Base_SetConfig+0xb2>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a2f      	ldr	r2, [pc, #188]	@ (8004278 <TIM_Base_SetConfig+0x13c>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d017      	beq.n	80041ee <TIM_Base_SetConfig+0xb2>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a2e      	ldr	r2, [pc, #184]	@ (800427c <TIM_Base_SetConfig+0x140>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d013      	beq.n	80041ee <TIM_Base_SetConfig+0xb2>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a2d      	ldr	r2, [pc, #180]	@ (8004280 <TIM_Base_SetConfig+0x144>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d00f      	beq.n	80041ee <TIM_Base_SetConfig+0xb2>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a2c      	ldr	r2, [pc, #176]	@ (8004284 <TIM_Base_SetConfig+0x148>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d00b      	beq.n	80041ee <TIM_Base_SetConfig+0xb2>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a2b      	ldr	r2, [pc, #172]	@ (8004288 <TIM_Base_SetConfig+0x14c>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d007      	beq.n	80041ee <TIM_Base_SetConfig+0xb2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a2a      	ldr	r2, [pc, #168]	@ (800428c <TIM_Base_SetConfig+0x150>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d003      	beq.n	80041ee <TIM_Base_SetConfig+0xb2>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a29      	ldr	r2, [pc, #164]	@ (8004290 <TIM_Base_SetConfig+0x154>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d108      	bne.n	8004200 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	4313      	orrs	r3, r2
 800420c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a10      	ldr	r2, [pc, #64]	@ (8004268 <TIM_Base_SetConfig+0x12c>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d003      	beq.n	8004234 <TIM_Base_SetConfig+0xf8>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a12      	ldr	r2, [pc, #72]	@ (8004278 <TIM_Base_SetConfig+0x13c>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d103      	bne.n	800423c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	691a      	ldr	r2, [r3, #16]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b01      	cmp	r3, #1
 800424c:	d105      	bne.n	800425a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	f023 0201 	bic.w	r2, r3, #1
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	611a      	str	r2, [r3, #16]
  }
}
 800425a:	bf00      	nop
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	40010000 	.word	0x40010000
 800426c:	40000400 	.word	0x40000400
 8004270:	40000800 	.word	0x40000800
 8004274:	40000c00 	.word	0x40000c00
 8004278:	40010400 	.word	0x40010400
 800427c:	40014000 	.word	0x40014000
 8004280:	40014400 	.word	0x40014400
 8004284:	40014800 	.word	0x40014800
 8004288:	40001800 	.word	0x40001800
 800428c:	40001c00 	.word	0x40001c00
 8004290:	40002000 	.word	0x40002000

08004294 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004294:	b480      	push	{r7}
 8004296:	b087      	sub	sp, #28
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	f023 0201 	bic.w	r2, r3, #1
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f023 0303 	bic.w	r3, r3, #3
 80042ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f023 0302 	bic.w	r3, r3, #2
 80042dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a20      	ldr	r2, [pc, #128]	@ (800436c <TIM_OC1_SetConfig+0xd8>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d003      	beq.n	80042f8 <TIM_OC1_SetConfig+0x64>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a1f      	ldr	r2, [pc, #124]	@ (8004370 <TIM_OC1_SetConfig+0xdc>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d10c      	bne.n	8004312 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	f023 0308 	bic.w	r3, r3, #8
 80042fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	4313      	orrs	r3, r2
 8004308:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f023 0304 	bic.w	r3, r3, #4
 8004310:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a15      	ldr	r2, [pc, #84]	@ (800436c <TIM_OC1_SetConfig+0xd8>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d003      	beq.n	8004322 <TIM_OC1_SetConfig+0x8e>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a14      	ldr	r2, [pc, #80]	@ (8004370 <TIM_OC1_SetConfig+0xdc>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d111      	bne.n	8004346 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004328:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004330:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	4313      	orrs	r3, r2
 800433a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	4313      	orrs	r3, r2
 8004344:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	621a      	str	r2, [r3, #32]
}
 8004360:	bf00      	nop
 8004362:	371c      	adds	r7, #28
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr
 800436c:	40010000 	.word	0x40010000
 8004370:	40010400 	.word	0x40010400

08004374 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004374:	b480      	push	{r7}
 8004376:	b087      	sub	sp, #28
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a1b      	ldr	r3, [r3, #32]
 8004388:	f023 0210 	bic.w	r2, r3, #16
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	021b      	lsls	r3, r3, #8
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	f023 0320 	bic.w	r3, r3, #32
 80043be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	011b      	lsls	r3, r3, #4
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a22      	ldr	r2, [pc, #136]	@ (8004458 <TIM_OC2_SetConfig+0xe4>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d003      	beq.n	80043dc <TIM_OC2_SetConfig+0x68>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a21      	ldr	r2, [pc, #132]	@ (800445c <TIM_OC2_SetConfig+0xe8>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d10d      	bne.n	80043f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	011b      	lsls	r3, r3, #4
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a17      	ldr	r2, [pc, #92]	@ (8004458 <TIM_OC2_SetConfig+0xe4>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d003      	beq.n	8004408 <TIM_OC2_SetConfig+0x94>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a16      	ldr	r2, [pc, #88]	@ (800445c <TIM_OC2_SetConfig+0xe8>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d113      	bne.n	8004430 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800440e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004416:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	4313      	orrs	r3, r2
 8004422:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	4313      	orrs	r3, r2
 800442e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	621a      	str	r2, [r3, #32]
}
 800444a:	bf00      	nop
 800444c:	371c      	adds	r7, #28
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	40010000 	.word	0x40010000
 800445c:	40010400 	.word	0x40010400

08004460 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004460:	b480      	push	{r7}
 8004462:	b087      	sub	sp, #28
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800448e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f023 0303 	bic.w	r3, r3, #3
 8004496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	4313      	orrs	r3, r2
 80044a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80044a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	021b      	lsls	r3, r3, #8
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a21      	ldr	r2, [pc, #132]	@ (8004540 <TIM_OC3_SetConfig+0xe0>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d003      	beq.n	80044c6 <TIM_OC3_SetConfig+0x66>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a20      	ldr	r2, [pc, #128]	@ (8004544 <TIM_OC3_SetConfig+0xe4>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d10d      	bne.n	80044e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80044cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	021b      	lsls	r3, r3, #8
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80044e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a16      	ldr	r2, [pc, #88]	@ (8004540 <TIM_OC3_SetConfig+0xe0>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d003      	beq.n	80044f2 <TIM_OC3_SetConfig+0x92>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a15      	ldr	r2, [pc, #84]	@ (8004544 <TIM_OC3_SetConfig+0xe4>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d113      	bne.n	800451a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80044f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004500:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	011b      	lsls	r3, r3, #4
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	4313      	orrs	r3, r2
 800450c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	011b      	lsls	r3, r3, #4
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	4313      	orrs	r3, r2
 8004518:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	621a      	str	r2, [r3, #32]
}
 8004534:	bf00      	nop
 8004536:	371c      	adds	r7, #28
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr
 8004540:	40010000 	.word	0x40010000
 8004544:	40010400 	.word	0x40010400

08004548 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004548:	b480      	push	{r7}
 800454a:	b087      	sub	sp, #28
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	69db      	ldr	r3, [r3, #28]
 800456e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800457e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	021b      	lsls	r3, r3, #8
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	4313      	orrs	r3, r2
 800458a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004592:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	031b      	lsls	r3, r3, #12
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	4313      	orrs	r3, r2
 800459e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a12      	ldr	r2, [pc, #72]	@ (80045ec <TIM_OC4_SetConfig+0xa4>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d003      	beq.n	80045b0 <TIM_OC4_SetConfig+0x68>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a11      	ldr	r2, [pc, #68]	@ (80045f0 <TIM_OC4_SetConfig+0xa8>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d109      	bne.n	80045c4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	695b      	ldr	r3, [r3, #20]
 80045bc:	019b      	lsls	r3, r3, #6
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	621a      	str	r2, [r3, #32]
}
 80045de:	bf00      	nop
 80045e0:	371c      	adds	r7, #28
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	40010000 	.word	0x40010000
 80045f0:	40010400 	.word	0x40010400

080045f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b087      	sub	sp, #28
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	f023 0201 	bic.w	r2, r3, #1
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800461e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	011b      	lsls	r3, r3, #4
 8004624:	693a      	ldr	r2, [r7, #16]
 8004626:	4313      	orrs	r3, r2
 8004628:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f023 030a 	bic.w	r3, r3, #10
 8004630:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	4313      	orrs	r3, r2
 8004638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	621a      	str	r2, [r3, #32]
}
 8004646:	bf00      	nop
 8004648:	371c      	adds	r7, #28
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004652:	b480      	push	{r7}
 8004654:	b087      	sub	sp, #28
 8004656:	af00      	add	r7, sp, #0
 8004658:	60f8      	str	r0, [r7, #12]
 800465a:	60b9      	str	r1, [r7, #8]
 800465c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	f023 0210 	bic.w	r2, r3, #16
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800467c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	031b      	lsls	r3, r3, #12
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4313      	orrs	r3, r2
 8004686:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800468e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	011b      	lsls	r3, r3, #4
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	4313      	orrs	r3, r2
 8004698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	621a      	str	r2, [r3, #32]
}
 80046a6:	bf00      	nop
 80046a8:	371c      	adds	r7, #28
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b085      	sub	sp, #20
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
 80046ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f043 0307 	orr.w	r3, r3, #7
 80046d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	609a      	str	r2, [r3, #8]
}
 80046dc:	bf00      	nop
 80046de:	3714      	adds	r7, #20
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b087      	sub	sp, #28
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
 80046f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004702:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	021a      	lsls	r2, r3, #8
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	431a      	orrs	r2, r3
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	4313      	orrs	r3, r2
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	4313      	orrs	r3, r2
 8004714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	609a      	str	r2, [r3, #8]
}
 800471c:	bf00      	nop
 800471e:	371c      	adds	r7, #28
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004728:	b480      	push	{r7}
 800472a:	b087      	sub	sp, #28
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	f003 031f 	and.w	r3, r3, #31
 800473a:	2201      	movs	r2, #1
 800473c:	fa02 f303 	lsl.w	r3, r2, r3
 8004740:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6a1a      	ldr	r2, [r3, #32]
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	43db      	mvns	r3, r3
 800474a:	401a      	ands	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6a1a      	ldr	r2, [r3, #32]
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	f003 031f 	and.w	r3, r3, #31
 800475a:	6879      	ldr	r1, [r7, #4]
 800475c:	fa01 f303 	lsl.w	r3, r1, r3
 8004760:	431a      	orrs	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	621a      	str	r2, [r3, #32]
}
 8004766:	bf00      	nop
 8004768:	371c      	adds	r7, #28
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
	...

08004774 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004784:	2b01      	cmp	r3, #1
 8004786:	d101      	bne.n	800478c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004788:	2302      	movs	r3, #2
 800478a:	e05a      	b.n	8004842 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2202      	movs	r2, #2
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a21      	ldr	r2, [pc, #132]	@ (8004850 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d022      	beq.n	8004816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047d8:	d01d      	beq.n	8004816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a1d      	ldr	r2, [pc, #116]	@ (8004854 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d018      	beq.n	8004816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a1b      	ldr	r2, [pc, #108]	@ (8004858 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d013      	beq.n	8004816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a1a      	ldr	r2, [pc, #104]	@ (800485c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d00e      	beq.n	8004816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a18      	ldr	r2, [pc, #96]	@ (8004860 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d009      	beq.n	8004816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a17      	ldr	r2, [pc, #92]	@ (8004864 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d004      	beq.n	8004816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a15      	ldr	r2, [pc, #84]	@ (8004868 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d10c      	bne.n	8004830 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800481c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	4313      	orrs	r3, r2
 8004826:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68ba      	ldr	r2, [r7, #8]
 800482e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	40010000 	.word	0x40010000
 8004854:	40000400 	.word	0x40000400
 8004858:	40000800 	.word	0x40000800
 800485c:	40000c00 	.word	0x40000c00
 8004860:	40010400 	.word	0x40010400
 8004864:	40014000 	.word	0x40014000
 8004868:	40001800 	.word	0x40001800

0800486c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e042      	b.n	800492c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d106      	bne.n	80048c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7fd fc62 	bl	8002184 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2224      	movs	r2, #36	@ 0x24
 80048c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 fd69 	bl	80053b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	691a      	ldr	r2, [r3, #16]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	695a      	ldr	r2, [r3, #20]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80048fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68da      	ldr	r2, [r3, #12]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800490c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2220      	movs	r2, #32
 8004918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2220      	movs	r2, #32
 8004920:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3708      	adds	r7, #8
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b08a      	sub	sp, #40	@ 0x28
 8004938:	af02      	add	r7, sp, #8
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	603b      	str	r3, [r7, #0]
 8004940:	4613      	mov	r3, r2
 8004942:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004944:	2300      	movs	r3, #0
 8004946:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b20      	cmp	r3, #32
 8004952:	d175      	bne.n	8004a40 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d002      	beq.n	8004960 <HAL_UART_Transmit+0x2c>
 800495a:	88fb      	ldrh	r3, [r7, #6]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d101      	bne.n	8004964 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e06e      	b.n	8004a42 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2221      	movs	r2, #33	@ 0x21
 800496e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004972:	f7fd fe9d 	bl	80026b0 <HAL_GetTick>
 8004976:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	88fa      	ldrh	r2, [r7, #6]
 800497c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	88fa      	ldrh	r2, [r7, #6]
 8004982:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800498c:	d108      	bne.n	80049a0 <HAL_UART_Transmit+0x6c>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d104      	bne.n	80049a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004996:	2300      	movs	r3, #0
 8004998:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	61bb      	str	r3, [r7, #24]
 800499e:	e003      	b.n	80049a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049a4:	2300      	movs	r3, #0
 80049a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049a8:	e02e      	b.n	8004a08 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	2200      	movs	r2, #0
 80049b2:	2180      	movs	r1, #128	@ 0x80
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f000 fb05 	bl	8004fc4 <UART_WaitOnFlagUntilTimeout>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d005      	beq.n	80049cc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e03a      	b.n	8004a42 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10b      	bne.n	80049ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	881b      	ldrh	r3, [r3, #0]
 80049d6:	461a      	mov	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	3302      	adds	r3, #2
 80049e6:	61bb      	str	r3, [r7, #24]
 80049e8:	e007      	b.n	80049fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	781a      	ldrb	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	3301      	adds	r3, #1
 80049f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	3b01      	subs	r3, #1
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1cb      	bne.n	80049aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	2140      	movs	r1, #64	@ 0x40
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f000 fad1 	bl	8004fc4 <UART_WaitOnFlagUntilTimeout>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d005      	beq.n	8004a34 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e006      	b.n	8004a42 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2220      	movs	r2, #32
 8004a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	e000      	b.n	8004a42 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004a40:	2302      	movs	r3, #2
  }
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3720      	adds	r7, #32
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
	...

08004a4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b0ba      	sub	sp, #232	@ 0xe8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004a72:	2300      	movs	r3, #0
 8004a74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a82:	f003 030f 	and.w	r3, r3, #15
 8004a86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004a8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10f      	bne.n	8004ab2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a96:	f003 0320 	and.w	r3, r3, #32
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d009      	beq.n	8004ab2 <HAL_UART_IRQHandler+0x66>
 8004a9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004aa2:	f003 0320 	and.w	r3, r3, #32
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 fbc2 	bl	8005234 <UART_Receive_IT>
      return;
 8004ab0:	e25b      	b.n	8004f6a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004ab2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f000 80de 	beq.w	8004c78 <HAL_UART_IRQHandler+0x22c>
 8004abc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d106      	bne.n	8004ad6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004acc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f000 80d1 	beq.w	8004c78 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00b      	beq.n	8004afa <HAL_UART_IRQHandler+0xae>
 8004ae2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ae6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d005      	beq.n	8004afa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004af2:	f043 0201 	orr.w	r2, r3, #1
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004afe:	f003 0304 	and.w	r3, r3, #4
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00b      	beq.n	8004b1e <HAL_UART_IRQHandler+0xd2>
 8004b06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d005      	beq.n	8004b1e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b16:	f043 0202 	orr.w	r2, r3, #2
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00b      	beq.n	8004b42 <HAL_UART_IRQHandler+0xf6>
 8004b2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d005      	beq.n	8004b42 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b3a:	f043 0204 	orr.w	r2, r3, #4
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b46:	f003 0308 	and.w	r3, r3, #8
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d011      	beq.n	8004b72 <HAL_UART_IRQHandler+0x126>
 8004b4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b52:	f003 0320 	and.w	r3, r3, #32
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d105      	bne.n	8004b66 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d005      	beq.n	8004b72 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b6a:	f043 0208 	orr.w	r2, r3, #8
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	f000 81f2 	beq.w	8004f60 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b80:	f003 0320 	and.w	r3, r3, #32
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d008      	beq.n	8004b9a <HAL_UART_IRQHandler+0x14e>
 8004b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b8c:	f003 0320 	and.w	r3, r3, #32
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d002      	beq.n	8004b9a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 fb4d 	bl	8005234 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ba4:	2b40      	cmp	r3, #64	@ 0x40
 8004ba6:	bf0c      	ite	eq
 8004ba8:	2301      	moveq	r3, #1
 8004baa:	2300      	movne	r3, #0
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bb6:	f003 0308 	and.w	r3, r3, #8
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d103      	bne.n	8004bc6 <HAL_UART_IRQHandler+0x17a>
 8004bbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d04f      	beq.n	8004c66 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 fa55 	bl	8005076 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bd6:	2b40      	cmp	r3, #64	@ 0x40
 8004bd8:	d141      	bne.n	8004c5e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	3314      	adds	r3, #20
 8004be0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004be8:	e853 3f00 	ldrex	r3, [r3]
 8004bec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004bf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004bf4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bf8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	3314      	adds	r3, #20
 8004c02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004c06:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004c0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004c12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004c16:	e841 2300 	strex	r3, r2, [r1]
 8004c1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004c1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1d9      	bne.n	8004bda <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d013      	beq.n	8004c56 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c32:	4a7e      	ldr	r2, [pc, #504]	@ (8004e2c <HAL_UART_IRQHandler+0x3e0>)
 8004c34:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7fd fee9 	bl	8002a12 <HAL_DMA_Abort_IT>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d016      	beq.n	8004c74 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004c50:	4610      	mov	r0, r2
 8004c52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c54:	e00e      	b.n	8004c74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f99e 	bl	8004f98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c5c:	e00a      	b.n	8004c74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f99a 	bl	8004f98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c64:	e006      	b.n	8004c74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f996 	bl	8004f98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004c72:	e175      	b.n	8004f60 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c74:	bf00      	nop
    return;
 8004c76:	e173      	b.n	8004f60 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	f040 814f 	bne.w	8004f20 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c86:	f003 0310 	and.w	r3, r3, #16
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f000 8148 	beq.w	8004f20 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c94:	f003 0310 	and.w	r3, r3, #16
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f000 8141 	beq.w	8004f20 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	60bb      	str	r3, [r7, #8]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	60bb      	str	r3, [r7, #8]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	60bb      	str	r3, [r7, #8]
 8004cb2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cbe:	2b40      	cmp	r3, #64	@ 0x40
 8004cc0:	f040 80b6 	bne.w	8004e30 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004cd0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 8145 	beq.w	8004f64 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004cde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	f080 813e 	bcs.w	8004f64 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004cee:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cfa:	f000 8088 	beq.w	8004e0e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	330c      	adds	r3, #12
 8004d04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d08:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004d0c:	e853 3f00 	ldrex	r3, [r3]
 8004d10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004d14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004d18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	330c      	adds	r3, #12
 8004d26:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004d2a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004d2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d32:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004d36:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004d3a:	e841 2300 	strex	r3, r2, [r1]
 8004d3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004d42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1d9      	bne.n	8004cfe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	3314      	adds	r3, #20
 8004d50:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d54:	e853 3f00 	ldrex	r3, [r3]
 8004d58:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004d5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d5c:	f023 0301 	bic.w	r3, r3, #1
 8004d60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	3314      	adds	r3, #20
 8004d6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004d6e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004d72:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d74:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004d76:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004d7a:	e841 2300 	strex	r3, r2, [r1]
 8004d7e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004d80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1e1      	bne.n	8004d4a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	3314      	adds	r3, #20
 8004d8c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d90:	e853 3f00 	ldrex	r3, [r3]
 8004d94:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004d96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	3314      	adds	r3, #20
 8004da6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004daa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004dac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004db0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004db2:	e841 2300 	strex	r3, r2, [r1]
 8004db6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004db8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1e3      	bne.n	8004d86 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	330c      	adds	r3, #12
 8004dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dd6:	e853 3f00 	ldrex	r3, [r3]
 8004dda:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004ddc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004dde:	f023 0310 	bic.w	r3, r3, #16
 8004de2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	330c      	adds	r3, #12
 8004dec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004df0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004df2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004df6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004df8:	e841 2300 	strex	r3, r2, [r1]
 8004dfc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004dfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1e3      	bne.n	8004dcc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7fd fd92 	bl	8002932 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2202      	movs	r2, #2
 8004e12:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	4619      	mov	r1, r3
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 f8c1 	bl	8004fac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e2a:	e09b      	b.n	8004f64 <HAL_UART_IRQHandler+0x518>
 8004e2c:	0800513d 	.word	0x0800513d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	f000 808e 	beq.w	8004f68 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004e4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f000 8089 	beq.w	8004f68 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	330c      	adds	r3, #12
 8004e5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e60:	e853 3f00 	ldrex	r3, [r3]
 8004e64:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e6c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	330c      	adds	r3, #12
 8004e76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004e7a:	647a      	str	r2, [r7, #68]	@ 0x44
 8004e7c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e82:	e841 2300 	strex	r3, r2, [r1]
 8004e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1e3      	bne.n	8004e56 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3314      	adds	r3, #20
 8004e94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e98:	e853 3f00 	ldrex	r3, [r3]
 8004e9c:	623b      	str	r3, [r7, #32]
   return(result);
 8004e9e:	6a3b      	ldr	r3, [r7, #32]
 8004ea0:	f023 0301 	bic.w	r3, r3, #1
 8004ea4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	3314      	adds	r3, #20
 8004eae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004eb2:	633a      	str	r2, [r7, #48]	@ 0x30
 8004eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004eb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004eba:	e841 2300 	strex	r3, r2, [r1]
 8004ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1e3      	bne.n	8004e8e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2220      	movs	r2, #32
 8004eca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	330c      	adds	r3, #12
 8004eda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	e853 3f00 	ldrex	r3, [r3]
 8004ee2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f023 0310 	bic.w	r3, r3, #16
 8004eea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	330c      	adds	r3, #12
 8004ef4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004ef8:	61fa      	str	r2, [r7, #28]
 8004efa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efc:	69b9      	ldr	r1, [r7, #24]
 8004efe:	69fa      	ldr	r2, [r7, #28]
 8004f00:	e841 2300 	strex	r3, r2, [r1]
 8004f04:	617b      	str	r3, [r7, #20]
   return(result);
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1e3      	bne.n	8004ed4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2202      	movs	r2, #2
 8004f10:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004f16:	4619      	mov	r1, r3
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 f847 	bl	8004fac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f1e:	e023      	b.n	8004f68 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d009      	beq.n	8004f40 <HAL_UART_IRQHandler+0x4f4>
 8004f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d003      	beq.n	8004f40 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 f913 	bl	8005164 <UART_Transmit_IT>
    return;
 8004f3e:	e014      	b.n	8004f6a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00e      	beq.n	8004f6a <HAL_UART_IRQHandler+0x51e>
 8004f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d008      	beq.n	8004f6a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f953 	bl	8005204 <UART_EndTransmit_IT>
    return;
 8004f5e:	e004      	b.n	8004f6a <HAL_UART_IRQHandler+0x51e>
    return;
 8004f60:	bf00      	nop
 8004f62:	e002      	b.n	8004f6a <HAL_UART_IRQHandler+0x51e>
      return;
 8004f64:	bf00      	nop
 8004f66:	e000      	b.n	8004f6a <HAL_UART_IRQHandler+0x51e>
      return;
 8004f68:	bf00      	nop
  }
}
 8004f6a:	37e8      	adds	r7, #232	@ 0xe8
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	603b      	str	r3, [r7, #0]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fd4:	e03b      	b.n	800504e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fd6:	6a3b      	ldr	r3, [r7, #32]
 8004fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fdc:	d037      	beq.n	800504e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fde:	f7fd fb67 	bl	80026b0 <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	6a3a      	ldr	r2, [r7, #32]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d302      	bcc.n	8004ff4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fee:	6a3b      	ldr	r3, [r7, #32]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e03a      	b.n	800506e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	f003 0304 	and.w	r3, r3, #4
 8005002:	2b00      	cmp	r3, #0
 8005004:	d023      	beq.n	800504e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	2b80      	cmp	r3, #128	@ 0x80
 800500a:	d020      	beq.n	800504e <UART_WaitOnFlagUntilTimeout+0x8a>
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	2b40      	cmp	r3, #64	@ 0x40
 8005010:	d01d      	beq.n	800504e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0308 	and.w	r3, r3, #8
 800501c:	2b08      	cmp	r3, #8
 800501e:	d116      	bne.n	800504e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005020:	2300      	movs	r3, #0
 8005022:	617b      	str	r3, [r7, #20]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	617b      	str	r3, [r7, #20]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	617b      	str	r3, [r7, #20]
 8005034:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f000 f81d 	bl	8005076 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2208      	movs	r2, #8
 8005040:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e00f      	b.n	800506e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	4013      	ands	r3, r2
 8005058:	68ba      	ldr	r2, [r7, #8]
 800505a:	429a      	cmp	r2, r3
 800505c:	bf0c      	ite	eq
 800505e:	2301      	moveq	r3, #1
 8005060:	2300      	movne	r3, #0
 8005062:	b2db      	uxtb	r3, r3
 8005064:	461a      	mov	r2, r3
 8005066:	79fb      	ldrb	r3, [r7, #7]
 8005068:	429a      	cmp	r2, r3
 800506a:	d0b4      	beq.n	8004fd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3718      	adds	r7, #24
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005076:	b480      	push	{r7}
 8005078:	b095      	sub	sp, #84	@ 0x54
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	330c      	adds	r3, #12
 8005084:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005088:	e853 3f00 	ldrex	r3, [r3]
 800508c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800508e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005090:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005094:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	330c      	adds	r3, #12
 800509c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800509e:	643a      	str	r2, [r7, #64]	@ 0x40
 80050a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80050a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050a6:	e841 2300 	strex	r3, r2, [r1]
 80050aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80050ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1e5      	bne.n	800507e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	3314      	adds	r3, #20
 80050b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	e853 3f00 	ldrex	r3, [r3]
 80050c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	f023 0301 	bic.w	r3, r3, #1
 80050c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	3314      	adds	r3, #20
 80050d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050da:	e841 2300 	strex	r3, r2, [r1]
 80050de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80050e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1e5      	bne.n	80050b2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d119      	bne.n	8005122 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	330c      	adds	r3, #12
 80050f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	e853 3f00 	ldrex	r3, [r3]
 80050fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	f023 0310 	bic.w	r3, r3, #16
 8005104:	647b      	str	r3, [r7, #68]	@ 0x44
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	330c      	adds	r3, #12
 800510c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800510e:	61ba      	str	r2, [r7, #24]
 8005110:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005112:	6979      	ldr	r1, [r7, #20]
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	e841 2300 	strex	r3, r2, [r1]
 800511a:	613b      	str	r3, [r7, #16]
   return(result);
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1e5      	bne.n	80050ee <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2220      	movs	r2, #32
 8005126:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005130:	bf00      	nop
 8005132:	3754      	adds	r7, #84	@ 0x54
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005148:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f7ff ff1e 	bl	8004f98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800515c:	bf00      	nop
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005172:	b2db      	uxtb	r3, r3
 8005174:	2b21      	cmp	r3, #33	@ 0x21
 8005176:	d13e      	bne.n	80051f6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005180:	d114      	bne.n	80051ac <UART_Transmit_IT+0x48>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d110      	bne.n	80051ac <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	881b      	ldrh	r3, [r3, #0]
 8005194:	461a      	mov	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800519e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	1c9a      	adds	r2, r3, #2
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	621a      	str	r2, [r3, #32]
 80051aa:	e008      	b.n	80051be <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	1c59      	adds	r1, r3, #1
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	6211      	str	r1, [r2, #32]
 80051b6:	781a      	ldrb	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	3b01      	subs	r3, #1
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	4619      	mov	r1, r3
 80051cc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10f      	bne.n	80051f2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68da      	ldr	r2, [r3, #12]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80051e0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68da      	ldr	r2, [r3, #12]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051f0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80051f2:	2300      	movs	r3, #0
 80051f4:	e000      	b.n	80051f8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80051f6:	2302      	movs	r3, #2
  }
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3714      	adds	r7, #20
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68da      	ldr	r2, [r3, #12]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800521a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2220      	movs	r2, #32
 8005220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f7ff fea3 	bl	8004f70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3708      	adds	r7, #8
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b08c      	sub	sp, #48	@ 0x30
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005242:	b2db      	uxtb	r3, r3
 8005244:	2b22      	cmp	r3, #34	@ 0x22
 8005246:	f040 80ae 	bne.w	80053a6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005252:	d117      	bne.n	8005284 <UART_Receive_IT+0x50>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d113      	bne.n	8005284 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800525c:	2300      	movs	r3, #0
 800525e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005264:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	b29b      	uxth	r3, r3
 800526e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005272:	b29a      	uxth	r2, r3
 8005274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005276:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800527c:	1c9a      	adds	r2, r3, #2
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	629a      	str	r2, [r3, #40]	@ 0x28
 8005282:	e026      	b.n	80052d2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005288:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800528a:	2300      	movs	r3, #0
 800528c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005296:	d007      	beq.n	80052a8 <UART_Receive_IT+0x74>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10a      	bne.n	80052b6 <UART_Receive_IT+0x82>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d106      	bne.n	80052b6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052b2:	701a      	strb	r2, [r3, #0]
 80052b4:	e008      	b.n	80052c8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052c2:	b2da      	uxtb	r2, r3
 80052c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052c6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052cc:	1c5a      	adds	r2, r3, #1
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	3b01      	subs	r3, #1
 80052da:	b29b      	uxth	r3, r3
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	4619      	mov	r1, r3
 80052e0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d15d      	bne.n	80053a2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68da      	ldr	r2, [r3, #12]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f022 0220 	bic.w	r2, r2, #32
 80052f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68da      	ldr	r2, [r3, #12]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005304:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	695a      	ldr	r2, [r3, #20]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f022 0201 	bic.w	r2, r2, #1
 8005314:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2220      	movs	r2, #32
 800531a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005328:	2b01      	cmp	r3, #1
 800532a:	d135      	bne.n	8005398 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	330c      	adds	r3, #12
 8005338:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	e853 3f00 	ldrex	r3, [r3]
 8005340:	613b      	str	r3, [r7, #16]
   return(result);
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	f023 0310 	bic.w	r3, r3, #16
 8005348:	627b      	str	r3, [r7, #36]	@ 0x24
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	330c      	adds	r3, #12
 8005350:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005352:	623a      	str	r2, [r7, #32]
 8005354:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005356:	69f9      	ldr	r1, [r7, #28]
 8005358:	6a3a      	ldr	r2, [r7, #32]
 800535a:	e841 2300 	strex	r3, r2, [r1]
 800535e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1e5      	bne.n	8005332 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0310 	and.w	r3, r3, #16
 8005370:	2b10      	cmp	r3, #16
 8005372:	d10a      	bne.n	800538a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005374:	2300      	movs	r3, #0
 8005376:	60fb      	str	r3, [r7, #12]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	60fb      	str	r3, [r7, #12]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	60fb      	str	r3, [r7, #12]
 8005388:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800538e:	4619      	mov	r1, r3
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f7ff fe0b 	bl	8004fac <HAL_UARTEx_RxEventCallback>
 8005396:	e002      	b.n	800539e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f7ff fdf3 	bl	8004f84 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800539e:	2300      	movs	r3, #0
 80053a0:	e002      	b.n	80053a8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80053a2:	2300      	movs	r3, #0
 80053a4:	e000      	b.n	80053a8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80053a6:	2302      	movs	r3, #2
  }
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3730      	adds	r7, #48	@ 0x30
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053b4:	b0c0      	sub	sp, #256	@ 0x100
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80053c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053cc:	68d9      	ldr	r1, [r3, #12]
 80053ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	ea40 0301 	orr.w	r3, r0, r1
 80053d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053de:	689a      	ldr	r2, [r3, #8]
 80053e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	431a      	orrs	r2, r3
 80053e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	431a      	orrs	r2, r3
 80053f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053f4:	69db      	ldr	r3, [r3, #28]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80053fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005408:	f021 010c 	bic.w	r1, r1, #12
 800540c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005416:	430b      	orrs	r3, r1
 8005418:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800541a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800542a:	6999      	ldr	r1, [r3, #24]
 800542c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	ea40 0301 	orr.w	r3, r0, r1
 8005436:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	4b8f      	ldr	r3, [pc, #572]	@ (800567c <UART_SetConfig+0x2cc>)
 8005440:	429a      	cmp	r2, r3
 8005442:	d005      	beq.n	8005450 <UART_SetConfig+0xa0>
 8005444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	4b8d      	ldr	r3, [pc, #564]	@ (8005680 <UART_SetConfig+0x2d0>)
 800544c:	429a      	cmp	r2, r3
 800544e:	d104      	bne.n	800545a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005450:	f7fe f96c 	bl	800372c <HAL_RCC_GetPCLK2Freq>
 8005454:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005458:	e003      	b.n	8005462 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800545a:	f7fe f953 	bl	8003704 <HAL_RCC_GetPCLK1Freq>
 800545e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005466:	69db      	ldr	r3, [r3, #28]
 8005468:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800546c:	f040 810c 	bne.w	8005688 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005470:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005474:	2200      	movs	r2, #0
 8005476:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800547a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800547e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005482:	4622      	mov	r2, r4
 8005484:	462b      	mov	r3, r5
 8005486:	1891      	adds	r1, r2, r2
 8005488:	65b9      	str	r1, [r7, #88]	@ 0x58
 800548a:	415b      	adcs	r3, r3
 800548c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800548e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005492:	4621      	mov	r1, r4
 8005494:	eb12 0801 	adds.w	r8, r2, r1
 8005498:	4629      	mov	r1, r5
 800549a:	eb43 0901 	adc.w	r9, r3, r1
 800549e:	f04f 0200 	mov.w	r2, #0
 80054a2:	f04f 0300 	mov.w	r3, #0
 80054a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054b2:	4690      	mov	r8, r2
 80054b4:	4699      	mov	r9, r3
 80054b6:	4623      	mov	r3, r4
 80054b8:	eb18 0303 	adds.w	r3, r8, r3
 80054bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80054c0:	462b      	mov	r3, r5
 80054c2:	eb49 0303 	adc.w	r3, r9, r3
 80054c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80054ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80054d6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80054da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80054de:	460b      	mov	r3, r1
 80054e0:	18db      	adds	r3, r3, r3
 80054e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80054e4:	4613      	mov	r3, r2
 80054e6:	eb42 0303 	adc.w	r3, r2, r3
 80054ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80054ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80054f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80054f4:	f7fa febc 	bl	8000270 <__aeabi_uldivmod>
 80054f8:	4602      	mov	r2, r0
 80054fa:	460b      	mov	r3, r1
 80054fc:	4b61      	ldr	r3, [pc, #388]	@ (8005684 <UART_SetConfig+0x2d4>)
 80054fe:	fba3 2302 	umull	r2, r3, r3, r2
 8005502:	095b      	lsrs	r3, r3, #5
 8005504:	011c      	lsls	r4, r3, #4
 8005506:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800550a:	2200      	movs	r2, #0
 800550c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005510:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005514:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005518:	4642      	mov	r2, r8
 800551a:	464b      	mov	r3, r9
 800551c:	1891      	adds	r1, r2, r2
 800551e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005520:	415b      	adcs	r3, r3
 8005522:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005524:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005528:	4641      	mov	r1, r8
 800552a:	eb12 0a01 	adds.w	sl, r2, r1
 800552e:	4649      	mov	r1, r9
 8005530:	eb43 0b01 	adc.w	fp, r3, r1
 8005534:	f04f 0200 	mov.w	r2, #0
 8005538:	f04f 0300 	mov.w	r3, #0
 800553c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005540:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005544:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005548:	4692      	mov	sl, r2
 800554a:	469b      	mov	fp, r3
 800554c:	4643      	mov	r3, r8
 800554e:	eb1a 0303 	adds.w	r3, sl, r3
 8005552:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005556:	464b      	mov	r3, r9
 8005558:	eb4b 0303 	adc.w	r3, fp, r3
 800555c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800556c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005570:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005574:	460b      	mov	r3, r1
 8005576:	18db      	adds	r3, r3, r3
 8005578:	643b      	str	r3, [r7, #64]	@ 0x40
 800557a:	4613      	mov	r3, r2
 800557c:	eb42 0303 	adc.w	r3, r2, r3
 8005580:	647b      	str	r3, [r7, #68]	@ 0x44
 8005582:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005586:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800558a:	f7fa fe71 	bl	8000270 <__aeabi_uldivmod>
 800558e:	4602      	mov	r2, r0
 8005590:	460b      	mov	r3, r1
 8005592:	4611      	mov	r1, r2
 8005594:	4b3b      	ldr	r3, [pc, #236]	@ (8005684 <UART_SetConfig+0x2d4>)
 8005596:	fba3 2301 	umull	r2, r3, r3, r1
 800559a:	095b      	lsrs	r3, r3, #5
 800559c:	2264      	movs	r2, #100	@ 0x64
 800559e:	fb02 f303 	mul.w	r3, r2, r3
 80055a2:	1acb      	subs	r3, r1, r3
 80055a4:	00db      	lsls	r3, r3, #3
 80055a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80055aa:	4b36      	ldr	r3, [pc, #216]	@ (8005684 <UART_SetConfig+0x2d4>)
 80055ac:	fba3 2302 	umull	r2, r3, r3, r2
 80055b0:	095b      	lsrs	r3, r3, #5
 80055b2:	005b      	lsls	r3, r3, #1
 80055b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80055b8:	441c      	add	r4, r3
 80055ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055be:	2200      	movs	r2, #0
 80055c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80055c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80055c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80055cc:	4642      	mov	r2, r8
 80055ce:	464b      	mov	r3, r9
 80055d0:	1891      	adds	r1, r2, r2
 80055d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80055d4:	415b      	adcs	r3, r3
 80055d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80055dc:	4641      	mov	r1, r8
 80055de:	1851      	adds	r1, r2, r1
 80055e0:	6339      	str	r1, [r7, #48]	@ 0x30
 80055e2:	4649      	mov	r1, r9
 80055e4:	414b      	adcs	r3, r1
 80055e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80055e8:	f04f 0200 	mov.w	r2, #0
 80055ec:	f04f 0300 	mov.w	r3, #0
 80055f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80055f4:	4659      	mov	r1, fp
 80055f6:	00cb      	lsls	r3, r1, #3
 80055f8:	4651      	mov	r1, sl
 80055fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055fe:	4651      	mov	r1, sl
 8005600:	00ca      	lsls	r2, r1, #3
 8005602:	4610      	mov	r0, r2
 8005604:	4619      	mov	r1, r3
 8005606:	4603      	mov	r3, r0
 8005608:	4642      	mov	r2, r8
 800560a:	189b      	adds	r3, r3, r2
 800560c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005610:	464b      	mov	r3, r9
 8005612:	460a      	mov	r2, r1
 8005614:	eb42 0303 	adc.w	r3, r2, r3
 8005618:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800561c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005628:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800562c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005630:	460b      	mov	r3, r1
 8005632:	18db      	adds	r3, r3, r3
 8005634:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005636:	4613      	mov	r3, r2
 8005638:	eb42 0303 	adc.w	r3, r2, r3
 800563c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800563e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005642:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005646:	f7fa fe13 	bl	8000270 <__aeabi_uldivmod>
 800564a:	4602      	mov	r2, r0
 800564c:	460b      	mov	r3, r1
 800564e:	4b0d      	ldr	r3, [pc, #52]	@ (8005684 <UART_SetConfig+0x2d4>)
 8005650:	fba3 1302 	umull	r1, r3, r3, r2
 8005654:	095b      	lsrs	r3, r3, #5
 8005656:	2164      	movs	r1, #100	@ 0x64
 8005658:	fb01 f303 	mul.w	r3, r1, r3
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	00db      	lsls	r3, r3, #3
 8005660:	3332      	adds	r3, #50	@ 0x32
 8005662:	4a08      	ldr	r2, [pc, #32]	@ (8005684 <UART_SetConfig+0x2d4>)
 8005664:	fba2 2303 	umull	r2, r3, r2, r3
 8005668:	095b      	lsrs	r3, r3, #5
 800566a:	f003 0207 	and.w	r2, r3, #7
 800566e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4422      	add	r2, r4
 8005676:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005678:	e106      	b.n	8005888 <UART_SetConfig+0x4d8>
 800567a:	bf00      	nop
 800567c:	40011000 	.word	0x40011000
 8005680:	40011400 	.word	0x40011400
 8005684:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005688:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800568c:	2200      	movs	r2, #0
 800568e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005692:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005696:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800569a:	4642      	mov	r2, r8
 800569c:	464b      	mov	r3, r9
 800569e:	1891      	adds	r1, r2, r2
 80056a0:	6239      	str	r1, [r7, #32]
 80056a2:	415b      	adcs	r3, r3
 80056a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80056a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80056aa:	4641      	mov	r1, r8
 80056ac:	1854      	adds	r4, r2, r1
 80056ae:	4649      	mov	r1, r9
 80056b0:	eb43 0501 	adc.w	r5, r3, r1
 80056b4:	f04f 0200 	mov.w	r2, #0
 80056b8:	f04f 0300 	mov.w	r3, #0
 80056bc:	00eb      	lsls	r3, r5, #3
 80056be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056c2:	00e2      	lsls	r2, r4, #3
 80056c4:	4614      	mov	r4, r2
 80056c6:	461d      	mov	r5, r3
 80056c8:	4643      	mov	r3, r8
 80056ca:	18e3      	adds	r3, r4, r3
 80056cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80056d0:	464b      	mov	r3, r9
 80056d2:	eb45 0303 	adc.w	r3, r5, r3
 80056d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80056da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80056e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80056ea:	f04f 0200 	mov.w	r2, #0
 80056ee:	f04f 0300 	mov.w	r3, #0
 80056f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80056f6:	4629      	mov	r1, r5
 80056f8:	008b      	lsls	r3, r1, #2
 80056fa:	4621      	mov	r1, r4
 80056fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005700:	4621      	mov	r1, r4
 8005702:	008a      	lsls	r2, r1, #2
 8005704:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005708:	f7fa fdb2 	bl	8000270 <__aeabi_uldivmod>
 800570c:	4602      	mov	r2, r0
 800570e:	460b      	mov	r3, r1
 8005710:	4b60      	ldr	r3, [pc, #384]	@ (8005894 <UART_SetConfig+0x4e4>)
 8005712:	fba3 2302 	umull	r2, r3, r3, r2
 8005716:	095b      	lsrs	r3, r3, #5
 8005718:	011c      	lsls	r4, r3, #4
 800571a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800571e:	2200      	movs	r2, #0
 8005720:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005724:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005728:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800572c:	4642      	mov	r2, r8
 800572e:	464b      	mov	r3, r9
 8005730:	1891      	adds	r1, r2, r2
 8005732:	61b9      	str	r1, [r7, #24]
 8005734:	415b      	adcs	r3, r3
 8005736:	61fb      	str	r3, [r7, #28]
 8005738:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800573c:	4641      	mov	r1, r8
 800573e:	1851      	adds	r1, r2, r1
 8005740:	6139      	str	r1, [r7, #16]
 8005742:	4649      	mov	r1, r9
 8005744:	414b      	adcs	r3, r1
 8005746:	617b      	str	r3, [r7, #20]
 8005748:	f04f 0200 	mov.w	r2, #0
 800574c:	f04f 0300 	mov.w	r3, #0
 8005750:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005754:	4659      	mov	r1, fp
 8005756:	00cb      	lsls	r3, r1, #3
 8005758:	4651      	mov	r1, sl
 800575a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800575e:	4651      	mov	r1, sl
 8005760:	00ca      	lsls	r2, r1, #3
 8005762:	4610      	mov	r0, r2
 8005764:	4619      	mov	r1, r3
 8005766:	4603      	mov	r3, r0
 8005768:	4642      	mov	r2, r8
 800576a:	189b      	adds	r3, r3, r2
 800576c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005770:	464b      	mov	r3, r9
 8005772:	460a      	mov	r2, r1
 8005774:	eb42 0303 	adc.w	r3, r2, r3
 8005778:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800577c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005786:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005788:	f04f 0200 	mov.w	r2, #0
 800578c:	f04f 0300 	mov.w	r3, #0
 8005790:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005794:	4649      	mov	r1, r9
 8005796:	008b      	lsls	r3, r1, #2
 8005798:	4641      	mov	r1, r8
 800579a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800579e:	4641      	mov	r1, r8
 80057a0:	008a      	lsls	r2, r1, #2
 80057a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80057a6:	f7fa fd63 	bl	8000270 <__aeabi_uldivmod>
 80057aa:	4602      	mov	r2, r0
 80057ac:	460b      	mov	r3, r1
 80057ae:	4611      	mov	r1, r2
 80057b0:	4b38      	ldr	r3, [pc, #224]	@ (8005894 <UART_SetConfig+0x4e4>)
 80057b2:	fba3 2301 	umull	r2, r3, r3, r1
 80057b6:	095b      	lsrs	r3, r3, #5
 80057b8:	2264      	movs	r2, #100	@ 0x64
 80057ba:	fb02 f303 	mul.w	r3, r2, r3
 80057be:	1acb      	subs	r3, r1, r3
 80057c0:	011b      	lsls	r3, r3, #4
 80057c2:	3332      	adds	r3, #50	@ 0x32
 80057c4:	4a33      	ldr	r2, [pc, #204]	@ (8005894 <UART_SetConfig+0x4e4>)
 80057c6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ca:	095b      	lsrs	r3, r3, #5
 80057cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80057d0:	441c      	add	r4, r3
 80057d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057d6:	2200      	movs	r2, #0
 80057d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80057da:	677a      	str	r2, [r7, #116]	@ 0x74
 80057dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80057e0:	4642      	mov	r2, r8
 80057e2:	464b      	mov	r3, r9
 80057e4:	1891      	adds	r1, r2, r2
 80057e6:	60b9      	str	r1, [r7, #8]
 80057e8:	415b      	adcs	r3, r3
 80057ea:	60fb      	str	r3, [r7, #12]
 80057ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057f0:	4641      	mov	r1, r8
 80057f2:	1851      	adds	r1, r2, r1
 80057f4:	6039      	str	r1, [r7, #0]
 80057f6:	4649      	mov	r1, r9
 80057f8:	414b      	adcs	r3, r1
 80057fa:	607b      	str	r3, [r7, #4]
 80057fc:	f04f 0200 	mov.w	r2, #0
 8005800:	f04f 0300 	mov.w	r3, #0
 8005804:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005808:	4659      	mov	r1, fp
 800580a:	00cb      	lsls	r3, r1, #3
 800580c:	4651      	mov	r1, sl
 800580e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005812:	4651      	mov	r1, sl
 8005814:	00ca      	lsls	r2, r1, #3
 8005816:	4610      	mov	r0, r2
 8005818:	4619      	mov	r1, r3
 800581a:	4603      	mov	r3, r0
 800581c:	4642      	mov	r2, r8
 800581e:	189b      	adds	r3, r3, r2
 8005820:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005822:	464b      	mov	r3, r9
 8005824:	460a      	mov	r2, r1
 8005826:	eb42 0303 	adc.w	r3, r2, r3
 800582a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800582c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	663b      	str	r3, [r7, #96]	@ 0x60
 8005836:	667a      	str	r2, [r7, #100]	@ 0x64
 8005838:	f04f 0200 	mov.w	r2, #0
 800583c:	f04f 0300 	mov.w	r3, #0
 8005840:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005844:	4649      	mov	r1, r9
 8005846:	008b      	lsls	r3, r1, #2
 8005848:	4641      	mov	r1, r8
 800584a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800584e:	4641      	mov	r1, r8
 8005850:	008a      	lsls	r2, r1, #2
 8005852:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005856:	f7fa fd0b 	bl	8000270 <__aeabi_uldivmod>
 800585a:	4602      	mov	r2, r0
 800585c:	460b      	mov	r3, r1
 800585e:	4b0d      	ldr	r3, [pc, #52]	@ (8005894 <UART_SetConfig+0x4e4>)
 8005860:	fba3 1302 	umull	r1, r3, r3, r2
 8005864:	095b      	lsrs	r3, r3, #5
 8005866:	2164      	movs	r1, #100	@ 0x64
 8005868:	fb01 f303 	mul.w	r3, r1, r3
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	011b      	lsls	r3, r3, #4
 8005870:	3332      	adds	r3, #50	@ 0x32
 8005872:	4a08      	ldr	r2, [pc, #32]	@ (8005894 <UART_SetConfig+0x4e4>)
 8005874:	fba2 2303 	umull	r2, r3, r2, r3
 8005878:	095b      	lsrs	r3, r3, #5
 800587a:	f003 020f 	and.w	r2, r3, #15
 800587e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4422      	add	r2, r4
 8005886:	609a      	str	r2, [r3, #8]
}
 8005888:	bf00      	nop
 800588a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800588e:	46bd      	mov	sp, r7
 8005890:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005894:	51eb851f 	.word	0x51eb851f

08005898 <std>:
 8005898:	2300      	movs	r3, #0
 800589a:	b510      	push	{r4, lr}
 800589c:	4604      	mov	r4, r0
 800589e:	e9c0 3300 	strd	r3, r3, [r0]
 80058a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058a6:	6083      	str	r3, [r0, #8]
 80058a8:	8181      	strh	r1, [r0, #12]
 80058aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80058ac:	81c2      	strh	r2, [r0, #14]
 80058ae:	6183      	str	r3, [r0, #24]
 80058b0:	4619      	mov	r1, r3
 80058b2:	2208      	movs	r2, #8
 80058b4:	305c      	adds	r0, #92	@ 0x5c
 80058b6:	f000 f926 	bl	8005b06 <memset>
 80058ba:	4b0d      	ldr	r3, [pc, #52]	@ (80058f0 <std+0x58>)
 80058bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80058be:	4b0d      	ldr	r3, [pc, #52]	@ (80058f4 <std+0x5c>)
 80058c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80058c2:	4b0d      	ldr	r3, [pc, #52]	@ (80058f8 <std+0x60>)
 80058c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80058c6:	4b0d      	ldr	r3, [pc, #52]	@ (80058fc <std+0x64>)
 80058c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80058ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005900 <std+0x68>)
 80058cc:	6224      	str	r4, [r4, #32]
 80058ce:	429c      	cmp	r4, r3
 80058d0:	d006      	beq.n	80058e0 <std+0x48>
 80058d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80058d6:	4294      	cmp	r4, r2
 80058d8:	d002      	beq.n	80058e0 <std+0x48>
 80058da:	33d0      	adds	r3, #208	@ 0xd0
 80058dc:	429c      	cmp	r4, r3
 80058de:	d105      	bne.n	80058ec <std+0x54>
 80058e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80058e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058e8:	f000 b986 	b.w	8005bf8 <__retarget_lock_init_recursive>
 80058ec:	bd10      	pop	{r4, pc}
 80058ee:	bf00      	nop
 80058f0:	08005a81 	.word	0x08005a81
 80058f4:	08005aa3 	.word	0x08005aa3
 80058f8:	08005adb 	.word	0x08005adb
 80058fc:	08005aff 	.word	0x08005aff
 8005900:	200001bc 	.word	0x200001bc

08005904 <stdio_exit_handler>:
 8005904:	4a02      	ldr	r2, [pc, #8]	@ (8005910 <stdio_exit_handler+0xc>)
 8005906:	4903      	ldr	r1, [pc, #12]	@ (8005914 <stdio_exit_handler+0x10>)
 8005908:	4803      	ldr	r0, [pc, #12]	@ (8005918 <stdio_exit_handler+0x14>)
 800590a:	f000 b869 	b.w	80059e0 <_fwalk_sglue>
 800590e:	bf00      	nop
 8005910:	2000002c 	.word	0x2000002c
 8005914:	08006749 	.word	0x08006749
 8005918:	2000003c 	.word	0x2000003c

0800591c <cleanup_stdio>:
 800591c:	6841      	ldr	r1, [r0, #4]
 800591e:	4b0c      	ldr	r3, [pc, #48]	@ (8005950 <cleanup_stdio+0x34>)
 8005920:	4299      	cmp	r1, r3
 8005922:	b510      	push	{r4, lr}
 8005924:	4604      	mov	r4, r0
 8005926:	d001      	beq.n	800592c <cleanup_stdio+0x10>
 8005928:	f000 ff0e 	bl	8006748 <_fflush_r>
 800592c:	68a1      	ldr	r1, [r4, #8]
 800592e:	4b09      	ldr	r3, [pc, #36]	@ (8005954 <cleanup_stdio+0x38>)
 8005930:	4299      	cmp	r1, r3
 8005932:	d002      	beq.n	800593a <cleanup_stdio+0x1e>
 8005934:	4620      	mov	r0, r4
 8005936:	f000 ff07 	bl	8006748 <_fflush_r>
 800593a:	68e1      	ldr	r1, [r4, #12]
 800593c:	4b06      	ldr	r3, [pc, #24]	@ (8005958 <cleanup_stdio+0x3c>)
 800593e:	4299      	cmp	r1, r3
 8005940:	d004      	beq.n	800594c <cleanup_stdio+0x30>
 8005942:	4620      	mov	r0, r4
 8005944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005948:	f000 befe 	b.w	8006748 <_fflush_r>
 800594c:	bd10      	pop	{r4, pc}
 800594e:	bf00      	nop
 8005950:	200001bc 	.word	0x200001bc
 8005954:	20000224 	.word	0x20000224
 8005958:	2000028c 	.word	0x2000028c

0800595c <global_stdio_init.part.0>:
 800595c:	b510      	push	{r4, lr}
 800595e:	4b0b      	ldr	r3, [pc, #44]	@ (800598c <global_stdio_init.part.0+0x30>)
 8005960:	4c0b      	ldr	r4, [pc, #44]	@ (8005990 <global_stdio_init.part.0+0x34>)
 8005962:	4a0c      	ldr	r2, [pc, #48]	@ (8005994 <global_stdio_init.part.0+0x38>)
 8005964:	601a      	str	r2, [r3, #0]
 8005966:	4620      	mov	r0, r4
 8005968:	2200      	movs	r2, #0
 800596a:	2104      	movs	r1, #4
 800596c:	f7ff ff94 	bl	8005898 <std>
 8005970:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005974:	2201      	movs	r2, #1
 8005976:	2109      	movs	r1, #9
 8005978:	f7ff ff8e 	bl	8005898 <std>
 800597c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005980:	2202      	movs	r2, #2
 8005982:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005986:	2112      	movs	r1, #18
 8005988:	f7ff bf86 	b.w	8005898 <std>
 800598c:	200002f4 	.word	0x200002f4
 8005990:	200001bc 	.word	0x200001bc
 8005994:	08005905 	.word	0x08005905

08005998 <__sfp_lock_acquire>:
 8005998:	4801      	ldr	r0, [pc, #4]	@ (80059a0 <__sfp_lock_acquire+0x8>)
 800599a:	f000 b92e 	b.w	8005bfa <__retarget_lock_acquire_recursive>
 800599e:	bf00      	nop
 80059a0:	200002fd 	.word	0x200002fd

080059a4 <__sfp_lock_release>:
 80059a4:	4801      	ldr	r0, [pc, #4]	@ (80059ac <__sfp_lock_release+0x8>)
 80059a6:	f000 b929 	b.w	8005bfc <__retarget_lock_release_recursive>
 80059aa:	bf00      	nop
 80059ac:	200002fd 	.word	0x200002fd

080059b0 <__sinit>:
 80059b0:	b510      	push	{r4, lr}
 80059b2:	4604      	mov	r4, r0
 80059b4:	f7ff fff0 	bl	8005998 <__sfp_lock_acquire>
 80059b8:	6a23      	ldr	r3, [r4, #32]
 80059ba:	b11b      	cbz	r3, 80059c4 <__sinit+0x14>
 80059bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059c0:	f7ff bff0 	b.w	80059a4 <__sfp_lock_release>
 80059c4:	4b04      	ldr	r3, [pc, #16]	@ (80059d8 <__sinit+0x28>)
 80059c6:	6223      	str	r3, [r4, #32]
 80059c8:	4b04      	ldr	r3, [pc, #16]	@ (80059dc <__sinit+0x2c>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1f5      	bne.n	80059bc <__sinit+0xc>
 80059d0:	f7ff ffc4 	bl	800595c <global_stdio_init.part.0>
 80059d4:	e7f2      	b.n	80059bc <__sinit+0xc>
 80059d6:	bf00      	nop
 80059d8:	0800591d 	.word	0x0800591d
 80059dc:	200002f4 	.word	0x200002f4

080059e0 <_fwalk_sglue>:
 80059e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059e4:	4607      	mov	r7, r0
 80059e6:	4688      	mov	r8, r1
 80059e8:	4614      	mov	r4, r2
 80059ea:	2600      	movs	r6, #0
 80059ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80059f0:	f1b9 0901 	subs.w	r9, r9, #1
 80059f4:	d505      	bpl.n	8005a02 <_fwalk_sglue+0x22>
 80059f6:	6824      	ldr	r4, [r4, #0]
 80059f8:	2c00      	cmp	r4, #0
 80059fa:	d1f7      	bne.n	80059ec <_fwalk_sglue+0xc>
 80059fc:	4630      	mov	r0, r6
 80059fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a02:	89ab      	ldrh	r3, [r5, #12]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d907      	bls.n	8005a18 <_fwalk_sglue+0x38>
 8005a08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	d003      	beq.n	8005a18 <_fwalk_sglue+0x38>
 8005a10:	4629      	mov	r1, r5
 8005a12:	4638      	mov	r0, r7
 8005a14:	47c0      	blx	r8
 8005a16:	4306      	orrs	r6, r0
 8005a18:	3568      	adds	r5, #104	@ 0x68
 8005a1a:	e7e9      	b.n	80059f0 <_fwalk_sglue+0x10>

08005a1c <iprintf>:
 8005a1c:	b40f      	push	{r0, r1, r2, r3}
 8005a1e:	b507      	push	{r0, r1, r2, lr}
 8005a20:	4906      	ldr	r1, [pc, #24]	@ (8005a3c <iprintf+0x20>)
 8005a22:	ab04      	add	r3, sp, #16
 8005a24:	6808      	ldr	r0, [r1, #0]
 8005a26:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a2a:	6881      	ldr	r1, [r0, #8]
 8005a2c:	9301      	str	r3, [sp, #4]
 8005a2e:	f000 fb61 	bl	80060f4 <_vfiprintf_r>
 8005a32:	b003      	add	sp, #12
 8005a34:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a38:	b004      	add	sp, #16
 8005a3a:	4770      	bx	lr
 8005a3c:	20000038 	.word	0x20000038

08005a40 <siprintf>:
 8005a40:	b40e      	push	{r1, r2, r3}
 8005a42:	b500      	push	{lr}
 8005a44:	b09c      	sub	sp, #112	@ 0x70
 8005a46:	ab1d      	add	r3, sp, #116	@ 0x74
 8005a48:	9002      	str	r0, [sp, #8]
 8005a4a:	9006      	str	r0, [sp, #24]
 8005a4c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005a50:	4809      	ldr	r0, [pc, #36]	@ (8005a78 <siprintf+0x38>)
 8005a52:	9107      	str	r1, [sp, #28]
 8005a54:	9104      	str	r1, [sp, #16]
 8005a56:	4909      	ldr	r1, [pc, #36]	@ (8005a7c <siprintf+0x3c>)
 8005a58:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a5c:	9105      	str	r1, [sp, #20]
 8005a5e:	6800      	ldr	r0, [r0, #0]
 8005a60:	9301      	str	r3, [sp, #4]
 8005a62:	a902      	add	r1, sp, #8
 8005a64:	f000 fa20 	bl	8005ea8 <_svfiprintf_r>
 8005a68:	9b02      	ldr	r3, [sp, #8]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	701a      	strb	r2, [r3, #0]
 8005a6e:	b01c      	add	sp, #112	@ 0x70
 8005a70:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a74:	b003      	add	sp, #12
 8005a76:	4770      	bx	lr
 8005a78:	20000038 	.word	0x20000038
 8005a7c:	ffff0208 	.word	0xffff0208

08005a80 <__sread>:
 8005a80:	b510      	push	{r4, lr}
 8005a82:	460c      	mov	r4, r1
 8005a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a88:	f000 f868 	bl	8005b5c <_read_r>
 8005a8c:	2800      	cmp	r0, #0
 8005a8e:	bfab      	itete	ge
 8005a90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005a92:	89a3      	ldrhlt	r3, [r4, #12]
 8005a94:	181b      	addge	r3, r3, r0
 8005a96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005a9a:	bfac      	ite	ge
 8005a9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005a9e:	81a3      	strhlt	r3, [r4, #12]
 8005aa0:	bd10      	pop	{r4, pc}

08005aa2 <__swrite>:
 8005aa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aa6:	461f      	mov	r7, r3
 8005aa8:	898b      	ldrh	r3, [r1, #12]
 8005aaa:	05db      	lsls	r3, r3, #23
 8005aac:	4605      	mov	r5, r0
 8005aae:	460c      	mov	r4, r1
 8005ab0:	4616      	mov	r6, r2
 8005ab2:	d505      	bpl.n	8005ac0 <__swrite+0x1e>
 8005ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ab8:	2302      	movs	r3, #2
 8005aba:	2200      	movs	r2, #0
 8005abc:	f000 f83c 	bl	8005b38 <_lseek_r>
 8005ac0:	89a3      	ldrh	r3, [r4, #12]
 8005ac2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ac6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005aca:	81a3      	strh	r3, [r4, #12]
 8005acc:	4632      	mov	r2, r6
 8005ace:	463b      	mov	r3, r7
 8005ad0:	4628      	mov	r0, r5
 8005ad2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ad6:	f000 b853 	b.w	8005b80 <_write_r>

08005ada <__sseek>:
 8005ada:	b510      	push	{r4, lr}
 8005adc:	460c      	mov	r4, r1
 8005ade:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ae2:	f000 f829 	bl	8005b38 <_lseek_r>
 8005ae6:	1c43      	adds	r3, r0, #1
 8005ae8:	89a3      	ldrh	r3, [r4, #12]
 8005aea:	bf15      	itete	ne
 8005aec:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005aee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005af2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005af6:	81a3      	strheq	r3, [r4, #12]
 8005af8:	bf18      	it	ne
 8005afa:	81a3      	strhne	r3, [r4, #12]
 8005afc:	bd10      	pop	{r4, pc}

08005afe <__sclose>:
 8005afe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b02:	f000 b809 	b.w	8005b18 <_close_r>

08005b06 <memset>:
 8005b06:	4402      	add	r2, r0
 8005b08:	4603      	mov	r3, r0
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d100      	bne.n	8005b10 <memset+0xa>
 8005b0e:	4770      	bx	lr
 8005b10:	f803 1b01 	strb.w	r1, [r3], #1
 8005b14:	e7f9      	b.n	8005b0a <memset+0x4>
	...

08005b18 <_close_r>:
 8005b18:	b538      	push	{r3, r4, r5, lr}
 8005b1a:	4d06      	ldr	r5, [pc, #24]	@ (8005b34 <_close_r+0x1c>)
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	4604      	mov	r4, r0
 8005b20:	4608      	mov	r0, r1
 8005b22:	602b      	str	r3, [r5, #0]
 8005b24:	f7fc f96d 	bl	8001e02 <_close>
 8005b28:	1c43      	adds	r3, r0, #1
 8005b2a:	d102      	bne.n	8005b32 <_close_r+0x1a>
 8005b2c:	682b      	ldr	r3, [r5, #0]
 8005b2e:	b103      	cbz	r3, 8005b32 <_close_r+0x1a>
 8005b30:	6023      	str	r3, [r4, #0]
 8005b32:	bd38      	pop	{r3, r4, r5, pc}
 8005b34:	200002f8 	.word	0x200002f8

08005b38 <_lseek_r>:
 8005b38:	b538      	push	{r3, r4, r5, lr}
 8005b3a:	4d07      	ldr	r5, [pc, #28]	@ (8005b58 <_lseek_r+0x20>)
 8005b3c:	4604      	mov	r4, r0
 8005b3e:	4608      	mov	r0, r1
 8005b40:	4611      	mov	r1, r2
 8005b42:	2200      	movs	r2, #0
 8005b44:	602a      	str	r2, [r5, #0]
 8005b46:	461a      	mov	r2, r3
 8005b48:	f7fc f982 	bl	8001e50 <_lseek>
 8005b4c:	1c43      	adds	r3, r0, #1
 8005b4e:	d102      	bne.n	8005b56 <_lseek_r+0x1e>
 8005b50:	682b      	ldr	r3, [r5, #0]
 8005b52:	b103      	cbz	r3, 8005b56 <_lseek_r+0x1e>
 8005b54:	6023      	str	r3, [r4, #0]
 8005b56:	bd38      	pop	{r3, r4, r5, pc}
 8005b58:	200002f8 	.word	0x200002f8

08005b5c <_read_r>:
 8005b5c:	b538      	push	{r3, r4, r5, lr}
 8005b5e:	4d07      	ldr	r5, [pc, #28]	@ (8005b7c <_read_r+0x20>)
 8005b60:	4604      	mov	r4, r0
 8005b62:	4608      	mov	r0, r1
 8005b64:	4611      	mov	r1, r2
 8005b66:	2200      	movs	r2, #0
 8005b68:	602a      	str	r2, [r5, #0]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	f7fc f92c 	bl	8001dc8 <_read>
 8005b70:	1c43      	adds	r3, r0, #1
 8005b72:	d102      	bne.n	8005b7a <_read_r+0x1e>
 8005b74:	682b      	ldr	r3, [r5, #0]
 8005b76:	b103      	cbz	r3, 8005b7a <_read_r+0x1e>
 8005b78:	6023      	str	r3, [r4, #0]
 8005b7a:	bd38      	pop	{r3, r4, r5, pc}
 8005b7c:	200002f8 	.word	0x200002f8

08005b80 <_write_r>:
 8005b80:	b538      	push	{r3, r4, r5, lr}
 8005b82:	4d07      	ldr	r5, [pc, #28]	@ (8005ba0 <_write_r+0x20>)
 8005b84:	4604      	mov	r4, r0
 8005b86:	4608      	mov	r0, r1
 8005b88:	4611      	mov	r1, r2
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	602a      	str	r2, [r5, #0]
 8005b8e:	461a      	mov	r2, r3
 8005b90:	f7fb fdd6 	bl	8001740 <_write>
 8005b94:	1c43      	adds	r3, r0, #1
 8005b96:	d102      	bne.n	8005b9e <_write_r+0x1e>
 8005b98:	682b      	ldr	r3, [r5, #0]
 8005b9a:	b103      	cbz	r3, 8005b9e <_write_r+0x1e>
 8005b9c:	6023      	str	r3, [r4, #0]
 8005b9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ba0:	200002f8 	.word	0x200002f8

08005ba4 <__errno>:
 8005ba4:	4b01      	ldr	r3, [pc, #4]	@ (8005bac <__errno+0x8>)
 8005ba6:	6818      	ldr	r0, [r3, #0]
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	20000038 	.word	0x20000038

08005bb0 <__libc_init_array>:
 8005bb0:	b570      	push	{r4, r5, r6, lr}
 8005bb2:	4d0d      	ldr	r5, [pc, #52]	@ (8005be8 <__libc_init_array+0x38>)
 8005bb4:	4c0d      	ldr	r4, [pc, #52]	@ (8005bec <__libc_init_array+0x3c>)
 8005bb6:	1b64      	subs	r4, r4, r5
 8005bb8:	10a4      	asrs	r4, r4, #2
 8005bba:	2600      	movs	r6, #0
 8005bbc:	42a6      	cmp	r6, r4
 8005bbe:	d109      	bne.n	8005bd4 <__libc_init_array+0x24>
 8005bc0:	4d0b      	ldr	r5, [pc, #44]	@ (8005bf0 <__libc_init_array+0x40>)
 8005bc2:	4c0c      	ldr	r4, [pc, #48]	@ (8005bf4 <__libc_init_array+0x44>)
 8005bc4:	f000 ff6e 	bl	8006aa4 <_init>
 8005bc8:	1b64      	subs	r4, r4, r5
 8005bca:	10a4      	asrs	r4, r4, #2
 8005bcc:	2600      	movs	r6, #0
 8005bce:	42a6      	cmp	r6, r4
 8005bd0:	d105      	bne.n	8005bde <__libc_init_array+0x2e>
 8005bd2:	bd70      	pop	{r4, r5, r6, pc}
 8005bd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bd8:	4798      	blx	r3
 8005bda:	3601      	adds	r6, #1
 8005bdc:	e7ee      	b.n	8005bbc <__libc_init_array+0xc>
 8005bde:	f855 3b04 	ldr.w	r3, [r5], #4
 8005be2:	4798      	blx	r3
 8005be4:	3601      	adds	r6, #1
 8005be6:	e7f2      	b.n	8005bce <__libc_init_array+0x1e>
 8005be8:	08006bb8 	.word	0x08006bb8
 8005bec:	08006bb8 	.word	0x08006bb8
 8005bf0:	08006bb8 	.word	0x08006bb8
 8005bf4:	08006bbc 	.word	0x08006bbc

08005bf8 <__retarget_lock_init_recursive>:
 8005bf8:	4770      	bx	lr

08005bfa <__retarget_lock_acquire_recursive>:
 8005bfa:	4770      	bx	lr

08005bfc <__retarget_lock_release_recursive>:
 8005bfc:	4770      	bx	lr
	...

08005c00 <_free_r>:
 8005c00:	b538      	push	{r3, r4, r5, lr}
 8005c02:	4605      	mov	r5, r0
 8005c04:	2900      	cmp	r1, #0
 8005c06:	d041      	beq.n	8005c8c <_free_r+0x8c>
 8005c08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c0c:	1f0c      	subs	r4, r1, #4
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	bfb8      	it	lt
 8005c12:	18e4      	addlt	r4, r4, r3
 8005c14:	f000 f8e0 	bl	8005dd8 <__malloc_lock>
 8005c18:	4a1d      	ldr	r2, [pc, #116]	@ (8005c90 <_free_r+0x90>)
 8005c1a:	6813      	ldr	r3, [r2, #0]
 8005c1c:	b933      	cbnz	r3, 8005c2c <_free_r+0x2c>
 8005c1e:	6063      	str	r3, [r4, #4]
 8005c20:	6014      	str	r4, [r2, #0]
 8005c22:	4628      	mov	r0, r5
 8005c24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c28:	f000 b8dc 	b.w	8005de4 <__malloc_unlock>
 8005c2c:	42a3      	cmp	r3, r4
 8005c2e:	d908      	bls.n	8005c42 <_free_r+0x42>
 8005c30:	6820      	ldr	r0, [r4, #0]
 8005c32:	1821      	adds	r1, r4, r0
 8005c34:	428b      	cmp	r3, r1
 8005c36:	bf01      	itttt	eq
 8005c38:	6819      	ldreq	r1, [r3, #0]
 8005c3a:	685b      	ldreq	r3, [r3, #4]
 8005c3c:	1809      	addeq	r1, r1, r0
 8005c3e:	6021      	streq	r1, [r4, #0]
 8005c40:	e7ed      	b.n	8005c1e <_free_r+0x1e>
 8005c42:	461a      	mov	r2, r3
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	b10b      	cbz	r3, 8005c4c <_free_r+0x4c>
 8005c48:	42a3      	cmp	r3, r4
 8005c4a:	d9fa      	bls.n	8005c42 <_free_r+0x42>
 8005c4c:	6811      	ldr	r1, [r2, #0]
 8005c4e:	1850      	adds	r0, r2, r1
 8005c50:	42a0      	cmp	r0, r4
 8005c52:	d10b      	bne.n	8005c6c <_free_r+0x6c>
 8005c54:	6820      	ldr	r0, [r4, #0]
 8005c56:	4401      	add	r1, r0
 8005c58:	1850      	adds	r0, r2, r1
 8005c5a:	4283      	cmp	r3, r0
 8005c5c:	6011      	str	r1, [r2, #0]
 8005c5e:	d1e0      	bne.n	8005c22 <_free_r+0x22>
 8005c60:	6818      	ldr	r0, [r3, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	6053      	str	r3, [r2, #4]
 8005c66:	4408      	add	r0, r1
 8005c68:	6010      	str	r0, [r2, #0]
 8005c6a:	e7da      	b.n	8005c22 <_free_r+0x22>
 8005c6c:	d902      	bls.n	8005c74 <_free_r+0x74>
 8005c6e:	230c      	movs	r3, #12
 8005c70:	602b      	str	r3, [r5, #0]
 8005c72:	e7d6      	b.n	8005c22 <_free_r+0x22>
 8005c74:	6820      	ldr	r0, [r4, #0]
 8005c76:	1821      	adds	r1, r4, r0
 8005c78:	428b      	cmp	r3, r1
 8005c7a:	bf04      	itt	eq
 8005c7c:	6819      	ldreq	r1, [r3, #0]
 8005c7e:	685b      	ldreq	r3, [r3, #4]
 8005c80:	6063      	str	r3, [r4, #4]
 8005c82:	bf04      	itt	eq
 8005c84:	1809      	addeq	r1, r1, r0
 8005c86:	6021      	streq	r1, [r4, #0]
 8005c88:	6054      	str	r4, [r2, #4]
 8005c8a:	e7ca      	b.n	8005c22 <_free_r+0x22>
 8005c8c:	bd38      	pop	{r3, r4, r5, pc}
 8005c8e:	bf00      	nop
 8005c90:	20000304 	.word	0x20000304

08005c94 <sbrk_aligned>:
 8005c94:	b570      	push	{r4, r5, r6, lr}
 8005c96:	4e0f      	ldr	r6, [pc, #60]	@ (8005cd4 <sbrk_aligned+0x40>)
 8005c98:	460c      	mov	r4, r1
 8005c9a:	6831      	ldr	r1, [r6, #0]
 8005c9c:	4605      	mov	r5, r0
 8005c9e:	b911      	cbnz	r1, 8005ca6 <sbrk_aligned+0x12>
 8005ca0:	f000 fe28 	bl	80068f4 <_sbrk_r>
 8005ca4:	6030      	str	r0, [r6, #0]
 8005ca6:	4621      	mov	r1, r4
 8005ca8:	4628      	mov	r0, r5
 8005caa:	f000 fe23 	bl	80068f4 <_sbrk_r>
 8005cae:	1c43      	adds	r3, r0, #1
 8005cb0:	d103      	bne.n	8005cba <sbrk_aligned+0x26>
 8005cb2:	f04f 34ff 	mov.w	r4, #4294967295
 8005cb6:	4620      	mov	r0, r4
 8005cb8:	bd70      	pop	{r4, r5, r6, pc}
 8005cba:	1cc4      	adds	r4, r0, #3
 8005cbc:	f024 0403 	bic.w	r4, r4, #3
 8005cc0:	42a0      	cmp	r0, r4
 8005cc2:	d0f8      	beq.n	8005cb6 <sbrk_aligned+0x22>
 8005cc4:	1a21      	subs	r1, r4, r0
 8005cc6:	4628      	mov	r0, r5
 8005cc8:	f000 fe14 	bl	80068f4 <_sbrk_r>
 8005ccc:	3001      	adds	r0, #1
 8005cce:	d1f2      	bne.n	8005cb6 <sbrk_aligned+0x22>
 8005cd0:	e7ef      	b.n	8005cb2 <sbrk_aligned+0x1e>
 8005cd2:	bf00      	nop
 8005cd4:	20000300 	.word	0x20000300

08005cd8 <_malloc_r>:
 8005cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cdc:	1ccd      	adds	r5, r1, #3
 8005cde:	f025 0503 	bic.w	r5, r5, #3
 8005ce2:	3508      	adds	r5, #8
 8005ce4:	2d0c      	cmp	r5, #12
 8005ce6:	bf38      	it	cc
 8005ce8:	250c      	movcc	r5, #12
 8005cea:	2d00      	cmp	r5, #0
 8005cec:	4606      	mov	r6, r0
 8005cee:	db01      	blt.n	8005cf4 <_malloc_r+0x1c>
 8005cf0:	42a9      	cmp	r1, r5
 8005cf2:	d904      	bls.n	8005cfe <_malloc_r+0x26>
 8005cf4:	230c      	movs	r3, #12
 8005cf6:	6033      	str	r3, [r6, #0]
 8005cf8:	2000      	movs	r0, #0
 8005cfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cfe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005dd4 <_malloc_r+0xfc>
 8005d02:	f000 f869 	bl	8005dd8 <__malloc_lock>
 8005d06:	f8d8 3000 	ldr.w	r3, [r8]
 8005d0a:	461c      	mov	r4, r3
 8005d0c:	bb44      	cbnz	r4, 8005d60 <_malloc_r+0x88>
 8005d0e:	4629      	mov	r1, r5
 8005d10:	4630      	mov	r0, r6
 8005d12:	f7ff ffbf 	bl	8005c94 <sbrk_aligned>
 8005d16:	1c43      	adds	r3, r0, #1
 8005d18:	4604      	mov	r4, r0
 8005d1a:	d158      	bne.n	8005dce <_malloc_r+0xf6>
 8005d1c:	f8d8 4000 	ldr.w	r4, [r8]
 8005d20:	4627      	mov	r7, r4
 8005d22:	2f00      	cmp	r7, #0
 8005d24:	d143      	bne.n	8005dae <_malloc_r+0xd6>
 8005d26:	2c00      	cmp	r4, #0
 8005d28:	d04b      	beq.n	8005dc2 <_malloc_r+0xea>
 8005d2a:	6823      	ldr	r3, [r4, #0]
 8005d2c:	4639      	mov	r1, r7
 8005d2e:	4630      	mov	r0, r6
 8005d30:	eb04 0903 	add.w	r9, r4, r3
 8005d34:	f000 fdde 	bl	80068f4 <_sbrk_r>
 8005d38:	4581      	cmp	r9, r0
 8005d3a:	d142      	bne.n	8005dc2 <_malloc_r+0xea>
 8005d3c:	6821      	ldr	r1, [r4, #0]
 8005d3e:	1a6d      	subs	r5, r5, r1
 8005d40:	4629      	mov	r1, r5
 8005d42:	4630      	mov	r0, r6
 8005d44:	f7ff ffa6 	bl	8005c94 <sbrk_aligned>
 8005d48:	3001      	adds	r0, #1
 8005d4a:	d03a      	beq.n	8005dc2 <_malloc_r+0xea>
 8005d4c:	6823      	ldr	r3, [r4, #0]
 8005d4e:	442b      	add	r3, r5
 8005d50:	6023      	str	r3, [r4, #0]
 8005d52:	f8d8 3000 	ldr.w	r3, [r8]
 8005d56:	685a      	ldr	r2, [r3, #4]
 8005d58:	bb62      	cbnz	r2, 8005db4 <_malloc_r+0xdc>
 8005d5a:	f8c8 7000 	str.w	r7, [r8]
 8005d5e:	e00f      	b.n	8005d80 <_malloc_r+0xa8>
 8005d60:	6822      	ldr	r2, [r4, #0]
 8005d62:	1b52      	subs	r2, r2, r5
 8005d64:	d420      	bmi.n	8005da8 <_malloc_r+0xd0>
 8005d66:	2a0b      	cmp	r2, #11
 8005d68:	d917      	bls.n	8005d9a <_malloc_r+0xc2>
 8005d6a:	1961      	adds	r1, r4, r5
 8005d6c:	42a3      	cmp	r3, r4
 8005d6e:	6025      	str	r5, [r4, #0]
 8005d70:	bf18      	it	ne
 8005d72:	6059      	strne	r1, [r3, #4]
 8005d74:	6863      	ldr	r3, [r4, #4]
 8005d76:	bf08      	it	eq
 8005d78:	f8c8 1000 	streq.w	r1, [r8]
 8005d7c:	5162      	str	r2, [r4, r5]
 8005d7e:	604b      	str	r3, [r1, #4]
 8005d80:	4630      	mov	r0, r6
 8005d82:	f000 f82f 	bl	8005de4 <__malloc_unlock>
 8005d86:	f104 000b 	add.w	r0, r4, #11
 8005d8a:	1d23      	adds	r3, r4, #4
 8005d8c:	f020 0007 	bic.w	r0, r0, #7
 8005d90:	1ac2      	subs	r2, r0, r3
 8005d92:	bf1c      	itt	ne
 8005d94:	1a1b      	subne	r3, r3, r0
 8005d96:	50a3      	strne	r3, [r4, r2]
 8005d98:	e7af      	b.n	8005cfa <_malloc_r+0x22>
 8005d9a:	6862      	ldr	r2, [r4, #4]
 8005d9c:	42a3      	cmp	r3, r4
 8005d9e:	bf0c      	ite	eq
 8005da0:	f8c8 2000 	streq.w	r2, [r8]
 8005da4:	605a      	strne	r2, [r3, #4]
 8005da6:	e7eb      	b.n	8005d80 <_malloc_r+0xa8>
 8005da8:	4623      	mov	r3, r4
 8005daa:	6864      	ldr	r4, [r4, #4]
 8005dac:	e7ae      	b.n	8005d0c <_malloc_r+0x34>
 8005dae:	463c      	mov	r4, r7
 8005db0:	687f      	ldr	r7, [r7, #4]
 8005db2:	e7b6      	b.n	8005d22 <_malloc_r+0x4a>
 8005db4:	461a      	mov	r2, r3
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	42a3      	cmp	r3, r4
 8005dba:	d1fb      	bne.n	8005db4 <_malloc_r+0xdc>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	6053      	str	r3, [r2, #4]
 8005dc0:	e7de      	b.n	8005d80 <_malloc_r+0xa8>
 8005dc2:	230c      	movs	r3, #12
 8005dc4:	6033      	str	r3, [r6, #0]
 8005dc6:	4630      	mov	r0, r6
 8005dc8:	f000 f80c 	bl	8005de4 <__malloc_unlock>
 8005dcc:	e794      	b.n	8005cf8 <_malloc_r+0x20>
 8005dce:	6005      	str	r5, [r0, #0]
 8005dd0:	e7d6      	b.n	8005d80 <_malloc_r+0xa8>
 8005dd2:	bf00      	nop
 8005dd4:	20000304 	.word	0x20000304

08005dd8 <__malloc_lock>:
 8005dd8:	4801      	ldr	r0, [pc, #4]	@ (8005de0 <__malloc_lock+0x8>)
 8005dda:	f7ff bf0e 	b.w	8005bfa <__retarget_lock_acquire_recursive>
 8005dde:	bf00      	nop
 8005de0:	200002fc 	.word	0x200002fc

08005de4 <__malloc_unlock>:
 8005de4:	4801      	ldr	r0, [pc, #4]	@ (8005dec <__malloc_unlock+0x8>)
 8005de6:	f7ff bf09 	b.w	8005bfc <__retarget_lock_release_recursive>
 8005dea:	bf00      	nop
 8005dec:	200002fc 	.word	0x200002fc

08005df0 <__ssputs_r>:
 8005df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005df4:	688e      	ldr	r6, [r1, #8]
 8005df6:	461f      	mov	r7, r3
 8005df8:	42be      	cmp	r6, r7
 8005dfa:	680b      	ldr	r3, [r1, #0]
 8005dfc:	4682      	mov	sl, r0
 8005dfe:	460c      	mov	r4, r1
 8005e00:	4690      	mov	r8, r2
 8005e02:	d82d      	bhi.n	8005e60 <__ssputs_r+0x70>
 8005e04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005e08:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005e0c:	d026      	beq.n	8005e5c <__ssputs_r+0x6c>
 8005e0e:	6965      	ldr	r5, [r4, #20]
 8005e10:	6909      	ldr	r1, [r1, #16]
 8005e12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e16:	eba3 0901 	sub.w	r9, r3, r1
 8005e1a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e1e:	1c7b      	adds	r3, r7, #1
 8005e20:	444b      	add	r3, r9
 8005e22:	106d      	asrs	r5, r5, #1
 8005e24:	429d      	cmp	r5, r3
 8005e26:	bf38      	it	cc
 8005e28:	461d      	movcc	r5, r3
 8005e2a:	0553      	lsls	r3, r2, #21
 8005e2c:	d527      	bpl.n	8005e7e <__ssputs_r+0x8e>
 8005e2e:	4629      	mov	r1, r5
 8005e30:	f7ff ff52 	bl	8005cd8 <_malloc_r>
 8005e34:	4606      	mov	r6, r0
 8005e36:	b360      	cbz	r0, 8005e92 <__ssputs_r+0xa2>
 8005e38:	6921      	ldr	r1, [r4, #16]
 8005e3a:	464a      	mov	r2, r9
 8005e3c:	f000 fd6a 	bl	8006914 <memcpy>
 8005e40:	89a3      	ldrh	r3, [r4, #12]
 8005e42:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005e46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e4a:	81a3      	strh	r3, [r4, #12]
 8005e4c:	6126      	str	r6, [r4, #16]
 8005e4e:	6165      	str	r5, [r4, #20]
 8005e50:	444e      	add	r6, r9
 8005e52:	eba5 0509 	sub.w	r5, r5, r9
 8005e56:	6026      	str	r6, [r4, #0]
 8005e58:	60a5      	str	r5, [r4, #8]
 8005e5a:	463e      	mov	r6, r7
 8005e5c:	42be      	cmp	r6, r7
 8005e5e:	d900      	bls.n	8005e62 <__ssputs_r+0x72>
 8005e60:	463e      	mov	r6, r7
 8005e62:	6820      	ldr	r0, [r4, #0]
 8005e64:	4632      	mov	r2, r6
 8005e66:	4641      	mov	r1, r8
 8005e68:	f000 fd2a 	bl	80068c0 <memmove>
 8005e6c:	68a3      	ldr	r3, [r4, #8]
 8005e6e:	1b9b      	subs	r3, r3, r6
 8005e70:	60a3      	str	r3, [r4, #8]
 8005e72:	6823      	ldr	r3, [r4, #0]
 8005e74:	4433      	add	r3, r6
 8005e76:	6023      	str	r3, [r4, #0]
 8005e78:	2000      	movs	r0, #0
 8005e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e7e:	462a      	mov	r2, r5
 8005e80:	f000 fd56 	bl	8006930 <_realloc_r>
 8005e84:	4606      	mov	r6, r0
 8005e86:	2800      	cmp	r0, #0
 8005e88:	d1e0      	bne.n	8005e4c <__ssputs_r+0x5c>
 8005e8a:	6921      	ldr	r1, [r4, #16]
 8005e8c:	4650      	mov	r0, sl
 8005e8e:	f7ff feb7 	bl	8005c00 <_free_r>
 8005e92:	230c      	movs	r3, #12
 8005e94:	f8ca 3000 	str.w	r3, [sl]
 8005e98:	89a3      	ldrh	r3, [r4, #12]
 8005e9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e9e:	81a3      	strh	r3, [r4, #12]
 8005ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea4:	e7e9      	b.n	8005e7a <__ssputs_r+0x8a>
	...

08005ea8 <_svfiprintf_r>:
 8005ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eac:	4698      	mov	r8, r3
 8005eae:	898b      	ldrh	r3, [r1, #12]
 8005eb0:	061b      	lsls	r3, r3, #24
 8005eb2:	b09d      	sub	sp, #116	@ 0x74
 8005eb4:	4607      	mov	r7, r0
 8005eb6:	460d      	mov	r5, r1
 8005eb8:	4614      	mov	r4, r2
 8005eba:	d510      	bpl.n	8005ede <_svfiprintf_r+0x36>
 8005ebc:	690b      	ldr	r3, [r1, #16]
 8005ebe:	b973      	cbnz	r3, 8005ede <_svfiprintf_r+0x36>
 8005ec0:	2140      	movs	r1, #64	@ 0x40
 8005ec2:	f7ff ff09 	bl	8005cd8 <_malloc_r>
 8005ec6:	6028      	str	r0, [r5, #0]
 8005ec8:	6128      	str	r0, [r5, #16]
 8005eca:	b930      	cbnz	r0, 8005eda <_svfiprintf_r+0x32>
 8005ecc:	230c      	movs	r3, #12
 8005ece:	603b      	str	r3, [r7, #0]
 8005ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed4:	b01d      	add	sp, #116	@ 0x74
 8005ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eda:	2340      	movs	r3, #64	@ 0x40
 8005edc:	616b      	str	r3, [r5, #20]
 8005ede:	2300      	movs	r3, #0
 8005ee0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ee2:	2320      	movs	r3, #32
 8005ee4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005ee8:	f8cd 800c 	str.w	r8, [sp, #12]
 8005eec:	2330      	movs	r3, #48	@ 0x30
 8005eee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800608c <_svfiprintf_r+0x1e4>
 8005ef2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005ef6:	f04f 0901 	mov.w	r9, #1
 8005efa:	4623      	mov	r3, r4
 8005efc:	469a      	mov	sl, r3
 8005efe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f02:	b10a      	cbz	r2, 8005f08 <_svfiprintf_r+0x60>
 8005f04:	2a25      	cmp	r2, #37	@ 0x25
 8005f06:	d1f9      	bne.n	8005efc <_svfiprintf_r+0x54>
 8005f08:	ebba 0b04 	subs.w	fp, sl, r4
 8005f0c:	d00b      	beq.n	8005f26 <_svfiprintf_r+0x7e>
 8005f0e:	465b      	mov	r3, fp
 8005f10:	4622      	mov	r2, r4
 8005f12:	4629      	mov	r1, r5
 8005f14:	4638      	mov	r0, r7
 8005f16:	f7ff ff6b 	bl	8005df0 <__ssputs_r>
 8005f1a:	3001      	adds	r0, #1
 8005f1c:	f000 80a7 	beq.w	800606e <_svfiprintf_r+0x1c6>
 8005f20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f22:	445a      	add	r2, fp
 8005f24:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f26:	f89a 3000 	ldrb.w	r3, [sl]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 809f 	beq.w	800606e <_svfiprintf_r+0x1c6>
 8005f30:	2300      	movs	r3, #0
 8005f32:	f04f 32ff 	mov.w	r2, #4294967295
 8005f36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f3a:	f10a 0a01 	add.w	sl, sl, #1
 8005f3e:	9304      	str	r3, [sp, #16]
 8005f40:	9307      	str	r3, [sp, #28]
 8005f42:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005f46:	931a      	str	r3, [sp, #104]	@ 0x68
 8005f48:	4654      	mov	r4, sl
 8005f4a:	2205      	movs	r2, #5
 8005f4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f50:	484e      	ldr	r0, [pc, #312]	@ (800608c <_svfiprintf_r+0x1e4>)
 8005f52:	f7fa f93d 	bl	80001d0 <memchr>
 8005f56:	9a04      	ldr	r2, [sp, #16]
 8005f58:	b9d8      	cbnz	r0, 8005f92 <_svfiprintf_r+0xea>
 8005f5a:	06d0      	lsls	r0, r2, #27
 8005f5c:	bf44      	itt	mi
 8005f5e:	2320      	movmi	r3, #32
 8005f60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f64:	0711      	lsls	r1, r2, #28
 8005f66:	bf44      	itt	mi
 8005f68:	232b      	movmi	r3, #43	@ 0x2b
 8005f6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f6e:	f89a 3000 	ldrb.w	r3, [sl]
 8005f72:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f74:	d015      	beq.n	8005fa2 <_svfiprintf_r+0xfa>
 8005f76:	9a07      	ldr	r2, [sp, #28]
 8005f78:	4654      	mov	r4, sl
 8005f7a:	2000      	movs	r0, #0
 8005f7c:	f04f 0c0a 	mov.w	ip, #10
 8005f80:	4621      	mov	r1, r4
 8005f82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f86:	3b30      	subs	r3, #48	@ 0x30
 8005f88:	2b09      	cmp	r3, #9
 8005f8a:	d94b      	bls.n	8006024 <_svfiprintf_r+0x17c>
 8005f8c:	b1b0      	cbz	r0, 8005fbc <_svfiprintf_r+0x114>
 8005f8e:	9207      	str	r2, [sp, #28]
 8005f90:	e014      	b.n	8005fbc <_svfiprintf_r+0x114>
 8005f92:	eba0 0308 	sub.w	r3, r0, r8
 8005f96:	fa09 f303 	lsl.w	r3, r9, r3
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	9304      	str	r3, [sp, #16]
 8005f9e:	46a2      	mov	sl, r4
 8005fa0:	e7d2      	b.n	8005f48 <_svfiprintf_r+0xa0>
 8005fa2:	9b03      	ldr	r3, [sp, #12]
 8005fa4:	1d19      	adds	r1, r3, #4
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	9103      	str	r1, [sp, #12]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	bfbb      	ittet	lt
 8005fae:	425b      	neglt	r3, r3
 8005fb0:	f042 0202 	orrlt.w	r2, r2, #2
 8005fb4:	9307      	strge	r3, [sp, #28]
 8005fb6:	9307      	strlt	r3, [sp, #28]
 8005fb8:	bfb8      	it	lt
 8005fba:	9204      	strlt	r2, [sp, #16]
 8005fbc:	7823      	ldrb	r3, [r4, #0]
 8005fbe:	2b2e      	cmp	r3, #46	@ 0x2e
 8005fc0:	d10a      	bne.n	8005fd8 <_svfiprintf_r+0x130>
 8005fc2:	7863      	ldrb	r3, [r4, #1]
 8005fc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fc6:	d132      	bne.n	800602e <_svfiprintf_r+0x186>
 8005fc8:	9b03      	ldr	r3, [sp, #12]
 8005fca:	1d1a      	adds	r2, r3, #4
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	9203      	str	r2, [sp, #12]
 8005fd0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005fd4:	3402      	adds	r4, #2
 8005fd6:	9305      	str	r3, [sp, #20]
 8005fd8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800609c <_svfiprintf_r+0x1f4>
 8005fdc:	7821      	ldrb	r1, [r4, #0]
 8005fde:	2203      	movs	r2, #3
 8005fe0:	4650      	mov	r0, sl
 8005fe2:	f7fa f8f5 	bl	80001d0 <memchr>
 8005fe6:	b138      	cbz	r0, 8005ff8 <_svfiprintf_r+0x150>
 8005fe8:	9b04      	ldr	r3, [sp, #16]
 8005fea:	eba0 000a 	sub.w	r0, r0, sl
 8005fee:	2240      	movs	r2, #64	@ 0x40
 8005ff0:	4082      	lsls	r2, r0
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	3401      	adds	r4, #1
 8005ff6:	9304      	str	r3, [sp, #16]
 8005ff8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ffc:	4824      	ldr	r0, [pc, #144]	@ (8006090 <_svfiprintf_r+0x1e8>)
 8005ffe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006002:	2206      	movs	r2, #6
 8006004:	f7fa f8e4 	bl	80001d0 <memchr>
 8006008:	2800      	cmp	r0, #0
 800600a:	d036      	beq.n	800607a <_svfiprintf_r+0x1d2>
 800600c:	4b21      	ldr	r3, [pc, #132]	@ (8006094 <_svfiprintf_r+0x1ec>)
 800600e:	bb1b      	cbnz	r3, 8006058 <_svfiprintf_r+0x1b0>
 8006010:	9b03      	ldr	r3, [sp, #12]
 8006012:	3307      	adds	r3, #7
 8006014:	f023 0307 	bic.w	r3, r3, #7
 8006018:	3308      	adds	r3, #8
 800601a:	9303      	str	r3, [sp, #12]
 800601c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800601e:	4433      	add	r3, r6
 8006020:	9309      	str	r3, [sp, #36]	@ 0x24
 8006022:	e76a      	b.n	8005efa <_svfiprintf_r+0x52>
 8006024:	fb0c 3202 	mla	r2, ip, r2, r3
 8006028:	460c      	mov	r4, r1
 800602a:	2001      	movs	r0, #1
 800602c:	e7a8      	b.n	8005f80 <_svfiprintf_r+0xd8>
 800602e:	2300      	movs	r3, #0
 8006030:	3401      	adds	r4, #1
 8006032:	9305      	str	r3, [sp, #20]
 8006034:	4619      	mov	r1, r3
 8006036:	f04f 0c0a 	mov.w	ip, #10
 800603a:	4620      	mov	r0, r4
 800603c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006040:	3a30      	subs	r2, #48	@ 0x30
 8006042:	2a09      	cmp	r2, #9
 8006044:	d903      	bls.n	800604e <_svfiprintf_r+0x1a6>
 8006046:	2b00      	cmp	r3, #0
 8006048:	d0c6      	beq.n	8005fd8 <_svfiprintf_r+0x130>
 800604a:	9105      	str	r1, [sp, #20]
 800604c:	e7c4      	b.n	8005fd8 <_svfiprintf_r+0x130>
 800604e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006052:	4604      	mov	r4, r0
 8006054:	2301      	movs	r3, #1
 8006056:	e7f0      	b.n	800603a <_svfiprintf_r+0x192>
 8006058:	ab03      	add	r3, sp, #12
 800605a:	9300      	str	r3, [sp, #0]
 800605c:	462a      	mov	r2, r5
 800605e:	4b0e      	ldr	r3, [pc, #56]	@ (8006098 <_svfiprintf_r+0x1f0>)
 8006060:	a904      	add	r1, sp, #16
 8006062:	4638      	mov	r0, r7
 8006064:	f3af 8000 	nop.w
 8006068:	1c42      	adds	r2, r0, #1
 800606a:	4606      	mov	r6, r0
 800606c:	d1d6      	bne.n	800601c <_svfiprintf_r+0x174>
 800606e:	89ab      	ldrh	r3, [r5, #12]
 8006070:	065b      	lsls	r3, r3, #25
 8006072:	f53f af2d 	bmi.w	8005ed0 <_svfiprintf_r+0x28>
 8006076:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006078:	e72c      	b.n	8005ed4 <_svfiprintf_r+0x2c>
 800607a:	ab03      	add	r3, sp, #12
 800607c:	9300      	str	r3, [sp, #0]
 800607e:	462a      	mov	r2, r5
 8006080:	4b05      	ldr	r3, [pc, #20]	@ (8006098 <_svfiprintf_r+0x1f0>)
 8006082:	a904      	add	r1, sp, #16
 8006084:	4638      	mov	r0, r7
 8006086:	f000 f9bb 	bl	8006400 <_printf_i>
 800608a:	e7ed      	b.n	8006068 <_svfiprintf_r+0x1c0>
 800608c:	08006b7c 	.word	0x08006b7c
 8006090:	08006b86 	.word	0x08006b86
 8006094:	00000000 	.word	0x00000000
 8006098:	08005df1 	.word	0x08005df1
 800609c:	08006b82 	.word	0x08006b82

080060a0 <__sfputc_r>:
 80060a0:	6893      	ldr	r3, [r2, #8]
 80060a2:	3b01      	subs	r3, #1
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	b410      	push	{r4}
 80060a8:	6093      	str	r3, [r2, #8]
 80060aa:	da08      	bge.n	80060be <__sfputc_r+0x1e>
 80060ac:	6994      	ldr	r4, [r2, #24]
 80060ae:	42a3      	cmp	r3, r4
 80060b0:	db01      	blt.n	80060b6 <__sfputc_r+0x16>
 80060b2:	290a      	cmp	r1, #10
 80060b4:	d103      	bne.n	80060be <__sfputc_r+0x1e>
 80060b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060ba:	f000 bb6d 	b.w	8006798 <__swbuf_r>
 80060be:	6813      	ldr	r3, [r2, #0]
 80060c0:	1c58      	adds	r0, r3, #1
 80060c2:	6010      	str	r0, [r2, #0]
 80060c4:	7019      	strb	r1, [r3, #0]
 80060c6:	4608      	mov	r0, r1
 80060c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <__sfputs_r>:
 80060ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060d0:	4606      	mov	r6, r0
 80060d2:	460f      	mov	r7, r1
 80060d4:	4614      	mov	r4, r2
 80060d6:	18d5      	adds	r5, r2, r3
 80060d8:	42ac      	cmp	r4, r5
 80060da:	d101      	bne.n	80060e0 <__sfputs_r+0x12>
 80060dc:	2000      	movs	r0, #0
 80060de:	e007      	b.n	80060f0 <__sfputs_r+0x22>
 80060e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060e4:	463a      	mov	r2, r7
 80060e6:	4630      	mov	r0, r6
 80060e8:	f7ff ffda 	bl	80060a0 <__sfputc_r>
 80060ec:	1c43      	adds	r3, r0, #1
 80060ee:	d1f3      	bne.n	80060d8 <__sfputs_r+0xa>
 80060f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080060f4 <_vfiprintf_r>:
 80060f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060f8:	460d      	mov	r5, r1
 80060fa:	b09d      	sub	sp, #116	@ 0x74
 80060fc:	4614      	mov	r4, r2
 80060fe:	4698      	mov	r8, r3
 8006100:	4606      	mov	r6, r0
 8006102:	b118      	cbz	r0, 800610c <_vfiprintf_r+0x18>
 8006104:	6a03      	ldr	r3, [r0, #32]
 8006106:	b90b      	cbnz	r3, 800610c <_vfiprintf_r+0x18>
 8006108:	f7ff fc52 	bl	80059b0 <__sinit>
 800610c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800610e:	07d9      	lsls	r1, r3, #31
 8006110:	d405      	bmi.n	800611e <_vfiprintf_r+0x2a>
 8006112:	89ab      	ldrh	r3, [r5, #12]
 8006114:	059a      	lsls	r2, r3, #22
 8006116:	d402      	bmi.n	800611e <_vfiprintf_r+0x2a>
 8006118:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800611a:	f7ff fd6e 	bl	8005bfa <__retarget_lock_acquire_recursive>
 800611e:	89ab      	ldrh	r3, [r5, #12]
 8006120:	071b      	lsls	r3, r3, #28
 8006122:	d501      	bpl.n	8006128 <_vfiprintf_r+0x34>
 8006124:	692b      	ldr	r3, [r5, #16]
 8006126:	b99b      	cbnz	r3, 8006150 <_vfiprintf_r+0x5c>
 8006128:	4629      	mov	r1, r5
 800612a:	4630      	mov	r0, r6
 800612c:	f000 fb72 	bl	8006814 <__swsetup_r>
 8006130:	b170      	cbz	r0, 8006150 <_vfiprintf_r+0x5c>
 8006132:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006134:	07dc      	lsls	r4, r3, #31
 8006136:	d504      	bpl.n	8006142 <_vfiprintf_r+0x4e>
 8006138:	f04f 30ff 	mov.w	r0, #4294967295
 800613c:	b01d      	add	sp, #116	@ 0x74
 800613e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006142:	89ab      	ldrh	r3, [r5, #12]
 8006144:	0598      	lsls	r0, r3, #22
 8006146:	d4f7      	bmi.n	8006138 <_vfiprintf_r+0x44>
 8006148:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800614a:	f7ff fd57 	bl	8005bfc <__retarget_lock_release_recursive>
 800614e:	e7f3      	b.n	8006138 <_vfiprintf_r+0x44>
 8006150:	2300      	movs	r3, #0
 8006152:	9309      	str	r3, [sp, #36]	@ 0x24
 8006154:	2320      	movs	r3, #32
 8006156:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800615a:	f8cd 800c 	str.w	r8, [sp, #12]
 800615e:	2330      	movs	r3, #48	@ 0x30
 8006160:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006310 <_vfiprintf_r+0x21c>
 8006164:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006168:	f04f 0901 	mov.w	r9, #1
 800616c:	4623      	mov	r3, r4
 800616e:	469a      	mov	sl, r3
 8006170:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006174:	b10a      	cbz	r2, 800617a <_vfiprintf_r+0x86>
 8006176:	2a25      	cmp	r2, #37	@ 0x25
 8006178:	d1f9      	bne.n	800616e <_vfiprintf_r+0x7a>
 800617a:	ebba 0b04 	subs.w	fp, sl, r4
 800617e:	d00b      	beq.n	8006198 <_vfiprintf_r+0xa4>
 8006180:	465b      	mov	r3, fp
 8006182:	4622      	mov	r2, r4
 8006184:	4629      	mov	r1, r5
 8006186:	4630      	mov	r0, r6
 8006188:	f7ff ffa1 	bl	80060ce <__sfputs_r>
 800618c:	3001      	adds	r0, #1
 800618e:	f000 80a7 	beq.w	80062e0 <_vfiprintf_r+0x1ec>
 8006192:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006194:	445a      	add	r2, fp
 8006196:	9209      	str	r2, [sp, #36]	@ 0x24
 8006198:	f89a 3000 	ldrb.w	r3, [sl]
 800619c:	2b00      	cmp	r3, #0
 800619e:	f000 809f 	beq.w	80062e0 <_vfiprintf_r+0x1ec>
 80061a2:	2300      	movs	r3, #0
 80061a4:	f04f 32ff 	mov.w	r2, #4294967295
 80061a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061ac:	f10a 0a01 	add.w	sl, sl, #1
 80061b0:	9304      	str	r3, [sp, #16]
 80061b2:	9307      	str	r3, [sp, #28]
 80061b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80061b8:	931a      	str	r3, [sp, #104]	@ 0x68
 80061ba:	4654      	mov	r4, sl
 80061bc:	2205      	movs	r2, #5
 80061be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061c2:	4853      	ldr	r0, [pc, #332]	@ (8006310 <_vfiprintf_r+0x21c>)
 80061c4:	f7fa f804 	bl	80001d0 <memchr>
 80061c8:	9a04      	ldr	r2, [sp, #16]
 80061ca:	b9d8      	cbnz	r0, 8006204 <_vfiprintf_r+0x110>
 80061cc:	06d1      	lsls	r1, r2, #27
 80061ce:	bf44      	itt	mi
 80061d0:	2320      	movmi	r3, #32
 80061d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80061d6:	0713      	lsls	r3, r2, #28
 80061d8:	bf44      	itt	mi
 80061da:	232b      	movmi	r3, #43	@ 0x2b
 80061dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80061e0:	f89a 3000 	ldrb.w	r3, [sl]
 80061e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80061e6:	d015      	beq.n	8006214 <_vfiprintf_r+0x120>
 80061e8:	9a07      	ldr	r2, [sp, #28]
 80061ea:	4654      	mov	r4, sl
 80061ec:	2000      	movs	r0, #0
 80061ee:	f04f 0c0a 	mov.w	ip, #10
 80061f2:	4621      	mov	r1, r4
 80061f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061f8:	3b30      	subs	r3, #48	@ 0x30
 80061fa:	2b09      	cmp	r3, #9
 80061fc:	d94b      	bls.n	8006296 <_vfiprintf_r+0x1a2>
 80061fe:	b1b0      	cbz	r0, 800622e <_vfiprintf_r+0x13a>
 8006200:	9207      	str	r2, [sp, #28]
 8006202:	e014      	b.n	800622e <_vfiprintf_r+0x13a>
 8006204:	eba0 0308 	sub.w	r3, r0, r8
 8006208:	fa09 f303 	lsl.w	r3, r9, r3
 800620c:	4313      	orrs	r3, r2
 800620e:	9304      	str	r3, [sp, #16]
 8006210:	46a2      	mov	sl, r4
 8006212:	e7d2      	b.n	80061ba <_vfiprintf_r+0xc6>
 8006214:	9b03      	ldr	r3, [sp, #12]
 8006216:	1d19      	adds	r1, r3, #4
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	9103      	str	r1, [sp, #12]
 800621c:	2b00      	cmp	r3, #0
 800621e:	bfbb      	ittet	lt
 8006220:	425b      	neglt	r3, r3
 8006222:	f042 0202 	orrlt.w	r2, r2, #2
 8006226:	9307      	strge	r3, [sp, #28]
 8006228:	9307      	strlt	r3, [sp, #28]
 800622a:	bfb8      	it	lt
 800622c:	9204      	strlt	r2, [sp, #16]
 800622e:	7823      	ldrb	r3, [r4, #0]
 8006230:	2b2e      	cmp	r3, #46	@ 0x2e
 8006232:	d10a      	bne.n	800624a <_vfiprintf_r+0x156>
 8006234:	7863      	ldrb	r3, [r4, #1]
 8006236:	2b2a      	cmp	r3, #42	@ 0x2a
 8006238:	d132      	bne.n	80062a0 <_vfiprintf_r+0x1ac>
 800623a:	9b03      	ldr	r3, [sp, #12]
 800623c:	1d1a      	adds	r2, r3, #4
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	9203      	str	r2, [sp, #12]
 8006242:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006246:	3402      	adds	r4, #2
 8006248:	9305      	str	r3, [sp, #20]
 800624a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006320 <_vfiprintf_r+0x22c>
 800624e:	7821      	ldrb	r1, [r4, #0]
 8006250:	2203      	movs	r2, #3
 8006252:	4650      	mov	r0, sl
 8006254:	f7f9 ffbc 	bl	80001d0 <memchr>
 8006258:	b138      	cbz	r0, 800626a <_vfiprintf_r+0x176>
 800625a:	9b04      	ldr	r3, [sp, #16]
 800625c:	eba0 000a 	sub.w	r0, r0, sl
 8006260:	2240      	movs	r2, #64	@ 0x40
 8006262:	4082      	lsls	r2, r0
 8006264:	4313      	orrs	r3, r2
 8006266:	3401      	adds	r4, #1
 8006268:	9304      	str	r3, [sp, #16]
 800626a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800626e:	4829      	ldr	r0, [pc, #164]	@ (8006314 <_vfiprintf_r+0x220>)
 8006270:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006274:	2206      	movs	r2, #6
 8006276:	f7f9 ffab 	bl	80001d0 <memchr>
 800627a:	2800      	cmp	r0, #0
 800627c:	d03f      	beq.n	80062fe <_vfiprintf_r+0x20a>
 800627e:	4b26      	ldr	r3, [pc, #152]	@ (8006318 <_vfiprintf_r+0x224>)
 8006280:	bb1b      	cbnz	r3, 80062ca <_vfiprintf_r+0x1d6>
 8006282:	9b03      	ldr	r3, [sp, #12]
 8006284:	3307      	adds	r3, #7
 8006286:	f023 0307 	bic.w	r3, r3, #7
 800628a:	3308      	adds	r3, #8
 800628c:	9303      	str	r3, [sp, #12]
 800628e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006290:	443b      	add	r3, r7
 8006292:	9309      	str	r3, [sp, #36]	@ 0x24
 8006294:	e76a      	b.n	800616c <_vfiprintf_r+0x78>
 8006296:	fb0c 3202 	mla	r2, ip, r2, r3
 800629a:	460c      	mov	r4, r1
 800629c:	2001      	movs	r0, #1
 800629e:	e7a8      	b.n	80061f2 <_vfiprintf_r+0xfe>
 80062a0:	2300      	movs	r3, #0
 80062a2:	3401      	adds	r4, #1
 80062a4:	9305      	str	r3, [sp, #20]
 80062a6:	4619      	mov	r1, r3
 80062a8:	f04f 0c0a 	mov.w	ip, #10
 80062ac:	4620      	mov	r0, r4
 80062ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062b2:	3a30      	subs	r2, #48	@ 0x30
 80062b4:	2a09      	cmp	r2, #9
 80062b6:	d903      	bls.n	80062c0 <_vfiprintf_r+0x1cc>
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d0c6      	beq.n	800624a <_vfiprintf_r+0x156>
 80062bc:	9105      	str	r1, [sp, #20]
 80062be:	e7c4      	b.n	800624a <_vfiprintf_r+0x156>
 80062c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80062c4:	4604      	mov	r4, r0
 80062c6:	2301      	movs	r3, #1
 80062c8:	e7f0      	b.n	80062ac <_vfiprintf_r+0x1b8>
 80062ca:	ab03      	add	r3, sp, #12
 80062cc:	9300      	str	r3, [sp, #0]
 80062ce:	462a      	mov	r2, r5
 80062d0:	4b12      	ldr	r3, [pc, #72]	@ (800631c <_vfiprintf_r+0x228>)
 80062d2:	a904      	add	r1, sp, #16
 80062d4:	4630      	mov	r0, r6
 80062d6:	f3af 8000 	nop.w
 80062da:	4607      	mov	r7, r0
 80062dc:	1c78      	adds	r0, r7, #1
 80062de:	d1d6      	bne.n	800628e <_vfiprintf_r+0x19a>
 80062e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80062e2:	07d9      	lsls	r1, r3, #31
 80062e4:	d405      	bmi.n	80062f2 <_vfiprintf_r+0x1fe>
 80062e6:	89ab      	ldrh	r3, [r5, #12]
 80062e8:	059a      	lsls	r2, r3, #22
 80062ea:	d402      	bmi.n	80062f2 <_vfiprintf_r+0x1fe>
 80062ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80062ee:	f7ff fc85 	bl	8005bfc <__retarget_lock_release_recursive>
 80062f2:	89ab      	ldrh	r3, [r5, #12]
 80062f4:	065b      	lsls	r3, r3, #25
 80062f6:	f53f af1f 	bmi.w	8006138 <_vfiprintf_r+0x44>
 80062fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80062fc:	e71e      	b.n	800613c <_vfiprintf_r+0x48>
 80062fe:	ab03      	add	r3, sp, #12
 8006300:	9300      	str	r3, [sp, #0]
 8006302:	462a      	mov	r2, r5
 8006304:	4b05      	ldr	r3, [pc, #20]	@ (800631c <_vfiprintf_r+0x228>)
 8006306:	a904      	add	r1, sp, #16
 8006308:	4630      	mov	r0, r6
 800630a:	f000 f879 	bl	8006400 <_printf_i>
 800630e:	e7e4      	b.n	80062da <_vfiprintf_r+0x1e6>
 8006310:	08006b7c 	.word	0x08006b7c
 8006314:	08006b86 	.word	0x08006b86
 8006318:	00000000 	.word	0x00000000
 800631c:	080060cf 	.word	0x080060cf
 8006320:	08006b82 	.word	0x08006b82

08006324 <_printf_common>:
 8006324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006328:	4616      	mov	r6, r2
 800632a:	4698      	mov	r8, r3
 800632c:	688a      	ldr	r2, [r1, #8]
 800632e:	690b      	ldr	r3, [r1, #16]
 8006330:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006334:	4293      	cmp	r3, r2
 8006336:	bfb8      	it	lt
 8006338:	4613      	movlt	r3, r2
 800633a:	6033      	str	r3, [r6, #0]
 800633c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006340:	4607      	mov	r7, r0
 8006342:	460c      	mov	r4, r1
 8006344:	b10a      	cbz	r2, 800634a <_printf_common+0x26>
 8006346:	3301      	adds	r3, #1
 8006348:	6033      	str	r3, [r6, #0]
 800634a:	6823      	ldr	r3, [r4, #0]
 800634c:	0699      	lsls	r1, r3, #26
 800634e:	bf42      	ittt	mi
 8006350:	6833      	ldrmi	r3, [r6, #0]
 8006352:	3302      	addmi	r3, #2
 8006354:	6033      	strmi	r3, [r6, #0]
 8006356:	6825      	ldr	r5, [r4, #0]
 8006358:	f015 0506 	ands.w	r5, r5, #6
 800635c:	d106      	bne.n	800636c <_printf_common+0x48>
 800635e:	f104 0a19 	add.w	sl, r4, #25
 8006362:	68e3      	ldr	r3, [r4, #12]
 8006364:	6832      	ldr	r2, [r6, #0]
 8006366:	1a9b      	subs	r3, r3, r2
 8006368:	42ab      	cmp	r3, r5
 800636a:	dc26      	bgt.n	80063ba <_printf_common+0x96>
 800636c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006370:	6822      	ldr	r2, [r4, #0]
 8006372:	3b00      	subs	r3, #0
 8006374:	bf18      	it	ne
 8006376:	2301      	movne	r3, #1
 8006378:	0692      	lsls	r2, r2, #26
 800637a:	d42b      	bmi.n	80063d4 <_printf_common+0xb0>
 800637c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006380:	4641      	mov	r1, r8
 8006382:	4638      	mov	r0, r7
 8006384:	47c8      	blx	r9
 8006386:	3001      	adds	r0, #1
 8006388:	d01e      	beq.n	80063c8 <_printf_common+0xa4>
 800638a:	6823      	ldr	r3, [r4, #0]
 800638c:	6922      	ldr	r2, [r4, #16]
 800638e:	f003 0306 	and.w	r3, r3, #6
 8006392:	2b04      	cmp	r3, #4
 8006394:	bf02      	ittt	eq
 8006396:	68e5      	ldreq	r5, [r4, #12]
 8006398:	6833      	ldreq	r3, [r6, #0]
 800639a:	1aed      	subeq	r5, r5, r3
 800639c:	68a3      	ldr	r3, [r4, #8]
 800639e:	bf0c      	ite	eq
 80063a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063a4:	2500      	movne	r5, #0
 80063a6:	4293      	cmp	r3, r2
 80063a8:	bfc4      	itt	gt
 80063aa:	1a9b      	subgt	r3, r3, r2
 80063ac:	18ed      	addgt	r5, r5, r3
 80063ae:	2600      	movs	r6, #0
 80063b0:	341a      	adds	r4, #26
 80063b2:	42b5      	cmp	r5, r6
 80063b4:	d11a      	bne.n	80063ec <_printf_common+0xc8>
 80063b6:	2000      	movs	r0, #0
 80063b8:	e008      	b.n	80063cc <_printf_common+0xa8>
 80063ba:	2301      	movs	r3, #1
 80063bc:	4652      	mov	r2, sl
 80063be:	4641      	mov	r1, r8
 80063c0:	4638      	mov	r0, r7
 80063c2:	47c8      	blx	r9
 80063c4:	3001      	adds	r0, #1
 80063c6:	d103      	bne.n	80063d0 <_printf_common+0xac>
 80063c8:	f04f 30ff 	mov.w	r0, #4294967295
 80063cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063d0:	3501      	adds	r5, #1
 80063d2:	e7c6      	b.n	8006362 <_printf_common+0x3e>
 80063d4:	18e1      	adds	r1, r4, r3
 80063d6:	1c5a      	adds	r2, r3, #1
 80063d8:	2030      	movs	r0, #48	@ 0x30
 80063da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80063de:	4422      	add	r2, r4
 80063e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80063e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80063e8:	3302      	adds	r3, #2
 80063ea:	e7c7      	b.n	800637c <_printf_common+0x58>
 80063ec:	2301      	movs	r3, #1
 80063ee:	4622      	mov	r2, r4
 80063f0:	4641      	mov	r1, r8
 80063f2:	4638      	mov	r0, r7
 80063f4:	47c8      	blx	r9
 80063f6:	3001      	adds	r0, #1
 80063f8:	d0e6      	beq.n	80063c8 <_printf_common+0xa4>
 80063fa:	3601      	adds	r6, #1
 80063fc:	e7d9      	b.n	80063b2 <_printf_common+0x8e>
	...

08006400 <_printf_i>:
 8006400:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006404:	7e0f      	ldrb	r7, [r1, #24]
 8006406:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006408:	2f78      	cmp	r7, #120	@ 0x78
 800640a:	4691      	mov	r9, r2
 800640c:	4680      	mov	r8, r0
 800640e:	460c      	mov	r4, r1
 8006410:	469a      	mov	sl, r3
 8006412:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006416:	d807      	bhi.n	8006428 <_printf_i+0x28>
 8006418:	2f62      	cmp	r7, #98	@ 0x62
 800641a:	d80a      	bhi.n	8006432 <_printf_i+0x32>
 800641c:	2f00      	cmp	r7, #0
 800641e:	f000 80d2 	beq.w	80065c6 <_printf_i+0x1c6>
 8006422:	2f58      	cmp	r7, #88	@ 0x58
 8006424:	f000 80b9 	beq.w	800659a <_printf_i+0x19a>
 8006428:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800642c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006430:	e03a      	b.n	80064a8 <_printf_i+0xa8>
 8006432:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006436:	2b15      	cmp	r3, #21
 8006438:	d8f6      	bhi.n	8006428 <_printf_i+0x28>
 800643a:	a101      	add	r1, pc, #4	@ (adr r1, 8006440 <_printf_i+0x40>)
 800643c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006440:	08006499 	.word	0x08006499
 8006444:	080064ad 	.word	0x080064ad
 8006448:	08006429 	.word	0x08006429
 800644c:	08006429 	.word	0x08006429
 8006450:	08006429 	.word	0x08006429
 8006454:	08006429 	.word	0x08006429
 8006458:	080064ad 	.word	0x080064ad
 800645c:	08006429 	.word	0x08006429
 8006460:	08006429 	.word	0x08006429
 8006464:	08006429 	.word	0x08006429
 8006468:	08006429 	.word	0x08006429
 800646c:	080065ad 	.word	0x080065ad
 8006470:	080064d7 	.word	0x080064d7
 8006474:	08006567 	.word	0x08006567
 8006478:	08006429 	.word	0x08006429
 800647c:	08006429 	.word	0x08006429
 8006480:	080065cf 	.word	0x080065cf
 8006484:	08006429 	.word	0x08006429
 8006488:	080064d7 	.word	0x080064d7
 800648c:	08006429 	.word	0x08006429
 8006490:	08006429 	.word	0x08006429
 8006494:	0800656f 	.word	0x0800656f
 8006498:	6833      	ldr	r3, [r6, #0]
 800649a:	1d1a      	adds	r2, r3, #4
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	6032      	str	r2, [r6, #0]
 80064a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80064a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80064a8:	2301      	movs	r3, #1
 80064aa:	e09d      	b.n	80065e8 <_printf_i+0x1e8>
 80064ac:	6833      	ldr	r3, [r6, #0]
 80064ae:	6820      	ldr	r0, [r4, #0]
 80064b0:	1d19      	adds	r1, r3, #4
 80064b2:	6031      	str	r1, [r6, #0]
 80064b4:	0606      	lsls	r6, r0, #24
 80064b6:	d501      	bpl.n	80064bc <_printf_i+0xbc>
 80064b8:	681d      	ldr	r5, [r3, #0]
 80064ba:	e003      	b.n	80064c4 <_printf_i+0xc4>
 80064bc:	0645      	lsls	r5, r0, #25
 80064be:	d5fb      	bpl.n	80064b8 <_printf_i+0xb8>
 80064c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80064c4:	2d00      	cmp	r5, #0
 80064c6:	da03      	bge.n	80064d0 <_printf_i+0xd0>
 80064c8:	232d      	movs	r3, #45	@ 0x2d
 80064ca:	426d      	negs	r5, r5
 80064cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064d0:	4859      	ldr	r0, [pc, #356]	@ (8006638 <_printf_i+0x238>)
 80064d2:	230a      	movs	r3, #10
 80064d4:	e011      	b.n	80064fa <_printf_i+0xfa>
 80064d6:	6821      	ldr	r1, [r4, #0]
 80064d8:	6833      	ldr	r3, [r6, #0]
 80064da:	0608      	lsls	r0, r1, #24
 80064dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80064e0:	d402      	bmi.n	80064e8 <_printf_i+0xe8>
 80064e2:	0649      	lsls	r1, r1, #25
 80064e4:	bf48      	it	mi
 80064e6:	b2ad      	uxthmi	r5, r5
 80064e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80064ea:	4853      	ldr	r0, [pc, #332]	@ (8006638 <_printf_i+0x238>)
 80064ec:	6033      	str	r3, [r6, #0]
 80064ee:	bf14      	ite	ne
 80064f0:	230a      	movne	r3, #10
 80064f2:	2308      	moveq	r3, #8
 80064f4:	2100      	movs	r1, #0
 80064f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80064fa:	6866      	ldr	r6, [r4, #4]
 80064fc:	60a6      	str	r6, [r4, #8]
 80064fe:	2e00      	cmp	r6, #0
 8006500:	bfa2      	ittt	ge
 8006502:	6821      	ldrge	r1, [r4, #0]
 8006504:	f021 0104 	bicge.w	r1, r1, #4
 8006508:	6021      	strge	r1, [r4, #0]
 800650a:	b90d      	cbnz	r5, 8006510 <_printf_i+0x110>
 800650c:	2e00      	cmp	r6, #0
 800650e:	d04b      	beq.n	80065a8 <_printf_i+0x1a8>
 8006510:	4616      	mov	r6, r2
 8006512:	fbb5 f1f3 	udiv	r1, r5, r3
 8006516:	fb03 5711 	mls	r7, r3, r1, r5
 800651a:	5dc7      	ldrb	r7, [r0, r7]
 800651c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006520:	462f      	mov	r7, r5
 8006522:	42bb      	cmp	r3, r7
 8006524:	460d      	mov	r5, r1
 8006526:	d9f4      	bls.n	8006512 <_printf_i+0x112>
 8006528:	2b08      	cmp	r3, #8
 800652a:	d10b      	bne.n	8006544 <_printf_i+0x144>
 800652c:	6823      	ldr	r3, [r4, #0]
 800652e:	07df      	lsls	r7, r3, #31
 8006530:	d508      	bpl.n	8006544 <_printf_i+0x144>
 8006532:	6923      	ldr	r3, [r4, #16]
 8006534:	6861      	ldr	r1, [r4, #4]
 8006536:	4299      	cmp	r1, r3
 8006538:	bfde      	ittt	le
 800653a:	2330      	movle	r3, #48	@ 0x30
 800653c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006540:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006544:	1b92      	subs	r2, r2, r6
 8006546:	6122      	str	r2, [r4, #16]
 8006548:	f8cd a000 	str.w	sl, [sp]
 800654c:	464b      	mov	r3, r9
 800654e:	aa03      	add	r2, sp, #12
 8006550:	4621      	mov	r1, r4
 8006552:	4640      	mov	r0, r8
 8006554:	f7ff fee6 	bl	8006324 <_printf_common>
 8006558:	3001      	adds	r0, #1
 800655a:	d14a      	bne.n	80065f2 <_printf_i+0x1f2>
 800655c:	f04f 30ff 	mov.w	r0, #4294967295
 8006560:	b004      	add	sp, #16
 8006562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006566:	6823      	ldr	r3, [r4, #0]
 8006568:	f043 0320 	orr.w	r3, r3, #32
 800656c:	6023      	str	r3, [r4, #0]
 800656e:	4833      	ldr	r0, [pc, #204]	@ (800663c <_printf_i+0x23c>)
 8006570:	2778      	movs	r7, #120	@ 0x78
 8006572:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006576:	6823      	ldr	r3, [r4, #0]
 8006578:	6831      	ldr	r1, [r6, #0]
 800657a:	061f      	lsls	r7, r3, #24
 800657c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006580:	d402      	bmi.n	8006588 <_printf_i+0x188>
 8006582:	065f      	lsls	r7, r3, #25
 8006584:	bf48      	it	mi
 8006586:	b2ad      	uxthmi	r5, r5
 8006588:	6031      	str	r1, [r6, #0]
 800658a:	07d9      	lsls	r1, r3, #31
 800658c:	bf44      	itt	mi
 800658e:	f043 0320 	orrmi.w	r3, r3, #32
 8006592:	6023      	strmi	r3, [r4, #0]
 8006594:	b11d      	cbz	r5, 800659e <_printf_i+0x19e>
 8006596:	2310      	movs	r3, #16
 8006598:	e7ac      	b.n	80064f4 <_printf_i+0xf4>
 800659a:	4827      	ldr	r0, [pc, #156]	@ (8006638 <_printf_i+0x238>)
 800659c:	e7e9      	b.n	8006572 <_printf_i+0x172>
 800659e:	6823      	ldr	r3, [r4, #0]
 80065a0:	f023 0320 	bic.w	r3, r3, #32
 80065a4:	6023      	str	r3, [r4, #0]
 80065a6:	e7f6      	b.n	8006596 <_printf_i+0x196>
 80065a8:	4616      	mov	r6, r2
 80065aa:	e7bd      	b.n	8006528 <_printf_i+0x128>
 80065ac:	6833      	ldr	r3, [r6, #0]
 80065ae:	6825      	ldr	r5, [r4, #0]
 80065b0:	6961      	ldr	r1, [r4, #20]
 80065b2:	1d18      	adds	r0, r3, #4
 80065b4:	6030      	str	r0, [r6, #0]
 80065b6:	062e      	lsls	r6, r5, #24
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	d501      	bpl.n	80065c0 <_printf_i+0x1c0>
 80065bc:	6019      	str	r1, [r3, #0]
 80065be:	e002      	b.n	80065c6 <_printf_i+0x1c6>
 80065c0:	0668      	lsls	r0, r5, #25
 80065c2:	d5fb      	bpl.n	80065bc <_printf_i+0x1bc>
 80065c4:	8019      	strh	r1, [r3, #0]
 80065c6:	2300      	movs	r3, #0
 80065c8:	6123      	str	r3, [r4, #16]
 80065ca:	4616      	mov	r6, r2
 80065cc:	e7bc      	b.n	8006548 <_printf_i+0x148>
 80065ce:	6833      	ldr	r3, [r6, #0]
 80065d0:	1d1a      	adds	r2, r3, #4
 80065d2:	6032      	str	r2, [r6, #0]
 80065d4:	681e      	ldr	r6, [r3, #0]
 80065d6:	6862      	ldr	r2, [r4, #4]
 80065d8:	2100      	movs	r1, #0
 80065da:	4630      	mov	r0, r6
 80065dc:	f7f9 fdf8 	bl	80001d0 <memchr>
 80065e0:	b108      	cbz	r0, 80065e6 <_printf_i+0x1e6>
 80065e2:	1b80      	subs	r0, r0, r6
 80065e4:	6060      	str	r0, [r4, #4]
 80065e6:	6863      	ldr	r3, [r4, #4]
 80065e8:	6123      	str	r3, [r4, #16]
 80065ea:	2300      	movs	r3, #0
 80065ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065f0:	e7aa      	b.n	8006548 <_printf_i+0x148>
 80065f2:	6923      	ldr	r3, [r4, #16]
 80065f4:	4632      	mov	r2, r6
 80065f6:	4649      	mov	r1, r9
 80065f8:	4640      	mov	r0, r8
 80065fa:	47d0      	blx	sl
 80065fc:	3001      	adds	r0, #1
 80065fe:	d0ad      	beq.n	800655c <_printf_i+0x15c>
 8006600:	6823      	ldr	r3, [r4, #0]
 8006602:	079b      	lsls	r3, r3, #30
 8006604:	d413      	bmi.n	800662e <_printf_i+0x22e>
 8006606:	68e0      	ldr	r0, [r4, #12]
 8006608:	9b03      	ldr	r3, [sp, #12]
 800660a:	4298      	cmp	r0, r3
 800660c:	bfb8      	it	lt
 800660e:	4618      	movlt	r0, r3
 8006610:	e7a6      	b.n	8006560 <_printf_i+0x160>
 8006612:	2301      	movs	r3, #1
 8006614:	4632      	mov	r2, r6
 8006616:	4649      	mov	r1, r9
 8006618:	4640      	mov	r0, r8
 800661a:	47d0      	blx	sl
 800661c:	3001      	adds	r0, #1
 800661e:	d09d      	beq.n	800655c <_printf_i+0x15c>
 8006620:	3501      	adds	r5, #1
 8006622:	68e3      	ldr	r3, [r4, #12]
 8006624:	9903      	ldr	r1, [sp, #12]
 8006626:	1a5b      	subs	r3, r3, r1
 8006628:	42ab      	cmp	r3, r5
 800662a:	dcf2      	bgt.n	8006612 <_printf_i+0x212>
 800662c:	e7eb      	b.n	8006606 <_printf_i+0x206>
 800662e:	2500      	movs	r5, #0
 8006630:	f104 0619 	add.w	r6, r4, #25
 8006634:	e7f5      	b.n	8006622 <_printf_i+0x222>
 8006636:	bf00      	nop
 8006638:	08006b8d 	.word	0x08006b8d
 800663c:	08006b9e 	.word	0x08006b9e

08006640 <__sflush_r>:
 8006640:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006648:	0716      	lsls	r6, r2, #28
 800664a:	4605      	mov	r5, r0
 800664c:	460c      	mov	r4, r1
 800664e:	d454      	bmi.n	80066fa <__sflush_r+0xba>
 8006650:	684b      	ldr	r3, [r1, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	dc02      	bgt.n	800665c <__sflush_r+0x1c>
 8006656:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006658:	2b00      	cmp	r3, #0
 800665a:	dd48      	ble.n	80066ee <__sflush_r+0xae>
 800665c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800665e:	2e00      	cmp	r6, #0
 8006660:	d045      	beq.n	80066ee <__sflush_r+0xae>
 8006662:	2300      	movs	r3, #0
 8006664:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006668:	682f      	ldr	r7, [r5, #0]
 800666a:	6a21      	ldr	r1, [r4, #32]
 800666c:	602b      	str	r3, [r5, #0]
 800666e:	d030      	beq.n	80066d2 <__sflush_r+0x92>
 8006670:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006672:	89a3      	ldrh	r3, [r4, #12]
 8006674:	0759      	lsls	r1, r3, #29
 8006676:	d505      	bpl.n	8006684 <__sflush_r+0x44>
 8006678:	6863      	ldr	r3, [r4, #4]
 800667a:	1ad2      	subs	r2, r2, r3
 800667c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800667e:	b10b      	cbz	r3, 8006684 <__sflush_r+0x44>
 8006680:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006682:	1ad2      	subs	r2, r2, r3
 8006684:	2300      	movs	r3, #0
 8006686:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006688:	6a21      	ldr	r1, [r4, #32]
 800668a:	4628      	mov	r0, r5
 800668c:	47b0      	blx	r6
 800668e:	1c43      	adds	r3, r0, #1
 8006690:	89a3      	ldrh	r3, [r4, #12]
 8006692:	d106      	bne.n	80066a2 <__sflush_r+0x62>
 8006694:	6829      	ldr	r1, [r5, #0]
 8006696:	291d      	cmp	r1, #29
 8006698:	d82b      	bhi.n	80066f2 <__sflush_r+0xb2>
 800669a:	4a2a      	ldr	r2, [pc, #168]	@ (8006744 <__sflush_r+0x104>)
 800669c:	410a      	asrs	r2, r1
 800669e:	07d6      	lsls	r6, r2, #31
 80066a0:	d427      	bmi.n	80066f2 <__sflush_r+0xb2>
 80066a2:	2200      	movs	r2, #0
 80066a4:	6062      	str	r2, [r4, #4]
 80066a6:	04d9      	lsls	r1, r3, #19
 80066a8:	6922      	ldr	r2, [r4, #16]
 80066aa:	6022      	str	r2, [r4, #0]
 80066ac:	d504      	bpl.n	80066b8 <__sflush_r+0x78>
 80066ae:	1c42      	adds	r2, r0, #1
 80066b0:	d101      	bne.n	80066b6 <__sflush_r+0x76>
 80066b2:	682b      	ldr	r3, [r5, #0]
 80066b4:	b903      	cbnz	r3, 80066b8 <__sflush_r+0x78>
 80066b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80066b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80066ba:	602f      	str	r7, [r5, #0]
 80066bc:	b1b9      	cbz	r1, 80066ee <__sflush_r+0xae>
 80066be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80066c2:	4299      	cmp	r1, r3
 80066c4:	d002      	beq.n	80066cc <__sflush_r+0x8c>
 80066c6:	4628      	mov	r0, r5
 80066c8:	f7ff fa9a 	bl	8005c00 <_free_r>
 80066cc:	2300      	movs	r3, #0
 80066ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80066d0:	e00d      	b.n	80066ee <__sflush_r+0xae>
 80066d2:	2301      	movs	r3, #1
 80066d4:	4628      	mov	r0, r5
 80066d6:	47b0      	blx	r6
 80066d8:	4602      	mov	r2, r0
 80066da:	1c50      	adds	r0, r2, #1
 80066dc:	d1c9      	bne.n	8006672 <__sflush_r+0x32>
 80066de:	682b      	ldr	r3, [r5, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d0c6      	beq.n	8006672 <__sflush_r+0x32>
 80066e4:	2b1d      	cmp	r3, #29
 80066e6:	d001      	beq.n	80066ec <__sflush_r+0xac>
 80066e8:	2b16      	cmp	r3, #22
 80066ea:	d11e      	bne.n	800672a <__sflush_r+0xea>
 80066ec:	602f      	str	r7, [r5, #0]
 80066ee:	2000      	movs	r0, #0
 80066f0:	e022      	b.n	8006738 <__sflush_r+0xf8>
 80066f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066f6:	b21b      	sxth	r3, r3
 80066f8:	e01b      	b.n	8006732 <__sflush_r+0xf2>
 80066fa:	690f      	ldr	r7, [r1, #16]
 80066fc:	2f00      	cmp	r7, #0
 80066fe:	d0f6      	beq.n	80066ee <__sflush_r+0xae>
 8006700:	0793      	lsls	r3, r2, #30
 8006702:	680e      	ldr	r6, [r1, #0]
 8006704:	bf08      	it	eq
 8006706:	694b      	ldreq	r3, [r1, #20]
 8006708:	600f      	str	r7, [r1, #0]
 800670a:	bf18      	it	ne
 800670c:	2300      	movne	r3, #0
 800670e:	eba6 0807 	sub.w	r8, r6, r7
 8006712:	608b      	str	r3, [r1, #8]
 8006714:	f1b8 0f00 	cmp.w	r8, #0
 8006718:	dde9      	ble.n	80066ee <__sflush_r+0xae>
 800671a:	6a21      	ldr	r1, [r4, #32]
 800671c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800671e:	4643      	mov	r3, r8
 8006720:	463a      	mov	r2, r7
 8006722:	4628      	mov	r0, r5
 8006724:	47b0      	blx	r6
 8006726:	2800      	cmp	r0, #0
 8006728:	dc08      	bgt.n	800673c <__sflush_r+0xfc>
 800672a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800672e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006732:	81a3      	strh	r3, [r4, #12]
 8006734:	f04f 30ff 	mov.w	r0, #4294967295
 8006738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800673c:	4407      	add	r7, r0
 800673e:	eba8 0800 	sub.w	r8, r8, r0
 8006742:	e7e7      	b.n	8006714 <__sflush_r+0xd4>
 8006744:	dfbffffe 	.word	0xdfbffffe

08006748 <_fflush_r>:
 8006748:	b538      	push	{r3, r4, r5, lr}
 800674a:	690b      	ldr	r3, [r1, #16]
 800674c:	4605      	mov	r5, r0
 800674e:	460c      	mov	r4, r1
 8006750:	b913      	cbnz	r3, 8006758 <_fflush_r+0x10>
 8006752:	2500      	movs	r5, #0
 8006754:	4628      	mov	r0, r5
 8006756:	bd38      	pop	{r3, r4, r5, pc}
 8006758:	b118      	cbz	r0, 8006762 <_fflush_r+0x1a>
 800675a:	6a03      	ldr	r3, [r0, #32]
 800675c:	b90b      	cbnz	r3, 8006762 <_fflush_r+0x1a>
 800675e:	f7ff f927 	bl	80059b0 <__sinit>
 8006762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d0f3      	beq.n	8006752 <_fflush_r+0xa>
 800676a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800676c:	07d0      	lsls	r0, r2, #31
 800676e:	d404      	bmi.n	800677a <_fflush_r+0x32>
 8006770:	0599      	lsls	r1, r3, #22
 8006772:	d402      	bmi.n	800677a <_fflush_r+0x32>
 8006774:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006776:	f7ff fa40 	bl	8005bfa <__retarget_lock_acquire_recursive>
 800677a:	4628      	mov	r0, r5
 800677c:	4621      	mov	r1, r4
 800677e:	f7ff ff5f 	bl	8006640 <__sflush_r>
 8006782:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006784:	07da      	lsls	r2, r3, #31
 8006786:	4605      	mov	r5, r0
 8006788:	d4e4      	bmi.n	8006754 <_fflush_r+0xc>
 800678a:	89a3      	ldrh	r3, [r4, #12]
 800678c:	059b      	lsls	r3, r3, #22
 800678e:	d4e1      	bmi.n	8006754 <_fflush_r+0xc>
 8006790:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006792:	f7ff fa33 	bl	8005bfc <__retarget_lock_release_recursive>
 8006796:	e7dd      	b.n	8006754 <_fflush_r+0xc>

08006798 <__swbuf_r>:
 8006798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800679a:	460e      	mov	r6, r1
 800679c:	4614      	mov	r4, r2
 800679e:	4605      	mov	r5, r0
 80067a0:	b118      	cbz	r0, 80067aa <__swbuf_r+0x12>
 80067a2:	6a03      	ldr	r3, [r0, #32]
 80067a4:	b90b      	cbnz	r3, 80067aa <__swbuf_r+0x12>
 80067a6:	f7ff f903 	bl	80059b0 <__sinit>
 80067aa:	69a3      	ldr	r3, [r4, #24]
 80067ac:	60a3      	str	r3, [r4, #8]
 80067ae:	89a3      	ldrh	r3, [r4, #12]
 80067b0:	071a      	lsls	r2, r3, #28
 80067b2:	d501      	bpl.n	80067b8 <__swbuf_r+0x20>
 80067b4:	6923      	ldr	r3, [r4, #16]
 80067b6:	b943      	cbnz	r3, 80067ca <__swbuf_r+0x32>
 80067b8:	4621      	mov	r1, r4
 80067ba:	4628      	mov	r0, r5
 80067bc:	f000 f82a 	bl	8006814 <__swsetup_r>
 80067c0:	b118      	cbz	r0, 80067ca <__swbuf_r+0x32>
 80067c2:	f04f 37ff 	mov.w	r7, #4294967295
 80067c6:	4638      	mov	r0, r7
 80067c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067ca:	6823      	ldr	r3, [r4, #0]
 80067cc:	6922      	ldr	r2, [r4, #16]
 80067ce:	1a98      	subs	r0, r3, r2
 80067d0:	6963      	ldr	r3, [r4, #20]
 80067d2:	b2f6      	uxtb	r6, r6
 80067d4:	4283      	cmp	r3, r0
 80067d6:	4637      	mov	r7, r6
 80067d8:	dc05      	bgt.n	80067e6 <__swbuf_r+0x4e>
 80067da:	4621      	mov	r1, r4
 80067dc:	4628      	mov	r0, r5
 80067de:	f7ff ffb3 	bl	8006748 <_fflush_r>
 80067e2:	2800      	cmp	r0, #0
 80067e4:	d1ed      	bne.n	80067c2 <__swbuf_r+0x2a>
 80067e6:	68a3      	ldr	r3, [r4, #8]
 80067e8:	3b01      	subs	r3, #1
 80067ea:	60a3      	str	r3, [r4, #8]
 80067ec:	6823      	ldr	r3, [r4, #0]
 80067ee:	1c5a      	adds	r2, r3, #1
 80067f0:	6022      	str	r2, [r4, #0]
 80067f2:	701e      	strb	r6, [r3, #0]
 80067f4:	6962      	ldr	r2, [r4, #20]
 80067f6:	1c43      	adds	r3, r0, #1
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d004      	beq.n	8006806 <__swbuf_r+0x6e>
 80067fc:	89a3      	ldrh	r3, [r4, #12]
 80067fe:	07db      	lsls	r3, r3, #31
 8006800:	d5e1      	bpl.n	80067c6 <__swbuf_r+0x2e>
 8006802:	2e0a      	cmp	r6, #10
 8006804:	d1df      	bne.n	80067c6 <__swbuf_r+0x2e>
 8006806:	4621      	mov	r1, r4
 8006808:	4628      	mov	r0, r5
 800680a:	f7ff ff9d 	bl	8006748 <_fflush_r>
 800680e:	2800      	cmp	r0, #0
 8006810:	d0d9      	beq.n	80067c6 <__swbuf_r+0x2e>
 8006812:	e7d6      	b.n	80067c2 <__swbuf_r+0x2a>

08006814 <__swsetup_r>:
 8006814:	b538      	push	{r3, r4, r5, lr}
 8006816:	4b29      	ldr	r3, [pc, #164]	@ (80068bc <__swsetup_r+0xa8>)
 8006818:	4605      	mov	r5, r0
 800681a:	6818      	ldr	r0, [r3, #0]
 800681c:	460c      	mov	r4, r1
 800681e:	b118      	cbz	r0, 8006828 <__swsetup_r+0x14>
 8006820:	6a03      	ldr	r3, [r0, #32]
 8006822:	b90b      	cbnz	r3, 8006828 <__swsetup_r+0x14>
 8006824:	f7ff f8c4 	bl	80059b0 <__sinit>
 8006828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800682c:	0719      	lsls	r1, r3, #28
 800682e:	d422      	bmi.n	8006876 <__swsetup_r+0x62>
 8006830:	06da      	lsls	r2, r3, #27
 8006832:	d407      	bmi.n	8006844 <__swsetup_r+0x30>
 8006834:	2209      	movs	r2, #9
 8006836:	602a      	str	r2, [r5, #0]
 8006838:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800683c:	81a3      	strh	r3, [r4, #12]
 800683e:	f04f 30ff 	mov.w	r0, #4294967295
 8006842:	e033      	b.n	80068ac <__swsetup_r+0x98>
 8006844:	0758      	lsls	r0, r3, #29
 8006846:	d512      	bpl.n	800686e <__swsetup_r+0x5a>
 8006848:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800684a:	b141      	cbz	r1, 800685e <__swsetup_r+0x4a>
 800684c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006850:	4299      	cmp	r1, r3
 8006852:	d002      	beq.n	800685a <__swsetup_r+0x46>
 8006854:	4628      	mov	r0, r5
 8006856:	f7ff f9d3 	bl	8005c00 <_free_r>
 800685a:	2300      	movs	r3, #0
 800685c:	6363      	str	r3, [r4, #52]	@ 0x34
 800685e:	89a3      	ldrh	r3, [r4, #12]
 8006860:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006864:	81a3      	strh	r3, [r4, #12]
 8006866:	2300      	movs	r3, #0
 8006868:	6063      	str	r3, [r4, #4]
 800686a:	6923      	ldr	r3, [r4, #16]
 800686c:	6023      	str	r3, [r4, #0]
 800686e:	89a3      	ldrh	r3, [r4, #12]
 8006870:	f043 0308 	orr.w	r3, r3, #8
 8006874:	81a3      	strh	r3, [r4, #12]
 8006876:	6923      	ldr	r3, [r4, #16]
 8006878:	b94b      	cbnz	r3, 800688e <__swsetup_r+0x7a>
 800687a:	89a3      	ldrh	r3, [r4, #12]
 800687c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006880:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006884:	d003      	beq.n	800688e <__swsetup_r+0x7a>
 8006886:	4621      	mov	r1, r4
 8006888:	4628      	mov	r0, r5
 800688a:	f000 f8a5 	bl	80069d8 <__smakebuf_r>
 800688e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006892:	f013 0201 	ands.w	r2, r3, #1
 8006896:	d00a      	beq.n	80068ae <__swsetup_r+0x9a>
 8006898:	2200      	movs	r2, #0
 800689a:	60a2      	str	r2, [r4, #8]
 800689c:	6962      	ldr	r2, [r4, #20]
 800689e:	4252      	negs	r2, r2
 80068a0:	61a2      	str	r2, [r4, #24]
 80068a2:	6922      	ldr	r2, [r4, #16]
 80068a4:	b942      	cbnz	r2, 80068b8 <__swsetup_r+0xa4>
 80068a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80068aa:	d1c5      	bne.n	8006838 <__swsetup_r+0x24>
 80068ac:	bd38      	pop	{r3, r4, r5, pc}
 80068ae:	0799      	lsls	r1, r3, #30
 80068b0:	bf58      	it	pl
 80068b2:	6962      	ldrpl	r2, [r4, #20]
 80068b4:	60a2      	str	r2, [r4, #8]
 80068b6:	e7f4      	b.n	80068a2 <__swsetup_r+0x8e>
 80068b8:	2000      	movs	r0, #0
 80068ba:	e7f7      	b.n	80068ac <__swsetup_r+0x98>
 80068bc:	20000038 	.word	0x20000038

080068c0 <memmove>:
 80068c0:	4288      	cmp	r0, r1
 80068c2:	b510      	push	{r4, lr}
 80068c4:	eb01 0402 	add.w	r4, r1, r2
 80068c8:	d902      	bls.n	80068d0 <memmove+0x10>
 80068ca:	4284      	cmp	r4, r0
 80068cc:	4623      	mov	r3, r4
 80068ce:	d807      	bhi.n	80068e0 <memmove+0x20>
 80068d0:	1e43      	subs	r3, r0, #1
 80068d2:	42a1      	cmp	r1, r4
 80068d4:	d008      	beq.n	80068e8 <memmove+0x28>
 80068d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80068de:	e7f8      	b.n	80068d2 <memmove+0x12>
 80068e0:	4402      	add	r2, r0
 80068e2:	4601      	mov	r1, r0
 80068e4:	428a      	cmp	r2, r1
 80068e6:	d100      	bne.n	80068ea <memmove+0x2a>
 80068e8:	bd10      	pop	{r4, pc}
 80068ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80068ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80068f2:	e7f7      	b.n	80068e4 <memmove+0x24>

080068f4 <_sbrk_r>:
 80068f4:	b538      	push	{r3, r4, r5, lr}
 80068f6:	4d06      	ldr	r5, [pc, #24]	@ (8006910 <_sbrk_r+0x1c>)
 80068f8:	2300      	movs	r3, #0
 80068fa:	4604      	mov	r4, r0
 80068fc:	4608      	mov	r0, r1
 80068fe:	602b      	str	r3, [r5, #0]
 8006900:	f7fb fab4 	bl	8001e6c <_sbrk>
 8006904:	1c43      	adds	r3, r0, #1
 8006906:	d102      	bne.n	800690e <_sbrk_r+0x1a>
 8006908:	682b      	ldr	r3, [r5, #0]
 800690a:	b103      	cbz	r3, 800690e <_sbrk_r+0x1a>
 800690c:	6023      	str	r3, [r4, #0]
 800690e:	bd38      	pop	{r3, r4, r5, pc}
 8006910:	200002f8 	.word	0x200002f8

08006914 <memcpy>:
 8006914:	440a      	add	r2, r1
 8006916:	4291      	cmp	r1, r2
 8006918:	f100 33ff 	add.w	r3, r0, #4294967295
 800691c:	d100      	bne.n	8006920 <memcpy+0xc>
 800691e:	4770      	bx	lr
 8006920:	b510      	push	{r4, lr}
 8006922:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006926:	f803 4f01 	strb.w	r4, [r3, #1]!
 800692a:	4291      	cmp	r1, r2
 800692c:	d1f9      	bne.n	8006922 <memcpy+0xe>
 800692e:	bd10      	pop	{r4, pc}

08006930 <_realloc_r>:
 8006930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006934:	4680      	mov	r8, r0
 8006936:	4615      	mov	r5, r2
 8006938:	460c      	mov	r4, r1
 800693a:	b921      	cbnz	r1, 8006946 <_realloc_r+0x16>
 800693c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006940:	4611      	mov	r1, r2
 8006942:	f7ff b9c9 	b.w	8005cd8 <_malloc_r>
 8006946:	b92a      	cbnz	r2, 8006954 <_realloc_r+0x24>
 8006948:	f7ff f95a 	bl	8005c00 <_free_r>
 800694c:	2400      	movs	r4, #0
 800694e:	4620      	mov	r0, r4
 8006950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006954:	f000 f89e 	bl	8006a94 <_malloc_usable_size_r>
 8006958:	4285      	cmp	r5, r0
 800695a:	4606      	mov	r6, r0
 800695c:	d802      	bhi.n	8006964 <_realloc_r+0x34>
 800695e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006962:	d8f4      	bhi.n	800694e <_realloc_r+0x1e>
 8006964:	4629      	mov	r1, r5
 8006966:	4640      	mov	r0, r8
 8006968:	f7ff f9b6 	bl	8005cd8 <_malloc_r>
 800696c:	4607      	mov	r7, r0
 800696e:	2800      	cmp	r0, #0
 8006970:	d0ec      	beq.n	800694c <_realloc_r+0x1c>
 8006972:	42b5      	cmp	r5, r6
 8006974:	462a      	mov	r2, r5
 8006976:	4621      	mov	r1, r4
 8006978:	bf28      	it	cs
 800697a:	4632      	movcs	r2, r6
 800697c:	f7ff ffca 	bl	8006914 <memcpy>
 8006980:	4621      	mov	r1, r4
 8006982:	4640      	mov	r0, r8
 8006984:	f7ff f93c 	bl	8005c00 <_free_r>
 8006988:	463c      	mov	r4, r7
 800698a:	e7e0      	b.n	800694e <_realloc_r+0x1e>

0800698c <__swhatbuf_r>:
 800698c:	b570      	push	{r4, r5, r6, lr}
 800698e:	460c      	mov	r4, r1
 8006990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006994:	2900      	cmp	r1, #0
 8006996:	b096      	sub	sp, #88	@ 0x58
 8006998:	4615      	mov	r5, r2
 800699a:	461e      	mov	r6, r3
 800699c:	da0d      	bge.n	80069ba <__swhatbuf_r+0x2e>
 800699e:	89a3      	ldrh	r3, [r4, #12]
 80069a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80069a4:	f04f 0100 	mov.w	r1, #0
 80069a8:	bf14      	ite	ne
 80069aa:	2340      	movne	r3, #64	@ 0x40
 80069ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80069b0:	2000      	movs	r0, #0
 80069b2:	6031      	str	r1, [r6, #0]
 80069b4:	602b      	str	r3, [r5, #0]
 80069b6:	b016      	add	sp, #88	@ 0x58
 80069b8:	bd70      	pop	{r4, r5, r6, pc}
 80069ba:	466a      	mov	r2, sp
 80069bc:	f000 f848 	bl	8006a50 <_fstat_r>
 80069c0:	2800      	cmp	r0, #0
 80069c2:	dbec      	blt.n	800699e <__swhatbuf_r+0x12>
 80069c4:	9901      	ldr	r1, [sp, #4]
 80069c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80069ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80069ce:	4259      	negs	r1, r3
 80069d0:	4159      	adcs	r1, r3
 80069d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80069d6:	e7eb      	b.n	80069b0 <__swhatbuf_r+0x24>

080069d8 <__smakebuf_r>:
 80069d8:	898b      	ldrh	r3, [r1, #12]
 80069da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069dc:	079d      	lsls	r5, r3, #30
 80069de:	4606      	mov	r6, r0
 80069e0:	460c      	mov	r4, r1
 80069e2:	d507      	bpl.n	80069f4 <__smakebuf_r+0x1c>
 80069e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80069e8:	6023      	str	r3, [r4, #0]
 80069ea:	6123      	str	r3, [r4, #16]
 80069ec:	2301      	movs	r3, #1
 80069ee:	6163      	str	r3, [r4, #20]
 80069f0:	b003      	add	sp, #12
 80069f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069f4:	ab01      	add	r3, sp, #4
 80069f6:	466a      	mov	r2, sp
 80069f8:	f7ff ffc8 	bl	800698c <__swhatbuf_r>
 80069fc:	9f00      	ldr	r7, [sp, #0]
 80069fe:	4605      	mov	r5, r0
 8006a00:	4639      	mov	r1, r7
 8006a02:	4630      	mov	r0, r6
 8006a04:	f7ff f968 	bl	8005cd8 <_malloc_r>
 8006a08:	b948      	cbnz	r0, 8006a1e <__smakebuf_r+0x46>
 8006a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a0e:	059a      	lsls	r2, r3, #22
 8006a10:	d4ee      	bmi.n	80069f0 <__smakebuf_r+0x18>
 8006a12:	f023 0303 	bic.w	r3, r3, #3
 8006a16:	f043 0302 	orr.w	r3, r3, #2
 8006a1a:	81a3      	strh	r3, [r4, #12]
 8006a1c:	e7e2      	b.n	80069e4 <__smakebuf_r+0xc>
 8006a1e:	89a3      	ldrh	r3, [r4, #12]
 8006a20:	6020      	str	r0, [r4, #0]
 8006a22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a26:	81a3      	strh	r3, [r4, #12]
 8006a28:	9b01      	ldr	r3, [sp, #4]
 8006a2a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006a2e:	b15b      	cbz	r3, 8006a48 <__smakebuf_r+0x70>
 8006a30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a34:	4630      	mov	r0, r6
 8006a36:	f000 f81d 	bl	8006a74 <_isatty_r>
 8006a3a:	b128      	cbz	r0, 8006a48 <__smakebuf_r+0x70>
 8006a3c:	89a3      	ldrh	r3, [r4, #12]
 8006a3e:	f023 0303 	bic.w	r3, r3, #3
 8006a42:	f043 0301 	orr.w	r3, r3, #1
 8006a46:	81a3      	strh	r3, [r4, #12]
 8006a48:	89a3      	ldrh	r3, [r4, #12]
 8006a4a:	431d      	orrs	r5, r3
 8006a4c:	81a5      	strh	r5, [r4, #12]
 8006a4e:	e7cf      	b.n	80069f0 <__smakebuf_r+0x18>

08006a50 <_fstat_r>:
 8006a50:	b538      	push	{r3, r4, r5, lr}
 8006a52:	4d07      	ldr	r5, [pc, #28]	@ (8006a70 <_fstat_r+0x20>)
 8006a54:	2300      	movs	r3, #0
 8006a56:	4604      	mov	r4, r0
 8006a58:	4608      	mov	r0, r1
 8006a5a:	4611      	mov	r1, r2
 8006a5c:	602b      	str	r3, [r5, #0]
 8006a5e:	f7fb f9dc 	bl	8001e1a <_fstat>
 8006a62:	1c43      	adds	r3, r0, #1
 8006a64:	d102      	bne.n	8006a6c <_fstat_r+0x1c>
 8006a66:	682b      	ldr	r3, [r5, #0]
 8006a68:	b103      	cbz	r3, 8006a6c <_fstat_r+0x1c>
 8006a6a:	6023      	str	r3, [r4, #0]
 8006a6c:	bd38      	pop	{r3, r4, r5, pc}
 8006a6e:	bf00      	nop
 8006a70:	200002f8 	.word	0x200002f8

08006a74 <_isatty_r>:
 8006a74:	b538      	push	{r3, r4, r5, lr}
 8006a76:	4d06      	ldr	r5, [pc, #24]	@ (8006a90 <_isatty_r+0x1c>)
 8006a78:	2300      	movs	r3, #0
 8006a7a:	4604      	mov	r4, r0
 8006a7c:	4608      	mov	r0, r1
 8006a7e:	602b      	str	r3, [r5, #0]
 8006a80:	f7fb f9db 	bl	8001e3a <_isatty>
 8006a84:	1c43      	adds	r3, r0, #1
 8006a86:	d102      	bne.n	8006a8e <_isatty_r+0x1a>
 8006a88:	682b      	ldr	r3, [r5, #0]
 8006a8a:	b103      	cbz	r3, 8006a8e <_isatty_r+0x1a>
 8006a8c:	6023      	str	r3, [r4, #0]
 8006a8e:	bd38      	pop	{r3, r4, r5, pc}
 8006a90:	200002f8 	.word	0x200002f8

08006a94 <_malloc_usable_size_r>:
 8006a94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a98:	1f18      	subs	r0, r3, #4
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	bfbc      	itt	lt
 8006a9e:	580b      	ldrlt	r3, [r1, r0]
 8006aa0:	18c0      	addlt	r0, r0, r3
 8006aa2:	4770      	bx	lr

08006aa4 <_init>:
 8006aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aa6:	bf00      	nop
 8006aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aaa:	bc08      	pop	{r3}
 8006aac:	469e      	mov	lr, r3
 8006aae:	4770      	bx	lr

08006ab0 <_fini>:
 8006ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ab2:	bf00      	nop
 8006ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ab6:	bc08      	pop	{r3}
 8006ab8:	469e      	mov	lr, r3
 8006aba:	4770      	bx	lr
