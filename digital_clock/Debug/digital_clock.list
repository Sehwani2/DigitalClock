
digital_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ca4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08006e34  08006e34  00007e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fb0  08006fb0  0000807c  2**0
                  CONTENTS
  4 .ARM          00000008  08006fb0  08006fb0  00007fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fb8  08006fb8  0000807c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fb8  08006fb8  00007fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006fbc  08006fbc  00007fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08006fc0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000807c  2**0
                  CONTENTS
 10 .bss          000002d4  2000007c  2000007c  0000807c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000350  20000350  0000807c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000807c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011070  00000000  00000000  000080ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d99  00000000  00000000  0001911c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e90  00000000  00000000  0001beb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b42  00000000  00000000  0001cd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022744  00000000  00000000  0001d88a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013ea3  00000000  00000000  0003ffce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc742  00000000  00000000  00053e71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001205b3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003f8c  00000000  00000000  001205f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  00124584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006e1c 	.word	0x08006e1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08006e1c 	.word	0x08006e1c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <_7SEG_GPIO_Init>:
 */

#include "7seg.h"

void _7SEG_GPIO_Init()
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	@ 0x28
 8000564:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIOA,D,E Periph clock enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000566:	2300      	movs	r3, #0
 8000568:	613b      	str	r3, [r7, #16]
 800056a:	4b6b      	ldr	r3, [pc, #428]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056e:	4a6a      	ldr	r2, [pc, #424]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6313      	str	r3, [r2, #48]	@ 0x30
 8000576:	4b68      	ldr	r3, [pc, #416]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	613b      	str	r3, [r7, #16]
 8000580:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	4b64      	ldr	r3, [pc, #400]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058a:	4a63      	ldr	r2, [pc, #396]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 800058c:	f043 0304 	orr.w	r3, r3, #4
 8000590:	6313      	str	r3, [r2, #48]	@ 0x30
 8000592:	4b61      	ldr	r3, [pc, #388]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000596:	f003 0304 	and.w	r3, r3, #4
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	4b5d      	ldr	r3, [pc, #372]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a6:	4a5c      	ldr	r2, [pc, #368]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 80005a8:	f043 0308 	orr.w	r3, r3, #8
 80005ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ae:	4b5a      	ldr	r3, [pc, #360]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b2:	f003 0308 	and.w	r3, r3, #8
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	4b56      	ldr	r3, [pc, #344]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c2:	4a55      	ldr	r2, [pc, #340]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 80005c4:	f043 0310 	orr.w	r3, r3, #16
 80005c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ca:	4b53      	ldr	r3, [pc, #332]	@ (8000718 <_7SEG_GPIO_Init+0x1b8>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ce:	f003 0310 	and.w	r3, r3, #16
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]

	//Digit1
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_A;
 80005d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80005da:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005dc:	2301      	movs	r3, #1
 80005de:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e4:	2300      	movs	r3, #0
 80005e6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIO_DGT1_A, &GPIO_InitStruct);
 80005e8:	f107 0314 	add.w	r3, r7, #20
 80005ec:	4619      	mov	r1, r3
 80005ee:	484b      	ldr	r0, [pc, #300]	@ (800071c <_7SEG_GPIO_Init+0x1bc>)
 80005f0:	f003 f91e 	bl	8003830 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_B;
 80005f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005f8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_B, &GPIO_InitStruct);
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	4619      	mov	r1, r3
 8000600:	4847      	ldr	r0, [pc, #284]	@ (8000720 <_7SEG_GPIO_Init+0x1c0>)
 8000602:	f003 f915 	bl	8003830 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_C;
 8000606:	2340      	movs	r3, #64	@ 0x40
 8000608:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_C, &GPIO_InitStruct);
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	4619      	mov	r1, r3
 8000610:	4842      	ldr	r0, [pc, #264]	@ (800071c <_7SEG_GPIO_Init+0x1bc>)
 8000612:	f003 f90d 	bl	8003830 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_D;
 8000616:	2320      	movs	r3, #32
 8000618:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_D, &GPIO_InitStruct);
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	4619      	mov	r1, r3
 8000620:	483e      	ldr	r0, [pc, #248]	@ (800071c <_7SEG_GPIO_Init+0x1bc>)
 8000622:	f003 f905 	bl	8003830 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_E;
 8000626:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800062a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_E, &GPIO_InitStruct);
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	4619      	mov	r1, r3
 8000632:	483c      	ldr	r0, [pc, #240]	@ (8000724 <_7SEG_GPIO_Init+0x1c4>)
 8000634:	f003 f8fc 	bl	8003830 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_F;
 8000638:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800063c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_F, &GPIO_InitStruct);
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	4619      	mov	r1, r3
 8000644:	4837      	ldr	r0, [pc, #220]	@ (8000724 <_7SEG_GPIO_Init+0x1c4>)
 8000646:	f003 f8f3 	bl	8003830 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_G;
 800064a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800064e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_G, &GPIO_InitStruct);
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	4619      	mov	r1, r3
 8000656:	4831      	ldr	r0, [pc, #196]	@ (800071c <_7SEG_GPIO_Init+0x1bc>)
 8000658:	f003 f8ea 	bl	8003830 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT1_DP;
 800065c:	2380      	movs	r3, #128	@ 0x80
 800065e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT1_DP, &GPIO_InitStruct);
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	4619      	mov	r1, r3
 8000666:	482d      	ldr	r0, [pc, #180]	@ (800071c <_7SEG_GPIO_Init+0x1bc>)
 8000668:	f003 f8e2 	bl	8003830 <HAL_GPIO_Init>

	//Digit2
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_A;
 800066c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000670:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_A, &GPIO_InitStruct);
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	4619      	mov	r1, r3
 8000678:	482b      	ldr	r0, [pc, #172]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 800067a:	f003 f8d9 	bl	8003830 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_B;
 800067e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000682:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_B, &GPIO_InitStruct);
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	4619      	mov	r1, r3
 800068a:	4827      	ldr	r0, [pc, #156]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 800068c:	f003 f8d0 	bl	8003830 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_C;
 8000690:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000694:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_C, &GPIO_InitStruct);
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	4619      	mov	r1, r3
 800069c:	4822      	ldr	r0, [pc, #136]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 800069e:	f003 f8c7 	bl	8003830 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_D;
 80006a2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80006a6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_D, &GPIO_InitStruct);
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	4619      	mov	r1, r3
 80006ae:	481e      	ldr	r0, [pc, #120]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 80006b0:	f003 f8be 	bl	8003830 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_E;
 80006b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006b8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_E, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	4819      	ldr	r0, [pc, #100]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 80006c2:	f003 f8b5 	bl	8003830 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_F;
 80006c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006ca:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_F, &GPIO_InitStruct);
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4619      	mov	r1, r3
 80006d2:	4815      	ldr	r0, [pc, #84]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 80006d4:	f003 f8ac 	bl	8003830 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_G;
 80006d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006dc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_G, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	4810      	ldr	r0, [pc, #64]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 80006e6:	f003 f8a3 	bl	8003830 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_DGT2_DP;
 80006ea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80006ee:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIO_DGT2_DP, &GPIO_InitStruct);
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	4619      	mov	r1, r3
 80006f6:	480c      	ldr	r0, [pc, #48]	@ (8000728 <_7SEG_GPIO_Init+0x1c8>)
 80006f8:	f003 f89a 	bl	8003830 <HAL_GPIO_Init>


	_7SEG_SetNumber(DGT1, 0, ON);
 80006fc:	2201      	movs	r2, #1
 80006fe:	2100      	movs	r1, #0
 8000700:	2000      	movs	r0, #0
 8000702:	f000 f813 	bl	800072c <_7SEG_SetNumber>
	_7SEG_SetNumber(DGT2, 0, ON);
 8000706:	2201      	movs	r2, #1
 8000708:	2100      	movs	r1, #0
 800070a:	2001      	movs	r0, #1
 800070c:	f000 f80e 	bl	800072c <_7SEG_SetNumber>
}
 8000710:	bf00      	nop
 8000712:	3728      	adds	r7, #40	@ 0x28
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40023800 	.word	0x40023800
 800071c:	40020c00 	.word	0x40020c00
 8000720:	40020000 	.word	0x40020000
 8000724:	40020800 	.word	0x40020800
 8000728:	40021000 	.word	0x40021000

0800072c <_7SEG_SetNumber>:


void _7SEG_SetNumber(int dgt, int num, int dp)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	607a      	str	r2, [r7, #4]
	if(dgt == DGT1)
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	2b00      	cmp	r3, #0
 800073c:	f040 81dc 	bne.w	8000af8 <_7SEG_SetNumber+0x3cc>
	{
		switch(num%10)
 8000740:	68b9      	ldr	r1, [r7, #8]
 8000742:	4bcb      	ldr	r3, [pc, #812]	@ (8000a70 <_7SEG_SetNumber+0x344>)
 8000744:	fb83 2301 	smull	r2, r3, r3, r1
 8000748:	109a      	asrs	r2, r3, #2
 800074a:	17cb      	asrs	r3, r1, #31
 800074c:	1ad2      	subs	r2, r2, r3
 800074e:	4613      	mov	r3, r2
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	4413      	add	r3, r2
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	1aca      	subs	r2, r1, r3
 8000758:	2a09      	cmp	r2, #9
 800075a:	f200 81ba 	bhi.w	8000ad2 <_7SEG_SetNumber+0x3a6>
 800075e:	a301      	add	r3, pc, #4	@ (adr r3, 8000764 <_7SEG_SetNumber+0x38>)
 8000760:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8000764:	0800078d 	.word	0x0800078d
 8000768:	080007df 	.word	0x080007df
 800076c:	08000831 	.word	0x08000831
 8000770:	08000883 	.word	0x08000883
 8000774:	080008d5 	.word	0x080008d5
 8000778:	08000927 	.word	0x08000927
 800077c:	08000979 	.word	0x08000979
 8000780:	080009cb 	.word	0x080009cb
 8000784:	08000a1d 	.word	0x08000a1d
 8000788:	08000a81 	.word	0x08000a81
		{
			case 0: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON;
 800078c:	2200      	movs	r2, #0
 800078e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000792:	48b8      	ldr	r0, [pc, #736]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000794:	f003 fa00 	bl	8003b98 <HAL_GPIO_WritePin>
 8000798:	2200      	movs	r2, #0
 800079a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800079e:	48b6      	ldr	r0, [pc, #728]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 80007a0:	f003 f9fa 	bl	8003b98 <HAL_GPIO_WritePin>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2140      	movs	r1, #64	@ 0x40
 80007a8:	48b2      	ldr	r0, [pc, #712]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80007aa:	f003 f9f5 	bl	8003b98 <HAL_GPIO_WritePin>
 80007ae:	2200      	movs	r2, #0
 80007b0:	2120      	movs	r1, #32
 80007b2:	48b0      	ldr	r0, [pc, #704]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80007b4:	f003 f9f0 	bl	8003b98 <HAL_GPIO_WritePin>
 80007b8:	2200      	movs	r2, #0
 80007ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007be:	48af      	ldr	r0, [pc, #700]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80007c0:	f003 f9ea 	bl	8003b98 <HAL_GPIO_WritePin>
 80007c4:	2200      	movs	r2, #0
 80007c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ca:	48ac      	ldr	r0, [pc, #688]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80007cc:	f003 f9e4 	bl	8003b98 <HAL_GPIO_WritePin>
					DGT1_G_OFF;
 80007d0:	2201      	movs	r2, #1
 80007d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007d6:	48a7      	ldr	r0, [pc, #668]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80007d8:	f003 f9de 	bl	8003b98 <HAL_GPIO_WritePin>
				break;
 80007dc:	e179      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 1: DGT1_B_ON; DGT1_C_ON;
 80007de:	2200      	movs	r2, #0
 80007e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007e4:	48a4      	ldr	r0, [pc, #656]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 80007e6:	f003 f9d7 	bl	8003b98 <HAL_GPIO_WritePin>
 80007ea:	2200      	movs	r2, #0
 80007ec:	2140      	movs	r1, #64	@ 0x40
 80007ee:	48a1      	ldr	r0, [pc, #644]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80007f0:	f003 f9d2 	bl	8003b98 <HAL_GPIO_WritePin>
					DGT1_A_OFF; DGT1_D_OFF; DGT1_E_OFF; DGT1_F_OFF; DGT1_G_OFF;
 80007f4:	2201      	movs	r2, #1
 80007f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007fa:	489e      	ldr	r0, [pc, #632]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80007fc:	f003 f9cc 	bl	8003b98 <HAL_GPIO_WritePin>
 8000800:	2201      	movs	r2, #1
 8000802:	2120      	movs	r1, #32
 8000804:	489b      	ldr	r0, [pc, #620]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000806:	f003 f9c7 	bl	8003b98 <HAL_GPIO_WritePin>
 800080a:	2201      	movs	r2, #1
 800080c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000810:	489a      	ldr	r0, [pc, #616]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 8000812:	f003 f9c1 	bl	8003b98 <HAL_GPIO_WritePin>
 8000816:	2201      	movs	r2, #1
 8000818:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800081c:	4897      	ldr	r0, [pc, #604]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 800081e:	f003 f9bb 	bl	8003b98 <HAL_GPIO_WritePin>
 8000822:	2201      	movs	r2, #1
 8000824:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000828:	4892      	ldr	r0, [pc, #584]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 800082a:	f003 f9b5 	bl	8003b98 <HAL_GPIO_WritePin>
				break;
 800082e:	e150      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 2: DGT1_A_ON; DGT1_B_ON; DGT1_G_ON; DGT1_E_ON; DGT1_D_ON;
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000836:	488f      	ldr	r0, [pc, #572]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000838:	f003 f9ae 	bl	8003b98 <HAL_GPIO_WritePin>
 800083c:	2200      	movs	r2, #0
 800083e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000842:	488d      	ldr	r0, [pc, #564]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 8000844:	f003 f9a8 	bl	8003b98 <HAL_GPIO_WritePin>
 8000848:	2200      	movs	r2, #0
 800084a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800084e:	4889      	ldr	r0, [pc, #548]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000850:	f003 f9a2 	bl	8003b98 <HAL_GPIO_WritePin>
 8000854:	2200      	movs	r2, #0
 8000856:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800085a:	4888      	ldr	r0, [pc, #544]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 800085c:	f003 f99c 	bl	8003b98 <HAL_GPIO_WritePin>
 8000860:	2200      	movs	r2, #0
 8000862:	2120      	movs	r1, #32
 8000864:	4883      	ldr	r0, [pc, #524]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000866:	f003 f997 	bl	8003b98 <HAL_GPIO_WritePin>
					DGT1_C_OFF; DGT1_F_OFF;
 800086a:	2201      	movs	r2, #1
 800086c:	2140      	movs	r1, #64	@ 0x40
 800086e:	4881      	ldr	r0, [pc, #516]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000870:	f003 f992 	bl	8003b98 <HAL_GPIO_WritePin>
 8000874:	2201      	movs	r2, #1
 8000876:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800087a:	4880      	ldr	r0, [pc, #512]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 800087c:	f003 f98c 	bl	8003b98 <HAL_GPIO_WritePin>
				break;
 8000880:	e127      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 3: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_G_ON;
 8000882:	2200      	movs	r2, #0
 8000884:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000888:	487a      	ldr	r0, [pc, #488]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 800088a:	f003 f985 	bl	8003b98 <HAL_GPIO_WritePin>
 800088e:	2200      	movs	r2, #0
 8000890:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000894:	4878      	ldr	r0, [pc, #480]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 8000896:	f003 f97f 	bl	8003b98 <HAL_GPIO_WritePin>
 800089a:	2200      	movs	r2, #0
 800089c:	2140      	movs	r1, #64	@ 0x40
 800089e:	4875      	ldr	r0, [pc, #468]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80008a0:	f003 f97a 	bl	8003b98 <HAL_GPIO_WritePin>
 80008a4:	2200      	movs	r2, #0
 80008a6:	2120      	movs	r1, #32
 80008a8:	4872      	ldr	r0, [pc, #456]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80008aa:	f003 f975 	bl	8003b98 <HAL_GPIO_WritePin>
 80008ae:	2200      	movs	r2, #0
 80008b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008b4:	486f      	ldr	r0, [pc, #444]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80008b6:	f003 f96f 	bl	8003b98 <HAL_GPIO_WritePin>
					DGT1_E_OFF; DGT1_F_OFF;
 80008ba:	2201      	movs	r2, #1
 80008bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008c0:	486e      	ldr	r0, [pc, #440]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80008c2:	f003 f969 	bl	8003b98 <HAL_GPIO_WritePin>
 80008c6:	2201      	movs	r2, #1
 80008c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008cc:	486b      	ldr	r0, [pc, #428]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80008ce:	f003 f963 	bl	8003b98 <HAL_GPIO_WritePin>
				break;
 80008d2:	e0fe      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 4: DGT1_F_ON; DGT1_G_ON; DGT1_B_ON; DGT1_C_ON;
 80008d4:	2200      	movs	r2, #0
 80008d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008da:	4868      	ldr	r0, [pc, #416]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80008dc:	f003 f95c 	bl	8003b98 <HAL_GPIO_WritePin>
 80008e0:	2200      	movs	r2, #0
 80008e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008e6:	4863      	ldr	r0, [pc, #396]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80008e8:	f003 f956 	bl	8003b98 <HAL_GPIO_WritePin>
 80008ec:	2200      	movs	r2, #0
 80008ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008f2:	4861      	ldr	r0, [pc, #388]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 80008f4:	f003 f950 	bl	8003b98 <HAL_GPIO_WritePin>
 80008f8:	2200      	movs	r2, #0
 80008fa:	2140      	movs	r1, #64	@ 0x40
 80008fc:	485d      	ldr	r0, [pc, #372]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80008fe:	f003 f94b 	bl	8003b98 <HAL_GPIO_WritePin>
					DGT1_A_OFF; DGT1_D_OFF; DGT1_E_OFF;
 8000902:	2201      	movs	r2, #1
 8000904:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000908:	485a      	ldr	r0, [pc, #360]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 800090a:	f003 f945 	bl	8003b98 <HAL_GPIO_WritePin>
 800090e:	2201      	movs	r2, #1
 8000910:	2120      	movs	r1, #32
 8000912:	4858      	ldr	r0, [pc, #352]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000914:	f003 f940 	bl	8003b98 <HAL_GPIO_WritePin>
 8000918:	2201      	movs	r2, #1
 800091a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800091e:	4857      	ldr	r0, [pc, #348]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 8000920:	f003 f93a 	bl	8003b98 <HAL_GPIO_WritePin>
				break;
 8000924:	e0d5      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 5: DGT1_A_ON; DGT1_F_ON; DGT1_G_ON; DGT1_C_ON; DGT1_D_ON;
 8000926:	2200      	movs	r2, #0
 8000928:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800092c:	4851      	ldr	r0, [pc, #324]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 800092e:	f003 f933 	bl	8003b98 <HAL_GPIO_WritePin>
 8000932:	2200      	movs	r2, #0
 8000934:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000938:	4850      	ldr	r0, [pc, #320]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 800093a:	f003 f92d 	bl	8003b98 <HAL_GPIO_WritePin>
 800093e:	2200      	movs	r2, #0
 8000940:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000944:	484b      	ldr	r0, [pc, #300]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000946:	f003 f927 	bl	8003b98 <HAL_GPIO_WritePin>
 800094a:	2200      	movs	r2, #0
 800094c:	2140      	movs	r1, #64	@ 0x40
 800094e:	4849      	ldr	r0, [pc, #292]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000950:	f003 f922 	bl	8003b98 <HAL_GPIO_WritePin>
 8000954:	2200      	movs	r2, #0
 8000956:	2120      	movs	r1, #32
 8000958:	4846      	ldr	r0, [pc, #280]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 800095a:	f003 f91d 	bl	8003b98 <HAL_GPIO_WritePin>
					DGT1_B_OFF; DGT1_E_OFF;
 800095e:	2201      	movs	r2, #1
 8000960:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000964:	4844      	ldr	r0, [pc, #272]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 8000966:	f003 f917 	bl	8003b98 <HAL_GPIO_WritePin>
 800096a:	2201      	movs	r2, #1
 800096c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000970:	4842      	ldr	r0, [pc, #264]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 8000972:	f003 f911 	bl	8003b98 <HAL_GPIO_WritePin>
				break;
 8000976:	e0ac      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 6: DGT1_A_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON; DGT1_G_ON;
 8000978:	2200      	movs	r2, #0
 800097a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800097e:	483d      	ldr	r0, [pc, #244]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000980:	f003 f90a 	bl	8003b98 <HAL_GPIO_WritePin>
 8000984:	2200      	movs	r2, #0
 8000986:	2140      	movs	r1, #64	@ 0x40
 8000988:	483a      	ldr	r0, [pc, #232]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 800098a:	f003 f905 	bl	8003b98 <HAL_GPIO_WritePin>
 800098e:	2200      	movs	r2, #0
 8000990:	2120      	movs	r1, #32
 8000992:	4838      	ldr	r0, [pc, #224]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000994:	f003 f900 	bl	8003b98 <HAL_GPIO_WritePin>
 8000998:	2200      	movs	r2, #0
 800099a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800099e:	4837      	ldr	r0, [pc, #220]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80009a0:	f003 f8fa 	bl	8003b98 <HAL_GPIO_WritePin>
 80009a4:	2200      	movs	r2, #0
 80009a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009aa:	4834      	ldr	r0, [pc, #208]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80009ac:	f003 f8f4 	bl	8003b98 <HAL_GPIO_WritePin>
 80009b0:	2200      	movs	r2, #0
 80009b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009b6:	482f      	ldr	r0, [pc, #188]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80009b8:	f003 f8ee 	bl	8003b98 <HAL_GPIO_WritePin>
					DGT1_B_OFF;
 80009bc:	2201      	movs	r2, #1
 80009be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009c2:	482d      	ldr	r0, [pc, #180]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 80009c4:	f003 f8e8 	bl	8003b98 <HAL_GPIO_WritePin>
				break;
 80009c8:	e083      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 7: DGT1_F_ON; DGT1_A_ON; DGT1_B_ON; DGT1_C_ON;
 80009ca:	2200      	movs	r2, #0
 80009cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009d0:	482a      	ldr	r0, [pc, #168]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 80009d2:	f003 f8e1 	bl	8003b98 <HAL_GPIO_WritePin>
 80009d6:	2200      	movs	r2, #0
 80009d8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009dc:	4825      	ldr	r0, [pc, #148]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80009de:	f003 f8db 	bl	8003b98 <HAL_GPIO_WritePin>
 80009e2:	2200      	movs	r2, #0
 80009e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009e8:	4823      	ldr	r0, [pc, #140]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 80009ea:	f003 f8d5 	bl	8003b98 <HAL_GPIO_WritePin>
 80009ee:	2200      	movs	r2, #0
 80009f0:	2140      	movs	r1, #64	@ 0x40
 80009f2:	4820      	ldr	r0, [pc, #128]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80009f4:	f003 f8d0 	bl	8003b98 <HAL_GPIO_WritePin>
					DGT1_D_OFF; DGT1_E_OFF; DGT1_G_OFF;
 80009f8:	2201      	movs	r2, #1
 80009fa:	2120      	movs	r1, #32
 80009fc:	481d      	ldr	r0, [pc, #116]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 80009fe:	f003 f8cb 	bl	8003b98 <HAL_GPIO_WritePin>
 8000a02:	2201      	movs	r2, #1
 8000a04:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a08:	481c      	ldr	r0, [pc, #112]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 8000a0a:	f003 f8c5 	bl	8003b98 <HAL_GPIO_WritePin>
 8000a0e:	2201      	movs	r2, #1
 8000a10:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a14:	4817      	ldr	r0, [pc, #92]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000a16:	f003 f8bf 	bl	8003b98 <HAL_GPIO_WritePin>
				break;
 8000a1a:	e05a      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
			case 8: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_E_ON; DGT1_F_ON; DGT1_G_ON;
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a22:	4814      	ldr	r0, [pc, #80]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000a24:	f003 f8b8 	bl	8003b98 <HAL_GPIO_WritePin>
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a2e:	4812      	ldr	r0, [pc, #72]	@ (8000a78 <_7SEG_SetNumber+0x34c>)
 8000a30:	f003 f8b2 	bl	8003b98 <HAL_GPIO_WritePin>
 8000a34:	2200      	movs	r2, #0
 8000a36:	2140      	movs	r1, #64	@ 0x40
 8000a38:	480e      	ldr	r0, [pc, #56]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000a3a:	f003 f8ad 	bl	8003b98 <HAL_GPIO_WritePin>
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2120      	movs	r1, #32
 8000a42:	480c      	ldr	r0, [pc, #48]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000a44:	f003 f8a8 	bl	8003b98 <HAL_GPIO_WritePin>
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a4e:	480b      	ldr	r0, [pc, #44]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 8000a50:	f003 f8a2 	bl	8003b98 <HAL_GPIO_WritePin>
 8000a54:	2200      	movs	r2, #0
 8000a56:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a5a:	4808      	ldr	r0, [pc, #32]	@ (8000a7c <_7SEG_SetNumber+0x350>)
 8000a5c:	f003 f89c 	bl	8003b98 <HAL_GPIO_WritePin>
 8000a60:	2200      	movs	r2, #0
 8000a62:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a66:	4803      	ldr	r0, [pc, #12]	@ (8000a74 <_7SEG_SetNumber+0x348>)
 8000a68:	f003 f896 	bl	8003b98 <HAL_GPIO_WritePin>
				break;
 8000a6c:	e031      	b.n	8000ad2 <_7SEG_SetNumber+0x3a6>
 8000a6e:	bf00      	nop
 8000a70:	66666667 	.word	0x66666667
 8000a74:	40020c00 	.word	0x40020c00
 8000a78:	40020000 	.word	0x40020000
 8000a7c:	40020800 	.word	0x40020800
			case 9: DGT1_A_ON; DGT1_B_ON; DGT1_C_ON; DGT1_D_ON; DGT1_F_ON; DGT1_G_ON;
 8000a80:	2200      	movs	r2, #0
 8000a82:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a86:	48c8      	ldr	r0, [pc, #800]	@ (8000da8 <_7SEG_SetNumber+0x67c>)
 8000a88:	f003 f886 	bl	8003b98 <HAL_GPIO_WritePin>
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a92:	48c6      	ldr	r0, [pc, #792]	@ (8000dac <_7SEG_SetNumber+0x680>)
 8000a94:	f003 f880 	bl	8003b98 <HAL_GPIO_WritePin>
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2140      	movs	r1, #64	@ 0x40
 8000a9c:	48c2      	ldr	r0, [pc, #776]	@ (8000da8 <_7SEG_SetNumber+0x67c>)
 8000a9e:	f003 f87b 	bl	8003b98 <HAL_GPIO_WritePin>
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2120      	movs	r1, #32
 8000aa6:	48c0      	ldr	r0, [pc, #768]	@ (8000da8 <_7SEG_SetNumber+0x67c>)
 8000aa8:	f003 f876 	bl	8003b98 <HAL_GPIO_WritePin>
 8000aac:	2200      	movs	r2, #0
 8000aae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ab2:	48bf      	ldr	r0, [pc, #764]	@ (8000db0 <_7SEG_SetNumber+0x684>)
 8000ab4:	f003 f870 	bl	8003b98 <HAL_GPIO_WritePin>
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000abe:	48ba      	ldr	r0, [pc, #744]	@ (8000da8 <_7SEG_SetNumber+0x67c>)
 8000ac0:	f003 f86a 	bl	8003b98 <HAL_GPIO_WritePin>
					DGT1_E_OFF;
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000aca:	48b9      	ldr	r0, [pc, #740]	@ (8000db0 <_7SEG_SetNumber+0x684>)
 8000acc:	f003 f864 	bl	8003b98 <HAL_GPIO_WritePin>
				break;
 8000ad0:	bf00      	nop
		}

		if(dp == ON)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d105      	bne.n	8000ae4 <_7SEG_SetNumber+0x3b8>
		{
			DGT1_DP_ON;
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2180      	movs	r1, #128	@ 0x80
 8000adc:	48b2      	ldr	r0, [pc, #712]	@ (8000da8 <_7SEG_SetNumber+0x67c>)
 8000ade:	f003 f85b 	bl	8003b98 <HAL_GPIO_WritePin>
		else if(dp == OFF)
		{
			DGT2_DP_OFF;
		}
	}
}
 8000ae2:	e1ff      	b.n	8000ee4 <_7SEG_SetNumber+0x7b8>
		else if(dp == OFF)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f040 81fc 	bne.w	8000ee4 <_7SEG_SetNumber+0x7b8>
			DGT1_DP_OFF;
 8000aec:	2201      	movs	r2, #1
 8000aee:	2180      	movs	r1, #128	@ 0x80
 8000af0:	48ad      	ldr	r0, [pc, #692]	@ (8000da8 <_7SEG_SetNumber+0x67c>)
 8000af2:	f003 f851 	bl	8003b98 <HAL_GPIO_WritePin>
}
 8000af6:	e1f5      	b.n	8000ee4 <_7SEG_SetNumber+0x7b8>
	else if(dgt == DGT2)
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	f040 81f2 	bne.w	8000ee4 <_7SEG_SetNumber+0x7b8>
		switch(num%10)
 8000b00:	68b9      	ldr	r1, [r7, #8]
 8000b02:	4bac      	ldr	r3, [pc, #688]	@ (8000db4 <_7SEG_SetNumber+0x688>)
 8000b04:	fb83 2301 	smull	r2, r3, r3, r1
 8000b08:	109a      	asrs	r2, r3, #2
 8000b0a:	17cb      	asrs	r3, r1, #31
 8000b0c:	1ad2      	subs	r2, r2, r3
 8000b0e:	4613      	mov	r3, r2
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	4413      	add	r3, r2
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	1aca      	subs	r2, r1, r3
 8000b18:	2a09      	cmp	r2, #9
 8000b1a:	f200 81d0 	bhi.w	8000ebe <_7SEG_SetNumber+0x792>
 8000b1e:	a301      	add	r3, pc, #4	@ (adr r3, 8000b24 <_7SEG_SetNumber+0x3f8>)
 8000b20:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8000b24:	08000b4d 	.word	0x08000b4d
 8000b28:	08000ba3 	.word	0x08000ba3
 8000b2c:	08000bf9 	.word	0x08000bf9
 8000b30:	08000c4f 	.word	0x08000c4f
 8000b34:	08000ca5 	.word	0x08000ca5
 8000b38:	08000cfb 	.word	0x08000cfb
 8000b3c:	08000d51 	.word	0x08000d51
 8000b40:	08000dbd 	.word	0x08000dbd
 8000b44:	08000e13 	.word	0x08000e13
 8000b48:	08000e69 	.word	0x08000e69
			case 0: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON;
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b52:	4899      	ldr	r0, [pc, #612]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b54:	f003 f820 	bl	8003b98 <HAL_GPIO_WritePin>
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b5e:	4896      	ldr	r0, [pc, #600]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b60:	f003 f81a 	bl	8003b98 <HAL_GPIO_WritePin>
 8000b64:	2200      	movs	r2, #0
 8000b66:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b6a:	4893      	ldr	r0, [pc, #588]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b6c:	f003 f814 	bl	8003b98 <HAL_GPIO_WritePin>
 8000b70:	2200      	movs	r2, #0
 8000b72:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b76:	4890      	ldr	r0, [pc, #576]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b78:	f003 f80e 	bl	8003b98 <HAL_GPIO_WritePin>
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b82:	488d      	ldr	r0, [pc, #564]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b84:	f003 f808 	bl	8003b98 <HAL_GPIO_WritePin>
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b8e:	488a      	ldr	r0, [pc, #552]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b90:	f003 f802 	bl	8003b98 <HAL_GPIO_WritePin>
					DGT2_G_OFF;
 8000b94:	2201      	movs	r2, #1
 8000b96:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b9a:	4887      	ldr	r0, [pc, #540]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000b9c:	f002 fffc 	bl	8003b98 <HAL_GPIO_WritePin>
				break;
 8000ba0:	e18d      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 1: DGT2_B_ON; DGT2_C_ON;
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ba8:	4883      	ldr	r0, [pc, #524]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000baa:	f002 fff5 	bl	8003b98 <HAL_GPIO_WritePin>
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bb4:	4880      	ldr	r0, [pc, #512]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000bb6:	f002 ffef 	bl	8003b98 <HAL_GPIO_WritePin>
					DGT2_A_OFF; DGT2_D_OFF; DGT2_E_OFF; DGT2_F_OFF; DGT2_G_OFF;
 8000bba:	2201      	movs	r2, #1
 8000bbc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bc0:	487d      	ldr	r0, [pc, #500]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000bc2:	f002 ffe9 	bl	8003b98 <HAL_GPIO_WritePin>
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bcc:	487a      	ldr	r0, [pc, #488]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000bce:	f002 ffe3 	bl	8003b98 <HAL_GPIO_WritePin>
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bd8:	4877      	ldr	r0, [pc, #476]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000bda:	f002 ffdd 	bl	8003b98 <HAL_GPIO_WritePin>
 8000bde:	2201      	movs	r2, #1
 8000be0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000be4:	4874      	ldr	r0, [pc, #464]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000be6:	f002 ffd7 	bl	8003b98 <HAL_GPIO_WritePin>
 8000bea:	2201      	movs	r2, #1
 8000bec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bf0:	4871      	ldr	r0, [pc, #452]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000bf2:	f002 ffd1 	bl	8003b98 <HAL_GPIO_WritePin>
				break;
 8000bf6:	e162      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 2: DGT2_A_ON; DGT2_B_ON; DGT2_G_ON; DGT2_E_ON; DGT2_D_ON;
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bfe:	486e      	ldr	r0, [pc, #440]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c00:	f002 ffca 	bl	8003b98 <HAL_GPIO_WritePin>
 8000c04:	2200      	movs	r2, #0
 8000c06:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c0a:	486b      	ldr	r0, [pc, #428]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c0c:	f002 ffc4 	bl	8003b98 <HAL_GPIO_WritePin>
 8000c10:	2200      	movs	r2, #0
 8000c12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c16:	4868      	ldr	r0, [pc, #416]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c18:	f002 ffbe 	bl	8003b98 <HAL_GPIO_WritePin>
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c22:	4865      	ldr	r0, [pc, #404]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c24:	f002 ffb8 	bl	8003b98 <HAL_GPIO_WritePin>
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c2e:	4862      	ldr	r0, [pc, #392]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c30:	f002 ffb2 	bl	8003b98 <HAL_GPIO_WritePin>
					DGT2_C_OFF; DGT2_F_OFF;
 8000c34:	2201      	movs	r2, #1
 8000c36:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c3a:	485f      	ldr	r0, [pc, #380]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c3c:	f002 ffac 	bl	8003b98 <HAL_GPIO_WritePin>
 8000c40:	2201      	movs	r2, #1
 8000c42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c46:	485c      	ldr	r0, [pc, #368]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c48:	f002 ffa6 	bl	8003b98 <HAL_GPIO_WritePin>
				break;
 8000c4c:	e137      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 3: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_G_ON;
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c54:	4858      	ldr	r0, [pc, #352]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c56:	f002 ff9f 	bl	8003b98 <HAL_GPIO_WritePin>
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c60:	4855      	ldr	r0, [pc, #340]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c62:	f002 ff99 	bl	8003b98 <HAL_GPIO_WritePin>
 8000c66:	2200      	movs	r2, #0
 8000c68:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c6c:	4852      	ldr	r0, [pc, #328]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c6e:	f002 ff93 	bl	8003b98 <HAL_GPIO_WritePin>
 8000c72:	2200      	movs	r2, #0
 8000c74:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c78:	484f      	ldr	r0, [pc, #316]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c7a:	f002 ff8d 	bl	8003b98 <HAL_GPIO_WritePin>
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c84:	484c      	ldr	r0, [pc, #304]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c86:	f002 ff87 	bl	8003b98 <HAL_GPIO_WritePin>
					DGT2_E_OFF; DGT2_F_OFF;
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c90:	4849      	ldr	r0, [pc, #292]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c92:	f002 ff81 	bl	8003b98 <HAL_GPIO_WritePin>
 8000c96:	2201      	movs	r2, #1
 8000c98:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c9c:	4846      	ldr	r0, [pc, #280]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000c9e:	f002 ff7b 	bl	8003b98 <HAL_GPIO_WritePin>
				break;
 8000ca2:	e10c      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 4: DGT2_F_ON; DGT2_G_ON; DGT2_B_ON; DGT2_C_ON;
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000caa:	4843      	ldr	r0, [pc, #268]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000cac:	f002 ff74 	bl	8003b98 <HAL_GPIO_WritePin>
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cb6:	4840      	ldr	r0, [pc, #256]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000cb8:	f002 ff6e 	bl	8003b98 <HAL_GPIO_WritePin>
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cc2:	483d      	ldr	r0, [pc, #244]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000cc4:	f002 ff68 	bl	8003b98 <HAL_GPIO_WritePin>
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cce:	483a      	ldr	r0, [pc, #232]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000cd0:	f002 ff62 	bl	8003b98 <HAL_GPIO_WritePin>
					DGT2_A_OFF; DGT2_D_OFF; DGT2_E_OFF;
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cda:	4837      	ldr	r0, [pc, #220]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000cdc:	f002 ff5c 	bl	8003b98 <HAL_GPIO_WritePin>
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ce6:	4834      	ldr	r0, [pc, #208]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000ce8:	f002 ff56 	bl	8003b98 <HAL_GPIO_WritePin>
 8000cec:	2201      	movs	r2, #1
 8000cee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000cf2:	4831      	ldr	r0, [pc, #196]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000cf4:	f002 ff50 	bl	8003b98 <HAL_GPIO_WritePin>
				break;
 8000cf8:	e0e1      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 5: DGT2_A_ON; DGT2_F_ON; DGT2_G_ON; DGT2_C_ON; DGT2_D_ON;
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d00:	482d      	ldr	r0, [pc, #180]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d02:	f002 ff49 	bl	8003b98 <HAL_GPIO_WritePin>
 8000d06:	2200      	movs	r2, #0
 8000d08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d0c:	482a      	ldr	r0, [pc, #168]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d0e:	f002 ff43 	bl	8003b98 <HAL_GPIO_WritePin>
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d18:	4827      	ldr	r0, [pc, #156]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d1a:	f002 ff3d 	bl	8003b98 <HAL_GPIO_WritePin>
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d24:	4824      	ldr	r0, [pc, #144]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d26:	f002 ff37 	bl	8003b98 <HAL_GPIO_WritePin>
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d30:	4821      	ldr	r0, [pc, #132]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d32:	f002 ff31 	bl	8003b98 <HAL_GPIO_WritePin>
					DGT2_B_OFF; DGT2_E_OFF;
 8000d36:	2201      	movs	r2, #1
 8000d38:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d3c:	481e      	ldr	r0, [pc, #120]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d3e:	f002 ff2b 	bl	8003b98 <HAL_GPIO_WritePin>
 8000d42:	2201      	movs	r2, #1
 8000d44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d48:	481b      	ldr	r0, [pc, #108]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d4a:	f002 ff25 	bl	8003b98 <HAL_GPIO_WritePin>
				break;
 8000d4e:	e0b6      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 6: DGT2_A_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON; DGT2_G_ON;
 8000d50:	2200      	movs	r2, #0
 8000d52:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d56:	4818      	ldr	r0, [pc, #96]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d58:	f002 ff1e 	bl	8003b98 <HAL_GPIO_WritePin>
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d62:	4815      	ldr	r0, [pc, #84]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d64:	f002 ff18 	bl	8003b98 <HAL_GPIO_WritePin>
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d6e:	4812      	ldr	r0, [pc, #72]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d70:	f002 ff12 	bl	8003b98 <HAL_GPIO_WritePin>
 8000d74:	2200      	movs	r2, #0
 8000d76:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d7a:	480f      	ldr	r0, [pc, #60]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d7c:	f002 ff0c 	bl	8003b98 <HAL_GPIO_WritePin>
 8000d80:	2200      	movs	r2, #0
 8000d82:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d86:	480c      	ldr	r0, [pc, #48]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d88:	f002 ff06 	bl	8003b98 <HAL_GPIO_WritePin>
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d92:	4809      	ldr	r0, [pc, #36]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000d94:	f002 ff00 	bl	8003b98 <HAL_GPIO_WritePin>
					DGT2_B_OFF;
 8000d98:	2201      	movs	r2, #1
 8000d9a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d9e:	4806      	ldr	r0, [pc, #24]	@ (8000db8 <_7SEG_SetNumber+0x68c>)
 8000da0:	f002 fefa 	bl	8003b98 <HAL_GPIO_WritePin>
				break;
 8000da4:	e08b      	b.n	8000ebe <_7SEG_SetNumber+0x792>
 8000da6:	bf00      	nop
 8000da8:	40020c00 	.word	0x40020c00
 8000dac:	40020000 	.word	0x40020000
 8000db0:	40020800 	.word	0x40020800
 8000db4:	66666667 	.word	0x66666667
 8000db8:	40021000 	.word	0x40021000
			case 7: DGT2_F_ON; DGT2_A_ON; DGT2_B_ON; DGT2_C_ON;
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dc2:	484a      	ldr	r0, [pc, #296]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000dc4:	f002 fee8 	bl	8003b98 <HAL_GPIO_WritePin>
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dce:	4847      	ldr	r0, [pc, #284]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000dd0:	f002 fee2 	bl	8003b98 <HAL_GPIO_WritePin>
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000dda:	4844      	ldr	r0, [pc, #272]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000ddc:	f002 fedc 	bl	8003b98 <HAL_GPIO_WritePin>
 8000de0:	2200      	movs	r2, #0
 8000de2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000de6:	4841      	ldr	r0, [pc, #260]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000de8:	f002 fed6 	bl	8003b98 <HAL_GPIO_WritePin>
					DGT2_D_OFF; DGT2_E_OFF; DGT2_G_OFF;
 8000dec:	2201      	movs	r2, #1
 8000dee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000df2:	483e      	ldr	r0, [pc, #248]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000df4:	f002 fed0 	bl	8003b98 <HAL_GPIO_WritePin>
 8000df8:	2201      	movs	r2, #1
 8000dfa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000dfe:	483b      	ldr	r0, [pc, #236]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e00:	f002 feca 	bl	8003b98 <HAL_GPIO_WritePin>
 8000e04:	2201      	movs	r2, #1
 8000e06:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e0a:	4838      	ldr	r0, [pc, #224]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e0c:	f002 fec4 	bl	8003b98 <HAL_GPIO_WritePin>
				break;
 8000e10:	e055      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 8: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_E_ON; DGT2_F_ON; DGT2_G_ON;
 8000e12:	2200      	movs	r2, #0
 8000e14:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e18:	4834      	ldr	r0, [pc, #208]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e1a:	f002 febd 	bl	8003b98 <HAL_GPIO_WritePin>
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e24:	4831      	ldr	r0, [pc, #196]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e26:	f002 feb7 	bl	8003b98 <HAL_GPIO_WritePin>
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e30:	482e      	ldr	r0, [pc, #184]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e32:	f002 feb1 	bl	8003b98 <HAL_GPIO_WritePin>
 8000e36:	2200      	movs	r2, #0
 8000e38:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e3c:	482b      	ldr	r0, [pc, #172]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e3e:	f002 feab 	bl	8003b98 <HAL_GPIO_WritePin>
 8000e42:	2200      	movs	r2, #0
 8000e44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e48:	4828      	ldr	r0, [pc, #160]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e4a:	f002 fea5 	bl	8003b98 <HAL_GPIO_WritePin>
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e54:	4825      	ldr	r0, [pc, #148]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e56:	f002 fe9f 	bl	8003b98 <HAL_GPIO_WritePin>
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e60:	4822      	ldr	r0, [pc, #136]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e62:	f002 fe99 	bl	8003b98 <HAL_GPIO_WritePin>
				break;
 8000e66:	e02a      	b.n	8000ebe <_7SEG_SetNumber+0x792>
			case 9: DGT2_A_ON; DGT2_B_ON; DGT2_C_ON; DGT2_D_ON; DGT2_F_ON; DGT2_G_ON;
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e6e:	481f      	ldr	r0, [pc, #124]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e70:	f002 fe92 	bl	8003b98 <HAL_GPIO_WritePin>
 8000e74:	2200      	movs	r2, #0
 8000e76:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e7a:	481c      	ldr	r0, [pc, #112]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e7c:	f002 fe8c 	bl	8003b98 <HAL_GPIO_WritePin>
 8000e80:	2200      	movs	r2, #0
 8000e82:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e86:	4819      	ldr	r0, [pc, #100]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e88:	f002 fe86 	bl	8003b98 <HAL_GPIO_WritePin>
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e92:	4816      	ldr	r0, [pc, #88]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000e94:	f002 fe80 	bl	8003b98 <HAL_GPIO_WritePin>
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e9e:	4813      	ldr	r0, [pc, #76]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000ea0:	f002 fe7a 	bl	8003b98 <HAL_GPIO_WritePin>
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000eaa:	4810      	ldr	r0, [pc, #64]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000eac:	f002 fe74 	bl	8003b98 <HAL_GPIO_WritePin>
					DGT2_E_OFF;
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000eb6:	480d      	ldr	r0, [pc, #52]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000eb8:	f002 fe6e 	bl	8003b98 <HAL_GPIO_WritePin>
				break;
 8000ebc:	bf00      	nop
		if(dp == ON)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d106      	bne.n	8000ed2 <_7SEG_SetNumber+0x7a6>
			DGT2_DP_ON;
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000eca:	4808      	ldr	r0, [pc, #32]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000ecc:	f002 fe64 	bl	8003b98 <HAL_GPIO_WritePin>
}
 8000ed0:	e008      	b.n	8000ee4 <_7SEG_SetNumber+0x7b8>
		else if(dp == OFF)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d105      	bne.n	8000ee4 <_7SEG_SetNumber+0x7b8>
			DGT2_DP_OFF;
 8000ed8:	2201      	movs	r2, #1
 8000eda:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ede:	4803      	ldr	r0, [pc, #12]	@ (8000eec <_7SEG_SetNumber+0x7c0>)
 8000ee0:	f002 fe5a 	bl	8003b98 <HAL_GPIO_WritePin>
}
 8000ee4:	bf00      	nop
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40021000 	.word	0x40021000

08000ef0 <CLCD_GPIO_Init>:
#include "CLCD.h"

 CLCD clcd = {"0","0"};

void CLCD_GPIO_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIOE Periph clock enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	603b      	str	r3, [r7, #0]
 8000efa:	4b23      	ldr	r3, [pc, #140]	@ (8000f88 <CLCD_GPIO_Init+0x98>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	4a22      	ldr	r2, [pc, #136]	@ (8000f88 <CLCD_GPIO_Init+0x98>)
 8000f00:	f043 0310 	orr.w	r3, r3, #16
 8000f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f06:	4b20      	ldr	r3, [pc, #128]	@ (8000f88 <CLCD_GPIO_Init+0x98>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0a:	f003 0310 	and.w	r3, r3, #16
 8000f0e:	603b      	str	r3, [r7, #0]
 8000f10:	683b      	ldr	r3, [r7, #0]

	/* Configure RS, RW, EN, D4, D5, D6, D7 in output pushpull mode */
	GPIO_InitStruct.Pin = GPIO_PIN_RS;
 8000f12:	2301      	movs	r3, #1
 8000f14:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f16:	2301      	movs	r3, #1
 8000f18:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIO_RS, &GPIO_InitStruct);
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	4619      	mov	r1, r3
 8000f26:	4819      	ldr	r0, [pc, #100]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f28:	f002 fc82 	bl	8003830 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_RW;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_RW, &GPIO_InitStruct);
 8000f30:	1d3b      	adds	r3, r7, #4
 8000f32:	4619      	mov	r1, r3
 8000f34:	4815      	ldr	r0, [pc, #84]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f36:	f002 fc7b 	bl	8003830 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_EN;
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_EN, &GPIO_InitStruct);
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	4619      	mov	r1, r3
 8000f42:	4812      	ldr	r0, [pc, #72]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f44:	f002 fc74 	bl	8003830 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D4;
 8000f48:	2310      	movs	r3, #16
 8000f4a:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D4, &GPIO_InitStruct);
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	4619      	mov	r1, r3
 8000f50:	480e      	ldr	r0, [pc, #56]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f52:	f002 fc6d 	bl	8003830 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D5;
 8000f56:	2320      	movs	r3, #32
 8000f58:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D5, &GPIO_InitStruct);
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	480b      	ldr	r0, [pc, #44]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f60:	f002 fc66 	bl	8003830 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D6;
 8000f64:	2340      	movs	r3, #64	@ 0x40
 8000f66:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D6, &GPIO_InitStruct);
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4807      	ldr	r0, [pc, #28]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f6e:	f002 fc5f 	bl	8003830 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_D7;
 8000f72:	2380      	movs	r3, #128	@ 0x80
 8000f74:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIO_D7, &GPIO_InitStruct);
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4804      	ldr	r0, [pc, #16]	@ (8000f8c <CLCD_GPIO_Init+0x9c>)
 8000f7c:	f002 fc58 	bl	8003830 <HAL_GPIO_Init>
}
 8000f80:	bf00      	nop
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40021000 	.word	0x40021000

08000f90 <CLCD_Write_Instruction>:

void CLCD_Write_Instruction(unsigned char b)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
	//상위 4비트
	GPIO_D7->ODR = (b & 0x80) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	da04      	bge.n	8000fac <CLCD_Write_Instruction+0x1c>
 8000fa2:	4b5f      	ldr	r3, [pc, #380]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000faa:	e003      	b.n	8000fb4 <CLCD_Write_Instruction+0x24>
 8000fac:	4b5c      	ldr	r3, [pc, #368]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fae:	695b      	ldr	r3, [r3, #20]
 8000fb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000fb4:	4a5a      	ldr	r2, [pc, #360]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fb6:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x40) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d004      	beq.n	8000fcc <CLCD_Write_Instruction+0x3c>
 8000fc2:	4b57      	ldr	r3, [pc, #348]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fca:	e003      	b.n	8000fd4 <CLCD_Write_Instruction+0x44>
 8000fcc:	4b54      	ldr	r3, [pc, #336]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fce:	695b      	ldr	r3, [r3, #20]
 8000fd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000fd4:	4a52      	ldr	r2, [pc, #328]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fd6:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x20) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	f003 0320 	and.w	r3, r3, #32
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d004      	beq.n	8000fec <CLCD_Write_Instruction+0x5c>
 8000fe2:	4b4f      	ldr	r3, [pc, #316]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	f043 0320 	orr.w	r3, r3, #32
 8000fea:	e003      	b.n	8000ff4 <CLCD_Write_Instruction+0x64>
 8000fec:	4b4c      	ldr	r3, [pc, #304]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000fee:	695b      	ldr	r3, [r3, #20]
 8000ff0:	f023 0320 	bic.w	r3, r3, #32
 8000ff4:	4a4a      	ldr	r2, [pc, #296]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8000ff6:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x10) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	f003 0310 	and.w	r3, r3, #16
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d004      	beq.n	800100c <CLCD_Write_Instruction+0x7c>
 8001002:	4b47      	ldr	r3, [pc, #284]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	f043 0310 	orr.w	r3, r3, #16
 800100a:	e003      	b.n	8001014 <CLCD_Write_Instruction+0x84>
 800100c:	4b44      	ldr	r3, [pc, #272]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	f023 0310 	bic.w	r3, r3, #16
 8001014:	4a42      	ldr	r2, [pc, #264]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001016:	6153      	str	r3, [r2, #20]

	GPIO_RS->ODR = GPIO_RS->ODR & ~GPIO_PIN_RS; //RS를 Low
 8001018:	4b41      	ldr	r3, [pc, #260]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800101a:	695b      	ldr	r3, [r3, #20]
 800101c:	4a40      	ldr	r2, [pc, #256]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800101e:	f023 0301 	bic.w	r3, r3, #1
 8001022:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW를 Low
 8001024:	4b3e      	ldr	r3, [pc, #248]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001026:	695b      	ldr	r3, [r3, #20]
 8001028:	4a3d      	ldr	r2, [pc, #244]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800102a:	f023 0302 	bic.w	r3, r3, #2
 800102e:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN를 Low
 8001030:	4b3b      	ldr	r3, [pc, #236]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001032:	695b      	ldr	r3, [r3, #20]
 8001034:	4a3a      	ldr	r2, [pc, #232]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001036:	f023 0304 	bic.w	r3, r3, #4
 800103a:	6153      	str	r3, [r2, #20]

	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN를 High
 800103c:	4b38      	ldr	r3, [pc, #224]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800103e:	695b      	ldr	r3, [r3, #20]
 8001040:	4a37      	ldr	r2, [pc, #220]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001042:	f043 0304 	orr.w	r3, r3, #4
 8001046:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN를 Low
 8001048:	4b35      	ldr	r3, [pc, #212]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800104a:	695b      	ldr	r3, [r3, #20]
 800104c:	4a34      	ldr	r2, [pc, #208]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800104e:	f023 0304 	bic.w	r3, r3, #4
 8001052:	6153      	str	r3, [r2, #20]

	//하위 4비트
	GPIO_D7->ODR = (b & 0x08) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	f003 0308 	and.w	r3, r3, #8
 800105a:	2b00      	cmp	r3, #0
 800105c:	d004      	beq.n	8001068 <CLCD_Write_Instruction+0xd8>
 800105e:	4b30      	ldr	r3, [pc, #192]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001066:	e003      	b.n	8001070 <CLCD_Write_Instruction+0xe0>
 8001068:	4b2d      	ldr	r3, [pc, #180]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001070:	4a2b      	ldr	r2, [pc, #172]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001072:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x04) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	2b00      	cmp	r3, #0
 800107c:	d004      	beq.n	8001088 <CLCD_Write_Instruction+0xf8>
 800107e:	4b28      	ldr	r3, [pc, #160]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001086:	e003      	b.n	8001090 <CLCD_Write_Instruction+0x100>
 8001088:	4b25      	ldr	r3, [pc, #148]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800108a:	695b      	ldr	r3, [r3, #20]
 800108c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001090:	4a23      	ldr	r2, [pc, #140]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001092:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x02) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d004      	beq.n	80010a8 <CLCD_Write_Instruction+0x118>
 800109e:	4b20      	ldr	r3, [pc, #128]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	f043 0320 	orr.w	r3, r3, #32
 80010a6:	e003      	b.n	80010b0 <CLCD_Write_Instruction+0x120>
 80010a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010aa:	695b      	ldr	r3, [r3, #20]
 80010ac:	f023 0320 	bic.w	r3, r3, #32
 80010b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010b2:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x01) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d004      	beq.n	80010c8 <CLCD_Write_Instruction+0x138>
 80010be:	4b18      	ldr	r3, [pc, #96]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	f043 0310 	orr.w	r3, r3, #16
 80010c6:	e003      	b.n	80010d0 <CLCD_Write_Instruction+0x140>
 80010c8:	4b15      	ldr	r3, [pc, #84]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010ca:	695b      	ldr	r3, [r3, #20]
 80010cc:	f023 0310 	bic.w	r3, r3, #16
 80010d0:	4a13      	ldr	r2, [pc, #76]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010d2:	6153      	str	r3, [r2, #20]

	GPIO_RS->ODR = GPIO_RS->ODR & ~GPIO_PIN_RS; //RS를 Low
 80010d4:	4b12      	ldr	r3, [pc, #72]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010d6:	695b      	ldr	r3, [r3, #20]
 80010d8:	4a11      	ldr	r2, [pc, #68]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010da:	f023 0301 	bic.w	r3, r3, #1
 80010de:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW를 Low
 80010e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010e2:	695b      	ldr	r3, [r3, #20]
 80010e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010e6:	f023 0302 	bic.w	r3, r3, #2
 80010ea:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN를 Low
 80010ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010ee:	695b      	ldr	r3, [r3, #20]
 80010f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010f2:	f023 0304 	bic.w	r3, r3, #4
 80010f6:	6153      	str	r3, [r2, #20]

	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN를 High
 80010f8:	4b09      	ldr	r3, [pc, #36]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010fa:	695b      	ldr	r3, [r3, #20]
 80010fc:	4a08      	ldr	r2, [pc, #32]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 80010fe:	f043 0304 	orr.w	r3, r3, #4
 8001102:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN를 Low
 8001104:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 8001106:	695b      	ldr	r3, [r3, #20]
 8001108:	4a05      	ldr	r2, [pc, #20]	@ (8001120 <CLCD_Write_Instruction+0x190>)
 800110a:	f023 0304 	bic.w	r3, r3, #4
 800110e:	6153      	str	r3, [r2, #20]

	HAL_Delay(1);
 8001110:	2001      	movs	r0, #1
 8001112:	f002 f9c5 	bl	80034a0 <HAL_Delay>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40021000 	.word	0x40021000

08001124 <CLCD_Write_Display>:

void CLCD_Write_Display(unsigned char b)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
	//상위 4비트
	GPIO_D7->ODR = (b & 0x80) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	2b00      	cmp	r3, #0
 8001134:	da04      	bge.n	8001140 <CLCD_Write_Display+0x1c>
 8001136:	4b5f      	ldr	r3, [pc, #380]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800113e:	e003      	b.n	8001148 <CLCD_Write_Display+0x24>
 8001140:	4b5c      	ldr	r3, [pc, #368]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001148:	4a5a      	ldr	r2, [pc, #360]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800114a:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x40) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001152:	2b00      	cmp	r3, #0
 8001154:	d004      	beq.n	8001160 <CLCD_Write_Display+0x3c>
 8001156:	4b57      	ldr	r3, [pc, #348]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800115e:	e003      	b.n	8001168 <CLCD_Write_Display+0x44>
 8001160:	4b54      	ldr	r3, [pc, #336]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001168:	4a52      	ldr	r2, [pc, #328]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800116a:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x20) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	f003 0320 	and.w	r3, r3, #32
 8001172:	2b00      	cmp	r3, #0
 8001174:	d004      	beq.n	8001180 <CLCD_Write_Display+0x5c>
 8001176:	4b4f      	ldr	r3, [pc, #316]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	f043 0320 	orr.w	r3, r3, #32
 800117e:	e003      	b.n	8001188 <CLCD_Write_Display+0x64>
 8001180:	4b4c      	ldr	r3, [pc, #304]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001182:	695b      	ldr	r3, [r3, #20]
 8001184:	f023 0320 	bic.w	r3, r3, #32
 8001188:	4a4a      	ldr	r2, [pc, #296]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800118a:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x10) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	f003 0310 	and.w	r3, r3, #16
 8001192:	2b00      	cmp	r3, #0
 8001194:	d004      	beq.n	80011a0 <CLCD_Write_Display+0x7c>
 8001196:	4b47      	ldr	r3, [pc, #284]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	f043 0310 	orr.w	r3, r3, #16
 800119e:	e003      	b.n	80011a8 <CLCD_Write_Display+0x84>
 80011a0:	4b44      	ldr	r3, [pc, #272]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011a2:	695b      	ldr	r3, [r3, #20]
 80011a4:	f023 0310 	bic.w	r3, r3, #16
 80011a8:	4a42      	ldr	r2, [pc, #264]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011aa:	6153      	str	r3, [r2, #20]

	GPIO_RS->ODR = GPIO_RS->ODR | GPIO_PIN_RS; //RS를 High
 80011ac:	4b41      	ldr	r3, [pc, #260]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011ae:	695b      	ldr	r3, [r3, #20]
 80011b0:	4a40      	ldr	r2, [pc, #256]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW를 Low
 80011b8:	4b3e      	ldr	r3, [pc, #248]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	4a3d      	ldr	r2, [pc, #244]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011be:	f023 0302 	bic.w	r3, r3, #2
 80011c2:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN를 Low
 80011c4:	4b3b      	ldr	r3, [pc, #236]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011c6:	695b      	ldr	r3, [r3, #20]
 80011c8:	4a3a      	ldr	r2, [pc, #232]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011ca:	f023 0304 	bic.w	r3, r3, #4
 80011ce:	6153      	str	r3, [r2, #20]

	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN를 High
 80011d0:	4b38      	ldr	r3, [pc, #224]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011d2:	695b      	ldr	r3, [r3, #20]
 80011d4:	4a37      	ldr	r2, [pc, #220]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011d6:	f043 0304 	orr.w	r3, r3, #4
 80011da:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN를 Low
 80011dc:	4b35      	ldr	r3, [pc, #212]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011de:	695b      	ldr	r3, [r3, #20]
 80011e0:	4a34      	ldr	r2, [pc, #208]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011e2:	f023 0304 	bic.w	r3, r3, #4
 80011e6:	6153      	str	r3, [r2, #20]

	//하위 4비트
	GPIO_D7->ODR = (b & 0x08) ? GPIO_D7->ODR | GPIO_PIN_D7 : GPIO_D7->ODR & ~GPIO_PIN_D7; //D7
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	f003 0308 	and.w	r3, r3, #8
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d004      	beq.n	80011fc <CLCD_Write_Display+0xd8>
 80011f2:	4b30      	ldr	r3, [pc, #192]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011fa:	e003      	b.n	8001204 <CLCD_Write_Display+0xe0>
 80011fc:	4b2d      	ldr	r3, [pc, #180]	@ (80012b4 <CLCD_Write_Display+0x190>)
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001204:	4a2b      	ldr	r2, [pc, #172]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001206:	6153      	str	r3, [r2, #20]
	GPIO_D6->ODR = (b & 0x04) ? GPIO_D6->ODR | GPIO_PIN_D6 : GPIO_D6->ODR & ~GPIO_PIN_D6; //D6
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	f003 0304 	and.w	r3, r3, #4
 800120e:	2b00      	cmp	r3, #0
 8001210:	d004      	beq.n	800121c <CLCD_Write_Display+0xf8>
 8001212:	4b28      	ldr	r3, [pc, #160]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800121a:	e003      	b.n	8001224 <CLCD_Write_Display+0x100>
 800121c:	4b25      	ldr	r3, [pc, #148]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001224:	4a23      	ldr	r2, [pc, #140]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001226:	6153      	str	r3, [r2, #20]
	GPIO_D5->ODR = (b & 0x02) ? GPIO_D5->ODR | GPIO_PIN_D5 : GPIO_D5->ODR & ~GPIO_PIN_D5; //D5
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d004      	beq.n	800123c <CLCD_Write_Display+0x118>
 8001232:	4b20      	ldr	r3, [pc, #128]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	f043 0320 	orr.w	r3, r3, #32
 800123a:	e003      	b.n	8001244 <CLCD_Write_Display+0x120>
 800123c:	4b1d      	ldr	r3, [pc, #116]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	f023 0320 	bic.w	r3, r3, #32
 8001244:	4a1b      	ldr	r2, [pc, #108]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001246:	6153      	str	r3, [r2, #20]
	GPIO_D4->ODR = (b & 0x01) ? GPIO_D4->ODR | GPIO_PIN_D4 : GPIO_D4->ODR & ~GPIO_PIN_D4; //D4
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b00      	cmp	r3, #0
 8001250:	d004      	beq.n	800125c <CLCD_Write_Display+0x138>
 8001252:	4b18      	ldr	r3, [pc, #96]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	f043 0310 	orr.w	r3, r3, #16
 800125a:	e003      	b.n	8001264 <CLCD_Write_Display+0x140>
 800125c:	4b15      	ldr	r3, [pc, #84]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800125e:	695b      	ldr	r3, [r3, #20]
 8001260:	f023 0310 	bic.w	r3, r3, #16
 8001264:	4a13      	ldr	r2, [pc, #76]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001266:	6153      	str	r3, [r2, #20]

	GPIO_RS->ODR = GPIO_RS->ODR | GPIO_PIN_RS; //RS를 High
 8001268:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800126a:	695b      	ldr	r3, [r3, #20]
 800126c:	4a11      	ldr	r2, [pc, #68]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	6153      	str	r3, [r2, #20]
	GPIO_RW->ODR = GPIO_RW->ODR & ~GPIO_PIN_RW; //RW를 Low
 8001274:	4b0f      	ldr	r3, [pc, #60]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001276:	695b      	ldr	r3, [r3, #20]
 8001278:	4a0e      	ldr	r2, [pc, #56]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800127a:	f023 0302 	bic.w	r3, r3, #2
 800127e:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN를 Low
 8001280:	4b0c      	ldr	r3, [pc, #48]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	4a0b      	ldr	r2, [pc, #44]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001286:	f023 0304 	bic.w	r3, r3, #4
 800128a:	6153      	str	r3, [r2, #20]

	GPIO_EN->ODR = GPIO_EN->ODR | GPIO_PIN_EN; //EN를 High
 800128c:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800128e:	695b      	ldr	r3, [r3, #20]
 8001290:	4a08      	ldr	r2, [pc, #32]	@ (80012b4 <CLCD_Write_Display+0x190>)
 8001292:	f043 0304 	orr.w	r3, r3, #4
 8001296:	6153      	str	r3, [r2, #20]
	GPIO_EN->ODR = GPIO_EN->ODR & ~GPIO_PIN_EN; //EN를 Low
 8001298:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	4a05      	ldr	r2, [pc, #20]	@ (80012b4 <CLCD_Write_Display+0x190>)
 800129e:	f023 0304 	bic.w	r3, r3, #4
 80012a2:	6153      	str	r3, [r2, #20]

	HAL_Delay(1);
 80012a4:	2001      	movs	r0, #1
 80012a6:	f002 f8fb 	bl	80034a0 <HAL_Delay>
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40021000 	.word	0x40021000

080012b8 <CLCD_Gotoxy>:


void CLCD_Gotoxy(unsigned char x, unsigned char y)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	460a      	mov	r2, r1
 80012c2:	71fb      	strb	r3, [r7, #7]
 80012c4:	4613      	mov	r3, r2
 80012c6:	71bb      	strb	r3, [r7, #6]
	// 16 * 2 character LCD
	switch(y)
 80012c8:	79bb      	ldrb	r3, [r7, #6]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d002      	beq.n	80012d4 <CLCD_Gotoxy+0x1c>
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d007      	beq.n	80012e2 <CLCD_Gotoxy+0x2a>
		case 0 : CLCD_Write_Instruction(0x80 + x); break;
		case 1 : CLCD_Write_Instruction(0xC0 + x); break;
		//case 2 : CLCD_Write_Instruction(0x90+x); break; //Uncomment for 16 * 4 character LCD
		//case 3 : CLCD_Write_Instruction(0xd0+x); break; //Uncomment for 16 * 4 character LCD
	}
}
 80012d2:	e00d      	b.n	80012f0 <CLCD_Gotoxy+0x38>
		case 0 : CLCD_Write_Instruction(0x80 + x); break;
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	3b80      	subs	r3, #128	@ 0x80
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fe58 	bl	8000f90 <CLCD_Write_Instruction>
 80012e0:	e006      	b.n	80012f0 <CLCD_Gotoxy+0x38>
		case 1 : CLCD_Write_Instruction(0xC0 + x); break;
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	3b40      	subs	r3, #64	@ 0x40
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff fe51 	bl	8000f90 <CLCD_Write_Instruction>
 80012ee:	bf00      	nop
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <CLCD_Puts>:

void CLCD_Puts(unsigned char x, unsigned char y, unsigned char *str)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	603a      	str	r2, [r7, #0]
 8001302:	71fb      	strb	r3, [r7, #7]
 8001304:	460b      	mov	r3, r1
 8001306:	71bb      	strb	r3, [r7, #6]
	unsigned int i=0;
 8001308:	2300      	movs	r3, #0
 800130a:	60fb      	str	r3, [r7, #12]

	CLCD_Gotoxy(x,y);
 800130c:	79ba      	ldrb	r2, [r7, #6]
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	4611      	mov	r1, r2
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff ffd0 	bl	80012b8 <CLCD_Gotoxy>
	do
	{
		CLCD_Write_Display(str[i]);
 8001318:	683a      	ldr	r2, [r7, #0]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4413      	add	r3, r2
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff feff 	bl	8001124 <CLCD_Write_Display>
	}
	while(str[++i]!='\0');
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	3301      	adds	r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	4413      	add	r3, r2
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1ef      	bne.n	8001318 <CLCD_Puts+0x20>
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <CLCD_Init>:

void CLCD_Init(void)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8001346:	2064      	movs	r0, #100	@ 0x64
 8001348:	f002 f8aa 	bl	80034a0 <HAL_Delay>
	CLCD_Write_Instruction(0x28);
 800134c:	2028      	movs	r0, #40	@ 0x28
 800134e:	f7ff fe1f 	bl	8000f90 <CLCD_Write_Instruction>
	HAL_Delay(10);
 8001352:	200a      	movs	r0, #10
 8001354:	f002 f8a4 	bl	80034a0 <HAL_Delay>
	CLCD_Write_Instruction(0x28);
 8001358:	2028      	movs	r0, #40	@ 0x28
 800135a:	f7ff fe19 	bl	8000f90 <CLCD_Write_Instruction>
	HAL_Delay(10);
 800135e:	200a      	movs	r0, #10
 8001360:	f002 f89e 	bl	80034a0 <HAL_Delay>
	CLCD_Write_Instruction(0x0C);
 8001364:	200c      	movs	r0, #12
 8001366:	f7ff fe13 	bl	8000f90 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x06);
 800136a:	2006      	movs	r0, #6
 800136c:	f7ff fe10 	bl	8000f90 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x02);
 8001370:	2002      	movs	r0, #2
 8001372:	f7ff fe0d 	bl	8000f90 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x01);
 8001376:	2001      	movs	r0, #1
 8001378:	f7ff fe0a 	bl	8000f90 <CLCD_Write_Instruction>
	CLCD_Write_Instruction(0x01);
 800137c:	2001      	movs	r0, #1
 800137e:	f7ff fe07 	bl	8000f90 <CLCD_Write_Instruction>
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}

08001386 <CLCD_Clear>:

void CLCD_Clear(void)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	af00      	add	r7, sp, #0
	CLCD_Write_Instruction(0x01);
 800138a:	2001      	movs	r0, #1
 800138c:	f7ff fe00 	bl	8000f90 <CLCD_Write_Instruction>
	HAL_Delay(10);
 8001390:	200a      	movs	r0, #10
 8001392:	f002 f885 	bl	80034a0 <HAL_Delay>
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <displayAlarmSettings>:
#include "buzzer.h"

Alarm alarm;

void displayAlarmSettings(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af02      	add	r7, sp, #8

	int displayHour = alarm.alarmTime[alarm.alarmIndex].hour;
 80013a2:	4b42      	ldr	r3, [pc, #264]	@ (80014ac <displayAlarmSettings+0x110>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	4619      	mov	r1, r3
 80013a8:	4a40      	ldr	r2, [pc, #256]	@ (80014ac <displayAlarmSettings+0x110>)
 80013aa:	460b      	mov	r3, r1
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	440b      	add	r3, r1
 80013b0:	4413      	add	r3, r2
 80013b2:	3304      	adds	r3, #4
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	607b      	str	r3, [r7, #4]
	const char* period = "AM";
 80013b8:	4b3d      	ldr	r3, [pc, #244]	@ (80014b0 <displayAlarmSettings+0x114>)
 80013ba:	60fb      	str	r3, [r7, #12]
	const char* OnOff;

	// 7SEG
	 _7SEG_SetNumber(DGT1, watch.Time.second / 10, OFF);
 80013bc:	4b3d      	ldr	r3, [pc, #244]	@ (80014b4 <displayAlarmSettings+0x118>)
 80013be:	695b      	ldr	r3, [r3, #20]
 80013c0:	4a3d      	ldr	r2, [pc, #244]	@ (80014b8 <displayAlarmSettings+0x11c>)
 80013c2:	fb82 1203 	smull	r1, r2, r2, r3
 80013c6:	1092      	asrs	r2, r2, #2
 80013c8:	17db      	asrs	r3, r3, #31
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2200      	movs	r2, #0
 80013ce:	4619      	mov	r1, r3
 80013d0:	2000      	movs	r0, #0
 80013d2:	f7ff f9ab 	bl	800072c <_7SEG_SetNumber>
	 _7SEG_SetNumber(DGT2, watch.Time.second % 10, OFF);
 80013d6:	4b37      	ldr	r3, [pc, #220]	@ (80014b4 <displayAlarmSettings+0x118>)
 80013d8:	695a      	ldr	r2, [r3, #20]
 80013da:	4b37      	ldr	r3, [pc, #220]	@ (80014b8 <displayAlarmSettings+0x11c>)
 80013dc:	fb83 1302 	smull	r1, r3, r3, r2
 80013e0:	1099      	asrs	r1, r3, #2
 80013e2:	17d3      	asrs	r3, r2, #31
 80013e4:	1ac9      	subs	r1, r1, r3
 80013e6:	460b      	mov	r3, r1
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	440b      	add	r3, r1
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	1ad1      	subs	r1, r2, r3
 80013f0:	2200      	movs	r2, #0
 80013f2:	2001      	movs	r0, #1
 80013f4:	f7ff f99a 	bl	800072c <_7SEG_SetNumber>


	if(alarm.alarmTime[alarm.alarmIndex].isEnabled)
 80013f8:	4b2c      	ldr	r3, [pc, #176]	@ (80014ac <displayAlarmSettings+0x110>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	4619      	mov	r1, r3
 80013fe:	4a2b      	ldr	r2, [pc, #172]	@ (80014ac <displayAlarmSettings+0x110>)
 8001400:	460b      	mov	r3, r1
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	440b      	add	r3, r1
 8001406:	4413      	add	r3, r2
 8001408:	3306      	adds	r3, #6
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d002      	beq.n	8001416 <displayAlarmSettings+0x7a>
	{
		OnOff = "ON ";
 8001410:	4b2a      	ldr	r3, [pc, #168]	@ (80014bc <displayAlarmSettings+0x120>)
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	e001      	b.n	800141a <displayAlarmSettings+0x7e>
	}
	else
	{
		OnOff = "OFF";
 8001416:	4b2a      	ldr	r3, [pc, #168]	@ (80014c0 <displayAlarmSettings+0x124>)
 8001418:	60bb      	str	r3, [r7, #8]
	}

	if (displayHour == 0)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d104      	bne.n	800142a <displayAlarmSettings+0x8e>
	{
		displayHour = 12; // 0시를 12시로 표시
 8001420:	230c      	movs	r3, #12
 8001422:	607b      	str	r3, [r7, #4]
		period = "AM"; // 자정
 8001424:	4b22      	ldr	r3, [pc, #136]	@ (80014b0 <displayAlarmSettings+0x114>)
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	e00d      	b.n	8001446 <displayAlarmSettings+0xaa>
	}
	else if (displayHour < 12)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b0b      	cmp	r3, #11
 800142e:	dc02      	bgt.n	8001436 <displayAlarmSettings+0x9a>
	{
		period = "AM"; // 오전
 8001430:	4b1f      	ldr	r3, [pc, #124]	@ (80014b0 <displayAlarmSettings+0x114>)
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	e007      	b.n	8001446 <displayAlarmSettings+0xaa>
	} else
	{
		period = "PM"; // 오후
 8001436:	4b23      	ldr	r3, [pc, #140]	@ (80014c4 <displayAlarmSettings+0x128>)
 8001438:	60fb      	str	r3, [r7, #12]
		if (displayHour > 12)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b0c      	cmp	r3, #12
 800143e:	dd02      	ble.n	8001446 <displayAlarmSettings+0xaa>
		{
			displayHour -= 12;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3b0c      	subs	r3, #12
 8001444:	607b      	str	r3, [r7, #4]
		}
	}

	sprintf(clcd.str1,"ALARM #%d %s",
			alarm.alarmIndex+1,
 8001446:	4b19      	ldr	r3, [pc, #100]	@ (80014ac <displayAlarmSettings+0x110>)
 8001448:	781b      	ldrb	r3, [r3, #0]
	sprintf(clcd.str1,"ALARM #%d %s",
 800144a:	1c5a      	adds	r2, r3, #1
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	491e      	ldr	r1, [pc, #120]	@ (80014c8 <displayAlarmSettings+0x12c>)
 8001450:	481e      	ldr	r0, [pc, #120]	@ (80014cc <displayAlarmSettings+0x130>)
 8001452:	f005 f843 	bl	80064dc <siprintf>
			OnOff);
	sprintf(clcd.str2,"        %s %02d:%02d",
			period,
			alarm.alarmTime[alarm.alarmIndex].hour,
 8001456:	4b15      	ldr	r3, [pc, #84]	@ (80014ac <displayAlarmSettings+0x110>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	4619      	mov	r1, r3
 800145c:	4a13      	ldr	r2, [pc, #76]	@ (80014ac <displayAlarmSettings+0x110>)
 800145e:	460b      	mov	r3, r1
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	440b      	add	r3, r1
 8001464:	4413      	add	r3, r2
 8001466:	3304      	adds	r3, #4
 8001468:	781b      	ldrb	r3, [r3, #0]
	sprintf(clcd.str2,"        %s %02d:%02d",
 800146a:	4618      	mov	r0, r3
			alarm.alarmTime[alarm.alarmIndex].minute);
 800146c:	4b0f      	ldr	r3, [pc, #60]	@ (80014ac <displayAlarmSettings+0x110>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	4619      	mov	r1, r3
 8001472:	4a0e      	ldr	r2, [pc, #56]	@ (80014ac <displayAlarmSettings+0x110>)
 8001474:	460b      	mov	r3, r1
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	440b      	add	r3, r1
 800147a:	4413      	add	r3, r2
 800147c:	3305      	adds	r3, #5
 800147e:	781b      	ldrb	r3, [r3, #0]
	sprintf(clcd.str2,"        %s %02d:%02d",
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	4603      	mov	r3, r0
 8001484:	68fa      	ldr	r2, [r7, #12]
 8001486:	4912      	ldr	r1, [pc, #72]	@ (80014d0 <displayAlarmSettings+0x134>)
 8001488:	4812      	ldr	r0, [pc, #72]	@ (80014d4 <displayAlarmSettings+0x138>)
 800148a:	f005 f827 	bl	80064dc <siprintf>

	CLCD_Puts(0, 0, clcd.str1);
 800148e:	4a0f      	ldr	r2, [pc, #60]	@ (80014cc <displayAlarmSettings+0x130>)
 8001490:	2100      	movs	r1, #0
 8001492:	2000      	movs	r0, #0
 8001494:	f7ff ff30 	bl	80012f8 <CLCD_Puts>
	CLCD_Puts(0, 1, clcd.str2);
 8001498:	4a0e      	ldr	r2, [pc, #56]	@ (80014d4 <displayAlarmSettings+0x138>)
 800149a:	2101      	movs	r1, #1
 800149c:	2000      	movs	r0, #0
 800149e:	f7ff ff2b 	bl	80012f8 <CLCD_Puts>

}
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000098 	.word	0x20000098
 80014b0:	08006e34 	.word	0x08006e34
 80014b4:	200001c4 	.word	0x200001c4
 80014b8:	66666667 	.word	0x66666667
 80014bc:	08006e38 	.word	0x08006e38
 80014c0:	08006e3c 	.word	0x08006e3c
 80014c4:	08006e40 	.word	0x08006e40
 80014c8:	08006e44 	.word	0x08006e44
 80014cc:	20000000 	.word	0x20000000
 80014d0:	08006e54 	.word	0x08006e54
 80014d4:	20000010 	.word	0x20000010

080014d8 <alert>:

void alert(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
	/////////////LCD///////////////////////////
			if(watch.Time.millisecond < 500)
 80014dc:	4b44      	ldr	r3, [pc, #272]	@ (80015f0 <alert+0x118>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80014e4:	da04      	bge.n	80014f0 <alert+0x18>
			{
				sprintf(clcd.str1,"                ");
 80014e6:	4943      	ldr	r1, [pc, #268]	@ (80015f4 <alert+0x11c>)
 80014e8:	4843      	ldr	r0, [pc, #268]	@ (80015f8 <alert+0x120>)
 80014ea:	f004 fff7 	bl	80064dc <siprintf>
 80014ee:	e003      	b.n	80014f8 <alert+0x20>
			}
			else
			{
				sprintf(clcd.str1,"ALARM TRIGGERED!");
 80014f0:	4942      	ldr	r1, [pc, #264]	@ (80015fc <alert+0x124>)
 80014f2:	4841      	ldr	r0, [pc, #260]	@ (80015f8 <alert+0x120>)
 80014f4:	f004 fff2 	bl	80064dc <siprintf>
			}

			sprintf(clcd.str2,"                ");
 80014f8:	493e      	ldr	r1, [pc, #248]	@ (80015f4 <alert+0x11c>)
 80014fa:	4841      	ldr	r0, [pc, #260]	@ (8001600 <alert+0x128>)
 80014fc:	f004 ffee 	bl	80064dc <siprintf>
			CLCD_Puts(0, 0,clcd.str1);
 8001500:	4a3d      	ldr	r2, [pc, #244]	@ (80015f8 <alert+0x120>)
 8001502:	2100      	movs	r1, #0
 8001504:	2000      	movs	r0, #0
 8001506:	f7ff fef7 	bl	80012f8 <CLCD_Puts>
			CLCD_Puts(0, 1,clcd.str2);
 800150a:	4a3d      	ldr	r2, [pc, #244]	@ (8001600 <alert+0x128>)
 800150c:	2101      	movs	r1, #1
 800150e:	2000      	movs	r0, #0
 8001510:	f7ff fef2 	bl	80012f8 <CLCD_Puts>
////////////////////////////LED/////////////////////////////
			if(alarm.ledState)
 8001514:	4b3b      	ldr	r3, [pc, #236]	@ (8001604 <alert+0x12c>)
 8001516:	789b      	ldrb	r3, [r3, #2]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d01b      	beq.n	8001554 <alert+0x7c>
			{
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800151c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001520:	4839      	ldr	r0, [pc, #228]	@ (8001608 <alert+0x130>)
 8001522:	f002 fb52 	bl	8003bca <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8001526:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800152a:	4837      	ldr	r0, [pc, #220]	@ (8001608 <alert+0x130>)
 800152c:	f002 fb4d 	bl	8003bca <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8001530:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001534:	4834      	ldr	r0, [pc, #208]	@ (8001608 <alert+0x130>)
 8001536:	f002 fb48 	bl	8003bca <HAL_GPIO_TogglePin>

				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 800153a:	2140      	movs	r1, #64	@ 0x40
 800153c:	4833      	ldr	r0, [pc, #204]	@ (800160c <alert+0x134>)
 800153e:	f002 fb44 	bl	8003bca <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8001542:	2120      	movs	r1, #32
 8001544:	4832      	ldr	r0, [pc, #200]	@ (8001610 <alert+0x138>)
 8001546:	f002 fb40 	bl	8003bca <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800154a:	2101      	movs	r1, #1
 800154c:	4830      	ldr	r0, [pc, #192]	@ (8001610 <alert+0x138>)
 800154e:	f002 fb3c 	bl	8003bca <HAL_GPIO_TogglePin>
 8001552:	e020      	b.n	8001596 <alert+0xbe>
			}
			else
			{
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001554:	2201      	movs	r2, #1
 8001556:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800155a:	482b      	ldr	r0, [pc, #172]	@ (8001608 <alert+0x130>)
 800155c:	f002 fb1c 	bl	8003b98 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001560:	2201      	movs	r2, #1
 8001562:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001566:	4828      	ldr	r0, [pc, #160]	@ (8001608 <alert+0x130>)
 8001568:	f002 fb16 	bl	8003b98 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 800156c:	2201      	movs	r2, #1
 800156e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001572:	4825      	ldr	r0, [pc, #148]	@ (8001608 <alert+0x130>)
 8001574:	f002 fb10 	bl	8003b98 <HAL_GPIO_WritePin>

				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001578:	2201      	movs	r2, #1
 800157a:	2140      	movs	r1, #64	@ 0x40
 800157c:	4823      	ldr	r0, [pc, #140]	@ (800160c <alert+0x134>)
 800157e:	f002 fb0b 	bl	8003b98 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001582:	2201      	movs	r2, #1
 8001584:	2120      	movs	r1, #32
 8001586:	4822      	ldr	r0, [pc, #136]	@ (8001610 <alert+0x138>)
 8001588:	f002 fb06 	bl	8003b98 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800158c:	2201      	movs	r2, #1
 800158e:	2101      	movs	r1, #1
 8001590:	481f      	ldr	r0, [pc, #124]	@ (8001610 <alert+0x138>)
 8001592:	f002 fb01 	bl	8003b98 <HAL_GPIO_WritePin>
			}
////////////////////////buzzer/////////////////////////
			Buz1.BuzTone = BUZ_TONE_HIGH_PSC;
 8001596:	4b1f      	ldr	r3, [pc, #124]	@ (8001614 <alert+0x13c>)
 8001598:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 800159c:	80da      	strh	r2, [r3, #6]
			Buz1.BuzFlag = true;
 800159e:	4b1d      	ldr	r3, [pc, #116]	@ (8001614 <alert+0x13c>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	711a      	strb	r2, [r3, #4]

	/////////////alarm off////////////////////////////////
			if(Btn1.state == Pressing ||
 80015a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001618 <alert+0x140>)
 80015a6:	799b      	ldrb	r3, [r3, #6]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d00b      	beq.n	80015c4 <alert+0xec>
			   Btn2.state == Pressing ||
 80015ac:	4b1b      	ldr	r3, [pc, #108]	@ (800161c <alert+0x144>)
 80015ae:	799b      	ldrb	r3, [r3, #6]
			if(Btn1.state == Pressing ||
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d007      	beq.n	80015c4 <alert+0xec>
			   Btn3.state == Pressing ||
 80015b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001620 <alert+0x148>)
 80015b6:	799b      	ldrb	r3, [r3, #6]
			   Btn2.state == Pressing ||
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d003      	beq.n	80015c4 <alert+0xec>
			   Btn4.state == Pressing)
 80015bc:	4b19      	ldr	r3, [pc, #100]	@ (8001624 <alert+0x14c>)
 80015be:	799b      	ldrb	r3, [r3, #6]
			   Btn3.state == Pressing ||
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d113      	bne.n	80015ec <alert+0x114>
			{
				Btn1.state = Idle;
 80015c4:	4b14      	ldr	r3, [pc, #80]	@ (8001618 <alert+0x140>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	719a      	strb	r2, [r3, #6]
				Btn2.state = Idle;
 80015ca:	4b14      	ldr	r3, [pc, #80]	@ (800161c <alert+0x144>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	719a      	strb	r2, [r3, #6]
				Btn3.state = Idle;
 80015d0:	4b13      	ldr	r3, [pc, #76]	@ (8001620 <alert+0x148>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	719a      	strb	r2, [r3, #6]
				Btn4.state = Idle;
 80015d6:	4b13      	ldr	r3, [pc, #76]	@ (8001624 <alert+0x14c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	719a      	strb	r2, [r3, #6]

				mode = previousMode;
 80015dc:	4b12      	ldr	r3, [pc, #72]	@ (8001628 <alert+0x150>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	4b12      	ldr	r3, [pc, #72]	@ (800162c <alert+0x154>)
 80015e4:	701a      	strb	r2, [r3, #0]
				alarm.alertFlag = 0;
 80015e6:	4b07      	ldr	r3, [pc, #28]	@ (8001604 <alert+0x12c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	705a      	strb	r2, [r3, #1]
			}
}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	200001c4 	.word	0x200001c4
 80015f4:	08006e6c 	.word	0x08006e6c
 80015f8:	20000000 	.word	0x20000000
 80015fc:	08006e80 	.word	0x08006e80
 8001600:	20000010 	.word	0x20000010
 8001604:	20000098 	.word	0x20000098
 8001608:	40020c00 	.word	0x40020c00
 800160c:	40020800 	.word	0x40020800
 8001610:	40020400 	.word	0x40020400
 8001614:	200000dc 	.word	0x200000dc
 8001618:	200000ac 	.word	0x200000ac
 800161c:	200000b8 	.word	0x200000b8
 8001620:	200000c4 	.word	0x200000c4
 8001624:	200000d0 	.word	0x200000d0
 8001628:	200000e5 	.word	0x200000e5
 800162c:	200000e4 	.word	0x200000e4

08001630 <InitializeButtons>:
Button Btn2;
Button Btn3;
Button Btn4;

void InitializeButtons(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
    Btn1.is_pressed = false;
 8001634:	4b1a      	ldr	r3, [pc, #104]	@ (80016a0 <InitializeButtons+0x70>)
 8001636:	2200      	movs	r2, #0
 8001638:	715a      	strb	r2, [r3, #5]
    Btn2.is_pressed = false;
 800163a:	4b1a      	ldr	r3, [pc, #104]	@ (80016a4 <InitializeButtons+0x74>)
 800163c:	2200      	movs	r2, #0
 800163e:	715a      	strb	r2, [r3, #5]
    Btn3.is_pressed = false;
 8001640:	4b19      	ldr	r3, [pc, #100]	@ (80016a8 <InitializeButtons+0x78>)
 8001642:	2200      	movs	r2, #0
 8001644:	715a      	strb	r2, [r3, #5]
    Btn4.is_pressed = false;
 8001646:	4b19      	ldr	r3, [pc, #100]	@ (80016ac <InitializeButtons+0x7c>)
 8001648:	2200      	movs	r2, #0
 800164a:	715a      	strb	r2, [r3, #5]

    Btn1.ReleasedTime = Idle_Released;
 800164c:	4b14      	ldr	r3, [pc, #80]	@ (80016a0 <InitializeButtons+0x70>)
 800164e:	2200      	movs	r2, #0
 8001650:	71da      	strb	r2, [r3, #7]
    Btn2.ReleasedTime = Idle_Released;
 8001652:	4b14      	ldr	r3, [pc, #80]	@ (80016a4 <InitializeButtons+0x74>)
 8001654:	2200      	movs	r2, #0
 8001656:	71da      	strb	r2, [r3, #7]
    Btn3.ReleasedTime = Idle_Released;
 8001658:	4b13      	ldr	r3, [pc, #76]	@ (80016a8 <InitializeButtons+0x78>)
 800165a:	2200      	movs	r2, #0
 800165c:	71da      	strb	r2, [r3, #7]
    Btn4.ReleasedTime = Idle_Released;
 800165e:	4b13      	ldr	r3, [pc, #76]	@ (80016ac <InitializeButtons+0x7c>)
 8001660:	2200      	movs	r2, #0
 8001662:	71da      	strb	r2, [r3, #7]

    Btn1.holdTime = BtnHold_Idle;
 8001664:	4b0e      	ldr	r3, [pc, #56]	@ (80016a0 <InitializeButtons+0x70>)
 8001666:	2200      	movs	r2, #0
 8001668:	721a      	strb	r2, [r3, #8]
    Btn2.holdTime = BtnHold_Idle;
 800166a:	4b0e      	ldr	r3, [pc, #56]	@ (80016a4 <InitializeButtons+0x74>)
 800166c:	2200      	movs	r2, #0
 800166e:	721a      	strb	r2, [r3, #8]
    Btn3.holdTime = BtnHold_Idle;
 8001670:	4b0d      	ldr	r3, [pc, #52]	@ (80016a8 <InitializeButtons+0x78>)
 8001672:	2200      	movs	r2, #0
 8001674:	721a      	strb	r2, [r3, #8]
    Btn4.holdTime = BtnHold_Idle;
 8001676:	4b0d      	ldr	r3, [pc, #52]	@ (80016ac <InitializeButtons+0x7c>)
 8001678:	2200      	movs	r2, #0
 800167a:	721a      	strb	r2, [r3, #8]

    Btn1.btnThreshold = Idle_Threshold;
 800167c:	4b08      	ldr	r3, [pc, #32]	@ (80016a0 <InitializeButtons+0x70>)
 800167e:	2200      	movs	r2, #0
 8001680:	725a      	strb	r2, [r3, #9]
    Btn2.btnThreshold = Idle_Threshold;
 8001682:	4b08      	ldr	r3, [pc, #32]	@ (80016a4 <InitializeButtons+0x74>)
 8001684:	2200      	movs	r2, #0
 8001686:	725a      	strb	r2, [r3, #9]
    Btn3.btnThreshold = Idle_Threshold;
 8001688:	4b07      	ldr	r3, [pc, #28]	@ (80016a8 <InitializeButtons+0x78>)
 800168a:	2200      	movs	r2, #0
 800168c:	725a      	strb	r2, [r3, #9]
    Btn4.btnThreshold = Idle_Threshold;
 800168e:	4b07      	ldr	r3, [pc, #28]	@ (80016ac <InitializeButtons+0x7c>)
 8001690:	2200      	movs	r2, #0
 8001692:	725a      	strb	r2, [r3, #9]
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	200000ac 	.word	0x200000ac
 80016a4:	200000b8 	.word	0x200000b8
 80016a8:	200000c4 	.word	0x200000c4
 80016ac:	200000d0 	.word	0x200000d0

080016b0 <HandleButtonPress>:

void HandleButtonPress(Button *btn, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin_Num)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	4613      	mov	r3, r2
 80016bc:	80fb      	strh	r3, [r7, #6]
	if (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin_Num) == GPIO_PIN_SET)
 80016be:	88fb      	ldrh	r3, [r7, #6]
 80016c0:	4619      	mov	r1, r3
 80016c2:	68b8      	ldr	r0, [r7, #8]
 80016c4:	f002 fa50 	bl	8003b68 <HAL_GPIO_ReadPin>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d111      	bne.n	80016f2 <HandleButtonPress+0x42>
	{
		if (btn->is_pressed == false)// to reduce debouncing
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	795b      	ldrb	r3, [r3, #5]
 80016d2:	f083 0301 	eor.w	r3, r3, #1
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d029      	beq.n	8001730 <HandleButtonPress+0x80>
		{
			btn->is_pressed = true;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2201      	movs	r2, #1
 80016e0:	715a      	strb	r2, [r3, #5]


			if (btn->state == Idle)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	799b      	ldrb	r3, [r3, #6]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d122      	bne.n	8001730 <HandleButtonPress+0x80>
			{
				btn->state = Pressing;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2201      	movs	r2, #1
 80016ee:	719a      	strb	r2, [r3, #6]
			}
			btn->millisecond = 0;
			btn->state = Idle;
		}
	}
}
 80016f0:	e01e      	b.n	8001730 <HandleButtonPress+0x80>
	else if (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin_Num) == GPIO_PIN_RESET)
 80016f2:	88fb      	ldrh	r3, [r7, #6]
 80016f4:	4619      	mov	r1, r3
 80016f6:	68b8      	ldr	r0, [r7, #8]
 80016f8:	f002 fa36 	bl	8003b68 <HAL_GPIO_ReadPin>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d116      	bne.n	8001730 <HandleButtonPress+0x80>
		if (btn->is_pressed == true) // to reduce debouncing
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	795b      	ldrb	r3, [r3, #5]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d012      	beq.n	8001730 <HandleButtonPress+0x80>
			btn->is_pressed = false;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2200      	movs	r2, #0
 800170e:	715a      	strb	r2, [r3, #5]
			if (btn->state == Pressing)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	799b      	ldrb	r3, [r3, #6]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d105      	bne.n	8001724 <HandleButtonPress+0x74>
				btn->state = Released;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2202      	movs	r2, #2
 800171c:	719a      	strb	r2, [r3, #6]
				CheckButtonPressTime(btn);
 800171e:	68f8      	ldr	r0, [r7, #12]
 8001720:	f000 f80a 	bl	8001738 <CheckButtonPressTime>
			btn->millisecond = 0;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
			btn->state = Idle;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2200      	movs	r2, #0
 800172e:	719a      	strb	r2, [r3, #6]
}
 8001730:	bf00      	nop
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <CheckButtonPressTime>:

void CheckButtonPressTime(Button* Btn)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	if(Btn->millisecond < SHORT_PRESS_TIME)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8001748:	da03      	bge.n	8001752 <CheckButtonPressTime+0x1a>
	{
		Btn->ReleasedTime = Short_Released;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2201      	movs	r2, #1
 800174e:	71da      	strb	r2, [r3, #7]
	}
	else
	{
		Btn->ReleasedTime = Long_Released;
	}
}
 8001750:	e00c      	b.n	800176c <CheckButtonPressTime+0x34>
	else if(Btn->millisecond < LONG_PRESS_TIME)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 800175a:	4293      	cmp	r3, r2
 800175c:	dc03      	bgt.n	8001766 <CheckButtonPressTime+0x2e>
		Btn->ReleasedTime = Mid_Released;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2202      	movs	r2, #2
 8001762:	71da      	strb	r2, [r3, #7]
}
 8001764:	e002      	b.n	800176c <CheckButtonPressTime+0x34>
		Btn->ReleasedTime = Long_Released;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2203      	movs	r2, #3
 800176a:	71da      	strb	r2, [r3, #7]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <BtnHoldEvent>:

void BtnHoldEvent(Button* btn,GPIO_TypeDef* GPIO,uint16_t GPIO_PIN )
{	// HOLD EVENT
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	4613      	mov	r3, r2
 8001784:	80fb      	strh	r3, [r7, #6]
	if((HAL_GPIO_ReadPin(GPIO, GPIO_PIN) == GPIO_PIN_SET) && btn->state == Pressing)
 8001786:	88fb      	ldrh	r3, [r7, #6]
 8001788:	4619      	mov	r1, r3
 800178a:	68b8      	ldr	r0, [r7, #8]
 800178c:	f002 f9ec 	bl	8003b68 <HAL_GPIO_ReadPin>
 8001790:	4603      	mov	r3, r0
 8001792:	2b01      	cmp	r3, #1
 8001794:	d10e      	bne.n	80017b4 <BtnHoldEvent+0x3c>
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	799b      	ldrb	r3, [r3, #6]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d10a      	bne.n	80017b4 <BtnHoldEvent+0x3c>
	{
		if (btn->millisecond < LONG_PRESS_TIME + 51)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f640 12f6 	movw	r2, #2550	@ 0x9f6
 80017a6:	4293      	cmp	r3, r2
 80017a8:	dc04      	bgt.n	80017b4 <BtnHoldEvent+0x3c>
		{
			btn->millisecond++;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	1c5a      	adds	r2, r3, #1
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	601a      	str	r2, [r3, #0]
		}

	}
}
 80017b4:	bf00      	nop
 80017b6:	3710      	adds	r7, #16
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <CheckBtnHoldingTime>:

void CheckBtnHoldingTime(Button* btn,GPIO_TypeDef* GPIO,uint16_t GPIO_PIN )
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	4613      	mov	r3, r2
 80017c8:	80fb      	strh	r3, [r7, #6]
	// Holding Time
	if(btn->millisecond < SHORT_PRESS_TIME)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 80017d2:	da03      	bge.n	80017dc <CheckBtnHoldingTime+0x20>
	{
		btn->holdTime = BtnHold_Short;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2201      	movs	r2, #1
 80017d8:	721a      	strb	r2, [r3, #8]
	}
	else
	{
		btn->holdTime = BtnHold_Long;
	}
}
 80017da:	e00c      	b.n	80017f6 <CheckBtnHoldingTime+0x3a>
	else if(btn->millisecond < LONG_PRESS_TIME)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80017e4:	4293      	cmp	r3, r2
 80017e6:	dc03      	bgt.n	80017f0 <CheckBtnHoldingTime+0x34>
		btn->holdTime = BtnHold_Mid;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2202      	movs	r2, #2
 80017ec:	721a      	strb	r2, [r3, #8]
}
 80017ee:	e002      	b.n	80017f6 <CheckBtnHoldingTime+0x3a>
		btn->holdTime = BtnHold_Long;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2203      	movs	r2, #3
 80017f4:	721a      	strb	r2, [r3, #8]
}
 80017f6:	bf00      	nop
 80017f8:	3714      	adds	r7, #20
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
	...

08001804 <BtnThresHoldEvent>:

void BtnThresHoldEvent(Button* btn,GPIO_TypeDef* GPIO,uint16_t GPIO_PIN )
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	4613      	mov	r3, r2
 8001810:	80fb      	strh	r3, [r7, #6]
	if(btn->millisecond >= (SHORT_PRESS_TIME - 50) &&
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f240 2289 	movw	r2, #649	@ 0x289
 800181a:	4293      	cmp	r3, r2
 800181c:	dd10      	ble.n	8001840 <BtnThresHoldEvent+0x3c>
	   btn->millisecond <= (SHORT_PRESS_TIME + 50)	)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
	if(btn->millisecond >= (SHORT_PRESS_TIME - 50) &&
 8001822:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8001826:	4293      	cmp	r3, r2
 8001828:	dc0a      	bgt.n	8001840 <BtnThresHoldEvent+0x3c>
	{
		btn->btnThreshold = Short_Mid_Threshold;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2201      	movs	r2, #1
 800182e:	725a      	strb	r2, [r3, #9]
		Buz1.BuzTone = BUZ_TONE_MID_PSC;
 8001830:	4b11      	ldr	r3, [pc, #68]	@ (8001878 <BtnThresHoldEvent+0x74>)
 8001832:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001836:	80da      	strh	r2, [r3, #6]
		Buz1.BuzFlag = true;
 8001838:	4b0f      	ldr	r3, [pc, #60]	@ (8001878 <BtnThresHoldEvent+0x74>)
 800183a:	2201      	movs	r2, #1
 800183c:	711a      	strb	r2, [r3, #4]
	{
		btn->btnThreshold = Mid_Long_Threshold;
		Buz1.BuzTone = BUZ_TONE_HIGH_PSC;
		Buz1.BuzFlag = true;
	}
}
 800183e:	e015      	b.n	800186c <BtnThresHoldEvent+0x68>
	else if(btn->millisecond >= (LONG_PRESS_TIME - 50) &&
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f640 1291 	movw	r2, #2449	@ 0x991
 8001848:	4293      	cmp	r3, r2
 800184a:	dd0f      	ble.n	800186c <BtnThresHoldEvent+0x68>
			btn->millisecond <= (LONG_PRESS_TIME + 50))
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
	else if(btn->millisecond >= (LONG_PRESS_TIME - 50) &&
 8001850:	f640 12f6 	movw	r2, #2550	@ 0x9f6
 8001854:	4293      	cmp	r3, r2
 8001856:	dc09      	bgt.n	800186c <BtnThresHoldEvent+0x68>
		btn->btnThreshold = Mid_Long_Threshold;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2202      	movs	r2, #2
 800185c:	725a      	strb	r2, [r3, #9]
		Buz1.BuzTone = BUZ_TONE_HIGH_PSC;
 800185e:	4b06      	ldr	r3, [pc, #24]	@ (8001878 <BtnThresHoldEvent+0x74>)
 8001860:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 8001864:	80da      	strh	r2, [r3, #6]
		Buz1.BuzFlag = true;
 8001866:	4b04      	ldr	r3, [pc, #16]	@ (8001878 <BtnThresHoldEvent+0x74>)
 8001868:	2201      	movs	r2, #1
 800186a:	711a      	strb	r2, [r3, #4]
}
 800186c:	bf00      	nop
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	200000dc 	.word	0x200000dc

0800187c <WatchHandleButton1>:
///////////////////////////////////////////////////
// watch Btn
void WatchHandleButton1(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
	if (Btn1.state == Pressing)
 8001880:	4b20      	ldr	r3, [pc, #128]	@ (8001904 <WatchHandleButton1+0x88>)
 8001882:	799b      	ldrb	r3, [r3, #6]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d11d      	bne.n	80018c4 <WatchHandleButton1+0x48>
	{
		CheckBtnHoldingTime(&Btn1, GPIOE, GPIO_PIN_3);
 8001888:	2208      	movs	r2, #8
 800188a:	491f      	ldr	r1, [pc, #124]	@ (8001908 <WatchHandleButton1+0x8c>)
 800188c:	481d      	ldr	r0, [pc, #116]	@ (8001904 <WatchHandleButton1+0x88>)
 800188e:	f7ff ff95 	bl	80017bc <CheckBtnHoldingTime>
		BtnThresHoldEvent(&Btn1, GPIOE, GPIO_PIN_3);
 8001892:	2208      	movs	r2, #8
 8001894:	491c      	ldr	r1, [pc, #112]	@ (8001908 <WatchHandleButton1+0x8c>)
 8001896:	481b      	ldr	r0, [pc, #108]	@ (8001904 <WatchHandleButton1+0x88>)
 8001898:	f7ff ffb4 	bl	8001804 <BtnThresHoldEvent>

		if (Btn1.btnThreshold == Short_Mid_Threshold)
 800189c:	4b19      	ldr	r3, [pc, #100]	@ (8001904 <WatchHandleButton1+0x88>)
 800189e:	7a5b      	ldrb	r3, [r3, #9]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d12c      	bne.n	80018fe <WatchHandleButton1+0x82>
		{
			watchConfig.SubMode = !watchConfig.SubMode;
 80018a4:	4b19      	ldr	r3, [pc, #100]	@ (800190c <WatchHandleButton1+0x90>)
 80018a6:	7d5b      	ldrb	r3, [r3, #21]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	bf0c      	ite	eq
 80018ac:	2301      	moveq	r3, #1
 80018ae:	2300      	movne	r3, #0
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	461a      	mov	r2, r3
 80018b4:	4b15      	ldr	r3, [pc, #84]	@ (800190c <WatchHandleButton1+0x90>)
 80018b6:	755a      	strb	r2, [r3, #21]
			CLCD_Clear();
 80018b8:	f7ff fd65 	bl	8001386 <CLCD_Clear>
			Btn1.btnThreshold = Idle_Threshold;
 80018bc:	4b11      	ldr	r3, [pc, #68]	@ (8001904 <WatchHandleButton1+0x88>)
 80018be:	2200      	movs	r2, #0
 80018c0:	725a      	strb	r2, [r3, #9]
				mode = (mode + 1) % NUM_MODES;
			}
			Btn1.ReleasedTime = Idle_Released;
		}
	}
}
 80018c2:	e01c      	b.n	80018fe <WatchHandleButton1+0x82>
		if(Btn1.ReleasedTime == Short_Released)
 80018c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001904 <WatchHandleButton1+0x88>)
 80018c6:	79db      	ldrb	r3, [r3, #7]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d118      	bne.n	80018fe <WatchHandleButton1+0x82>
			if (watchConfig.SubMode == WATCH_NORMAL)
 80018cc:	4b0f      	ldr	r3, [pc, #60]	@ (800190c <WatchHandleButton1+0x90>)
 80018ce:	7d5b      	ldrb	r3, [r3, #21]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d111      	bne.n	80018f8 <WatchHandleButton1+0x7c>
				CLCD_Clear();
 80018d4:	f7ff fd57 	bl	8001386 <CLCD_Clear>
				mode = (mode + 1) % NUM_MODES;
 80018d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001910 <WatchHandleButton1+0x94>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	1c5a      	adds	r2, r3, #1
 80018e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001914 <WatchHandleButton1+0x98>)
 80018e2:	fb83 3102 	smull	r3, r1, r3, r2
 80018e6:	17d3      	asrs	r3, r2, #31
 80018e8:	1ac9      	subs	r1, r1, r3
 80018ea:	460b      	mov	r3, r1
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	440b      	add	r3, r1
 80018f0:	1ad1      	subs	r1, r2, r3
 80018f2:	b2ca      	uxtb	r2, r1
 80018f4:	4b06      	ldr	r3, [pc, #24]	@ (8001910 <WatchHandleButton1+0x94>)
 80018f6:	701a      	strb	r2, [r3, #0]
			Btn1.ReleasedTime = Idle_Released;
 80018f8:	4b02      	ldr	r3, [pc, #8]	@ (8001904 <WatchHandleButton1+0x88>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	71da      	strb	r2, [r3, #7]
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200000ac 	.word	0x200000ac
 8001908:	40021000 	.word	0x40021000
 800190c:	200001e4 	.word	0x200001e4
 8001910:	200000e4 	.word	0x200000e4
 8001914:	55555556 	.word	0x55555556

08001918 <WatchHandleButton2>:

void WatchHandleButton2(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
	if (Btn2.state == Pressing)
 800191c:	4b23      	ldr	r3, [pc, #140]	@ (80019ac <WatchHandleButton2+0x94>)
 800191e:	799b      	ldrb	r3, [r3, #6]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d127      	bne.n	8001974 <WatchHandleButton2+0x5c>
	{
		CheckBtnHoldingTime(&Btn2, GPIOC, GPIO_PIN_15);
 8001924:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001928:	4921      	ldr	r1, [pc, #132]	@ (80019b0 <WatchHandleButton2+0x98>)
 800192a:	4820      	ldr	r0, [pc, #128]	@ (80019ac <WatchHandleButton2+0x94>)
 800192c:	f7ff ff46 	bl	80017bc <CheckBtnHoldingTime>
		BtnThresHoldEvent(&Btn2, GPIOC, GPIO_PIN_15);
 8001930:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001934:	491e      	ldr	r1, [pc, #120]	@ (80019b0 <WatchHandleButton2+0x98>)
 8001936:	481d      	ldr	r0, [pc, #116]	@ (80019ac <WatchHandleButton2+0x94>)
 8001938:	f7ff ff64 	bl	8001804 <BtnThresHoldEvent>

		if (watchConfig.NextItem
 800193c:	4b1d      	ldr	r3, [pc, #116]	@ (80019b4 <WatchHandleButton2+0x9c>)
 800193e:	7d9b      	ldrb	r3, [r3, #22]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d031      	beq.n	80019a8 <WatchHandleButton2+0x90>
				&& watchConfig.SubMode == WATCH_CLOCK_SETTING)
 8001944:	4b1b      	ldr	r3, [pc, #108]	@ (80019b4 <WatchHandleButton2+0x9c>)
 8001946:	7d5b      	ldrb	r3, [r3, #21]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d12d      	bne.n	80019a8 <WatchHandleButton2+0x90>
		{
			watchConfig.NextItem = 0;
 800194c:	4b19      	ldr	r3, [pc, #100]	@ (80019b4 <WatchHandleButton2+0x9c>)
 800194e:	2200      	movs	r2, #0
 8001950:	759a      	strb	r2, [r3, #22]
			watchConfig.WatchTime = (watchConfig.WatchTime + 1) % NUM_ITEM;
 8001952:	4b18      	ldr	r3, [pc, #96]	@ (80019b4 <WatchHandleButton2+0x9c>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	1c5a      	adds	r2, r3, #1
 8001958:	4b17      	ldr	r3, [pc, #92]	@ (80019b8 <WatchHandleButton2+0xa0>)
 800195a:	fb83 3102 	smull	r3, r1, r3, r2
 800195e:	17d3      	asrs	r3, r2, #31
 8001960:	1ac9      	subs	r1, r1, r3
 8001962:	460b      	mov	r3, r1
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	440b      	add	r3, r1
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	1ad1      	subs	r1, r2, r3
 800196c:	b2ca      	uxtb	r2, r1
 800196e:	4b11      	ldr	r3, [pc, #68]	@ (80019b4 <WatchHandleButton2+0x9c>)
 8001970:	701a      	strb	r2, [r3, #0]
				BuzLock = !BuzLock;
			}
			Btn2.ReleasedTime = Idle_Released;
		}
	}
}
 8001972:	e019      	b.n	80019a8 <WatchHandleButton2+0x90>
		if(Btn2.ReleasedTime == Short_Released)
 8001974:	4b0d      	ldr	r3, [pc, #52]	@ (80019ac <WatchHandleButton2+0x94>)
 8001976:	79db      	ldrb	r3, [r3, #7]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d115      	bne.n	80019a8 <WatchHandleButton2+0x90>
			if (watchConfig.SubMode == WATCH_NORMAL)
 800197c:	4b0d      	ldr	r3, [pc, #52]	@ (80019b4 <WatchHandleButton2+0x9c>)
 800197e:	7d5b      	ldrb	r3, [r3, #21]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d10e      	bne.n	80019a2 <WatchHandleButton2+0x8a>
				BuzLock = !BuzLock;
 8001984:	4b0d      	ldr	r3, [pc, #52]	@ (80019bc <WatchHandleButton2+0xa4>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	bf14      	ite	ne
 800198c:	2301      	movne	r3, #1
 800198e:	2300      	moveq	r3, #0
 8001990:	b2db      	uxtb	r3, r3
 8001992:	f083 0301 	eor.w	r3, r3, #1
 8001996:	b2db      	uxtb	r3, r3
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	b2da      	uxtb	r2, r3
 800199e:	4b07      	ldr	r3, [pc, #28]	@ (80019bc <WatchHandleButton2+0xa4>)
 80019a0:	701a      	strb	r2, [r3, #0]
			Btn2.ReleasedTime = Idle_Released;
 80019a2:	4b02      	ldr	r3, [pc, #8]	@ (80019ac <WatchHandleButton2+0x94>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	71da      	strb	r2, [r3, #7]
}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	200000b8 	.word	0x200000b8
 80019b0:	40020800 	.word	0x40020800
 80019b4:	200001e4 	.word	0x200001e4
 80019b8:	2aaaaaab 	.word	0x2aaaaaab
 80019bc:	200000e6 	.word	0x200000e6

080019c0 <WatchHandleButton3>:

void WatchHandleButton3(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
	if (Btn3.state == Pressing)
 80019c4:	4b26      	ldr	r3, [pc, #152]	@ (8001a60 <WatchHandleButton3+0xa0>)
 80019c6:	799b      	ldrb	r3, [r3, #6]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d12d      	bne.n	8001a28 <WatchHandleButton3+0x68>
	{
		CheckBtnHoldingTime(&Btn3, GPIOD, GPIO_PIN_4);
 80019cc:	2210      	movs	r2, #16
 80019ce:	4925      	ldr	r1, [pc, #148]	@ (8001a64 <WatchHandleButton3+0xa4>)
 80019d0:	4823      	ldr	r0, [pc, #140]	@ (8001a60 <WatchHandleButton3+0xa0>)
 80019d2:	f7ff fef3 	bl	80017bc <CheckBtnHoldingTime>
		BtnThresHoldEvent(&Btn3, GPIOD, GPIO_PIN_4);
 80019d6:	2210      	movs	r2, #16
 80019d8:	4922      	ldr	r1, [pc, #136]	@ (8001a64 <WatchHandleButton3+0xa4>)
 80019da:	4821      	ldr	r0, [pc, #132]	@ (8001a60 <WatchHandleButton3+0xa0>)
 80019dc:	f7ff ff12 	bl	8001804 <BtnThresHoldEvent>

		if (watchConfig.flags.increaseFlagOnce)
 80019e0:	4b21      	ldr	r3, [pc, #132]	@ (8001a68 <WatchHandleButton3+0xa8>)
 80019e2:	7ddb      	ldrb	r3, [r3, #23]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d004      	beq.n	80019f2 <WatchHandleButton3+0x32>
		{
			watchConfig.flags.increaseFlagOnce = 0;
 80019e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a68 <WatchHandleButton3+0xa8>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	75da      	strb	r2, [r3, #23]
			IncreaseTimeOnce();
 80019ee:	f001 fa51 	bl	8002e94 <IncreaseTimeOnce>
		}

		switch (Btn3.holdTime)
 80019f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001a60 <WatchHandleButton3+0xa0>)
 80019f4:	7a1b      	ldrb	r3, [r3, #8]
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d002      	beq.n	8001a00 <WatchHandleButton3+0x40>
 80019fa:	2b03      	cmp	r3, #3
 80019fc:	d00a      	beq.n	8001a14 <WatchHandleButton3+0x54>
				watch.WatchMode = !watch.WatchMode;
			}
			Btn3.ReleasedTime = Idle_Released;
		}
	}
}
 80019fe:	e02c      	b.n	8001a5a <WatchHandleButton3+0x9a>
			if (watchConfig.flags.increaseFlag150ms)
 8001a00:	4b19      	ldr	r3, [pc, #100]	@ (8001a68 <WatchHandleButton3+0xa8>)
 8001a02:	7e5b      	ldrb	r3, [r3, #25]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d025      	beq.n	8001a54 <WatchHandleButton3+0x94>
				watchConfig.flags.increaseFlag150ms = 0;
 8001a08:	4b17      	ldr	r3, [pc, #92]	@ (8001a68 <WatchHandleButton3+0xa8>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	765a      	strb	r2, [r3, #25]
				IncreaseTimeOnce();
 8001a0e:	f001 fa41 	bl	8002e94 <IncreaseTimeOnce>
			break;
 8001a12:	e01f      	b.n	8001a54 <WatchHandleButton3+0x94>
			if (watchConfig.flags.increaseFlag20ms)
 8001a14:	4b14      	ldr	r3, [pc, #80]	@ (8001a68 <WatchHandleButton3+0xa8>)
 8001a16:	7edb      	ldrb	r3, [r3, #27]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d01d      	beq.n	8001a58 <WatchHandleButton3+0x98>
				watchConfig.flags.increaseFlag20ms = 0;
 8001a1c:	4b12      	ldr	r3, [pc, #72]	@ (8001a68 <WatchHandleButton3+0xa8>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	76da      	strb	r2, [r3, #27]
				IncreaseTimeOnce();
 8001a22:	f001 fa37 	bl	8002e94 <IncreaseTimeOnce>
			break;
 8001a26:	e017      	b.n	8001a58 <WatchHandleButton3+0x98>
		if(Btn3.ReleasedTime == Short_Released)
 8001a28:	4b0d      	ldr	r3, [pc, #52]	@ (8001a60 <WatchHandleButton3+0xa0>)
 8001a2a:	79db      	ldrb	r3, [r3, #7]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d114      	bne.n	8001a5a <WatchHandleButton3+0x9a>
			if (watchConfig.SubMode == WATCH_NORMAL)
 8001a30:	4b0d      	ldr	r3, [pc, #52]	@ (8001a68 <WatchHandleButton3+0xa8>)
 8001a32:	7d5b      	ldrb	r3, [r3, #21]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d109      	bne.n	8001a4c <WatchHandleButton3+0x8c>
				watch.WatchMode = !watch.WatchMode;
 8001a38:	4b0c      	ldr	r3, [pc, #48]	@ (8001a6c <WatchHandleButton3+0xac>)
 8001a3a:	7f5b      	ldrb	r3, [r3, #29]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	bf0c      	ite	eq
 8001a40:	2301      	moveq	r3, #1
 8001a42:	2300      	movne	r3, #0
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	461a      	mov	r2, r3
 8001a48:	4b08      	ldr	r3, [pc, #32]	@ (8001a6c <WatchHandleButton3+0xac>)
 8001a4a:	775a      	strb	r2, [r3, #29]
			Btn3.ReleasedTime = Idle_Released;
 8001a4c:	4b04      	ldr	r3, [pc, #16]	@ (8001a60 <WatchHandleButton3+0xa0>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	71da      	strb	r2, [r3, #7]
}
 8001a52:	e002      	b.n	8001a5a <WatchHandleButton3+0x9a>
			break;
 8001a54:	bf00      	nop
 8001a56:	e000      	b.n	8001a5a <WatchHandleButton3+0x9a>
			break;
 8001a58:	bf00      	nop
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	200000c4 	.word	0x200000c4
 8001a64:	40020c00 	.word	0x40020c00
 8001a68:	200001e4 	.word	0x200001e4
 8001a6c:	200001c4 	.word	0x200001c4

08001a70 <WatchHandleButton4>:

void WatchHandleButton4(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
	if (Btn4.state == Pressing)
 8001a74:	4b1c      	ldr	r3, [pc, #112]	@ (8001ae8 <WatchHandleButton4+0x78>)
 8001a76:	799b      	ldrb	r3, [r3, #6]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d132      	bne.n	8001ae2 <WatchHandleButton4+0x72>
	{
		CheckBtnHoldingTime(&Btn4, GPIOD, GPIO_PIN_10);
 8001a7c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a80:	491a      	ldr	r1, [pc, #104]	@ (8001aec <WatchHandleButton4+0x7c>)
 8001a82:	4819      	ldr	r0, [pc, #100]	@ (8001ae8 <WatchHandleButton4+0x78>)
 8001a84:	f7ff fe9a 	bl	80017bc <CheckBtnHoldingTime>
		BtnThresHoldEvent(&Btn4, GPIOD, GPIO_PIN_10);
 8001a88:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a8c:	4917      	ldr	r1, [pc, #92]	@ (8001aec <WatchHandleButton4+0x7c>)
 8001a8e:	4816      	ldr	r0, [pc, #88]	@ (8001ae8 <WatchHandleButton4+0x78>)
 8001a90:	f7ff feb8 	bl	8001804 <BtnThresHoldEvent>

		if (watchConfig.flags.decreaseFlagOnce)
 8001a94:	4b16      	ldr	r3, [pc, #88]	@ (8001af0 <WatchHandleButton4+0x80>)
 8001a96:	7e1b      	ldrb	r3, [r3, #24]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d004      	beq.n	8001aa6 <WatchHandleButton4+0x36>
		{
			watchConfig.flags.decreaseFlagOnce = 0;
 8001a9c:	4b14      	ldr	r3, [pc, #80]	@ (8001af0 <WatchHandleButton4+0x80>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	761a      	strb	r2, [r3, #24]
			DecreaseTimeOnce();
 8001aa2:	f001 fb03 	bl	80030ac <DecreaseTimeOnce>
		}
		switch (Btn4.holdTime)
 8001aa6:	4b10      	ldr	r3, [pc, #64]	@ (8001ae8 <WatchHandleButton4+0x78>)
 8001aa8:	7a1b      	ldrb	r3, [r3, #8]
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d002      	beq.n	8001ab4 <WatchHandleButton4+0x44>
 8001aae:	2b03      	cmp	r3, #3
 8001ab0:	d00a      	beq.n	8001ac8 <WatchHandleButton4+0x58>
				DecreaseTimeOnce();
			}
			break;
		}
	}
}
 8001ab2:	e016      	b.n	8001ae2 <WatchHandleButton4+0x72>
			if (watchConfig.flags.decreaseFlag150ms)
 8001ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8001af0 <WatchHandleButton4+0x80>)
 8001ab6:	7e9b      	ldrb	r3, [r3, #26]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d00f      	beq.n	8001adc <WatchHandleButton4+0x6c>
				watchConfig.flags.decreaseFlag150ms = 0;
 8001abc:	4b0c      	ldr	r3, [pc, #48]	@ (8001af0 <WatchHandleButton4+0x80>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	769a      	strb	r2, [r3, #26]
				DecreaseTimeOnce();
 8001ac2:	f001 faf3 	bl	80030ac <DecreaseTimeOnce>
			break;
 8001ac6:	e009      	b.n	8001adc <WatchHandleButton4+0x6c>
			if (watchConfig.flags.decreaseFlag20ms)
 8001ac8:	4b09      	ldr	r3, [pc, #36]	@ (8001af0 <WatchHandleButton4+0x80>)
 8001aca:	7f1b      	ldrb	r3, [r3, #28]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d007      	beq.n	8001ae0 <WatchHandleButton4+0x70>
				watchConfig.flags.decreaseFlag20ms = 0;
 8001ad0:	4b07      	ldr	r3, [pc, #28]	@ (8001af0 <WatchHandleButton4+0x80>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	771a      	strb	r2, [r3, #28]
				DecreaseTimeOnce();
 8001ad6:	f001 fae9 	bl	80030ac <DecreaseTimeOnce>
			break;
 8001ada:	e001      	b.n	8001ae0 <WatchHandleButton4+0x70>
			break;
 8001adc:	bf00      	nop
 8001ade:	e000      	b.n	8001ae2 <WatchHandleButton4+0x72>
			break;
 8001ae0:	bf00      	nop
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	200000d0 	.word	0x200000d0
 8001aec:	40020c00 	.word	0x40020c00
 8001af0:	200001e4 	.word	0x200001e4

08001af4 <InitializeBuzzer>:
#include "watch.h"
#include "tim.h"
 Buz Buz1;

 void InitializeBuzzer(void)
 {
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
     Buz1.BuzOnOff = false;
 8001af8:	4b0a      	ldr	r3, [pc, #40]	@ (8001b24 <InitializeBuzzer+0x30>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	701a      	strb	r2, [r3, #0]
     Buz1.BuzCount = 0;
 8001afe:	4b09      	ldr	r3, [pc, #36]	@ (8001b24 <InitializeBuzzer+0x30>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	805a      	strh	r2, [r3, #2]
     Buz1.BuzFlag = false;
 8001b04:	4b07      	ldr	r3, [pc, #28]	@ (8001b24 <InitializeBuzzer+0x30>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	711a      	strb	r2, [r3, #4]
     Buz1.BuzTone = BUZ_TONE_LOW_PSC;
 8001b0a:	4b06      	ldr	r3, [pc, #24]	@ (8001b24 <InitializeBuzzer+0x30>)
 8001b0c:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8001b10:	80da      	strh	r2, [r3, #6]
     BuzLock = false;
 8001b12:	4b05      	ldr	r3, [pc, #20]	@ (8001b28 <InitializeBuzzer+0x34>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
 }
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	200000dc 	.word	0x200000dc
 8001b28:	200000e6 	.word	0x200000e6

08001b2c <activateBuzzer30msOn>:

void activateBuzzer30msOn( Buz* buzzer, TIM_HandleTypeDef* htim, uint32_t channel,uint32_t psc)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
 8001b38:	603b      	str	r3, [r7, #0]
	if(buzzer->BuzOnOff == false)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	f083 0301 	eor.w	r3, r3, #1
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d00d      	beq.n	8001b66 <activateBuzzer30msOn+0x3a>
	{
		__HAL_TIM_SET_PRESCALER(htim, psc);
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_TIM_PWM_Start(htim, channel);
 8001b52:	6879      	ldr	r1, [r7, #4]
 8001b54:	68b8      	ldr	r0, [r7, #8]
 8001b56:	f002 fe1d 	bl	8004794 <HAL_TIM_PWM_Start>
		buzzer->BuzCount = 0;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	805a      	strh	r2, [r3, #2]
		buzzer->BuzOnOff = true;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2201      	movs	r2, #1
 8001b64:	701a      	strb	r2, [r3, #0]
	}

}
 8001b66:	bf00      	nop
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <activateBuzzer30msOff>:

void activateBuzzer30msOff( Buz* buzzer, TIM_HandleTypeDef* htim, uint32_t channel)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b084      	sub	sp, #16
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	60f8      	str	r0, [r7, #12]
 8001b76:	60b9      	str	r1, [r7, #8]
 8001b78:	607a      	str	r2, [r7, #4]
	if (buzzer->BuzOnOff)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d015      	beq.n	8001bb0 <activateBuzzer30msOff+0x42>
	{
		buzzer->BuzCount++;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	885b      	ldrh	r3, [r3, #2]
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	805a      	strh	r2, [r3, #2]

		if (buzzer->BuzCount >= 30)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	885b      	ldrh	r3, [r3, #2]
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	2b1d      	cmp	r3, #29
 8001b9a:	d909      	bls.n	8001bb0 <activateBuzzer30msOff+0x42>
		{
			HAL_TIM_PWM_Stop(htim, channel);
 8001b9c:	6879      	ldr	r1, [r7, #4]
 8001b9e:	68b8      	ldr	r0, [r7, #8]
 8001ba0:	f002 fec0 	bl	8004924 <HAL_TIM_PWM_Stop>
			buzzer->BuzOnOff = false;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	701a      	strb	r2, [r3, #0]
			buzzer->BuzCount = 0;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2200      	movs	r2, #0
 8001bae:	805a      	strh	r2, [r3, #2]
		}
	}
}
 8001bb0:	bf00      	nop
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <checkAndRingBuzzer>:

void checkAndRingBuzzer(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
    // 매일 0시 정각에 부저를 고음으로 울리기
    if (watch.Time.hours == 0 && watch.Time.minutes == 0 && watch.Time.second == 0  && watch.Time.millisecond < 100)
 8001bbc:	4b17      	ldr	r3, [pc, #92]	@ (8001c1c <checkAndRingBuzzer+0x64>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d113      	bne.n	8001bec <checkAndRingBuzzer+0x34>
 8001bc4:	4b15      	ldr	r3, [pc, #84]	@ (8001c1c <checkAndRingBuzzer+0x64>)
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d10f      	bne.n	8001bec <checkAndRingBuzzer+0x34>
 8001bcc:	4b13      	ldr	r3, [pc, #76]	@ (8001c1c <checkAndRingBuzzer+0x64>)
 8001bce:	695b      	ldr	r3, [r3, #20]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d10b      	bne.n	8001bec <checkAndRingBuzzer+0x34>
 8001bd4:	4b11      	ldr	r3, [pc, #68]	@ (8001c1c <checkAndRingBuzzer+0x64>)
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	2b63      	cmp	r3, #99	@ 0x63
 8001bda:	dc07      	bgt.n	8001bec <checkAndRingBuzzer+0x34>
    {
        Buz1.BuzTone = BUZ_TONE_HIGH_PSC;
 8001bdc:	4b10      	ldr	r3, [pc, #64]	@ (8001c20 <checkAndRingBuzzer+0x68>)
 8001bde:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 8001be2:	80da      	strh	r2, [r3, #6]
        Buz1.BuzFlag = true;
 8001be4:	4b0e      	ldr	r3, [pc, #56]	@ (8001c20 <checkAndRingBuzzer+0x68>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	711a      	strb	r2, [r3, #4]
    else if (watch.Time.minutes == 0 && watch.Time.second == 0 && watch.Time.millisecond < 100)
    {
        Buz1.BuzTone = BUZ_TONE_MID_PSC;
        Buz1.BuzFlag = true;
    }
}
 8001bea:	e012      	b.n	8001c12 <checkAndRingBuzzer+0x5a>
    else if (watch.Time.minutes == 0 && watch.Time.second == 0 && watch.Time.millisecond < 100)
 8001bec:	4b0b      	ldr	r3, [pc, #44]	@ (8001c1c <checkAndRingBuzzer+0x64>)
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d10e      	bne.n	8001c12 <checkAndRingBuzzer+0x5a>
 8001bf4:	4b09      	ldr	r3, [pc, #36]	@ (8001c1c <checkAndRingBuzzer+0x64>)
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d10a      	bne.n	8001c12 <checkAndRingBuzzer+0x5a>
 8001bfc:	4b07      	ldr	r3, [pc, #28]	@ (8001c1c <checkAndRingBuzzer+0x64>)
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	2b63      	cmp	r3, #99	@ 0x63
 8001c02:	dc06      	bgt.n	8001c12 <checkAndRingBuzzer+0x5a>
        Buz1.BuzTone = BUZ_TONE_MID_PSC;
 8001c04:	4b06      	ldr	r3, [pc, #24]	@ (8001c20 <checkAndRingBuzzer+0x68>)
 8001c06:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001c0a:	80da      	strh	r2, [r3, #6]
        Buz1.BuzFlag = true;
 8001c0c:	4b04      	ldr	r3, [pc, #16]	@ (8001c20 <checkAndRingBuzzer+0x68>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	711a      	strb	r2, [r3, #4]
}
 8001c12:	bf00      	nop
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	200001c4 	.word	0x200001c4
 8001c20:	200000dc 	.word	0x200000dc

08001c24 <handleBuzzerActivation>:
void handleBuzzerActivation(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
	if (Buz1.BuzFlag)
 8001c28:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca0 <handleBuzzerActivation+0x7c>)
 8001c2a:	791b      	ldrb	r3, [r3, #4]
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d034      	beq.n	8001c9c <handleBuzzerActivation+0x78>
	{
		Buz1.BuzFlag = false;
 8001c32:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca0 <handleBuzzerActivation+0x7c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	711a      	strb	r2, [r3, #4]

		if (!BuzLock) {
 8001c38:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca4 <handleBuzzerActivation+0x80>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	f083 0301 	eor.w	r3, r3, #1
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d02a      	beq.n	8001c9c <handleBuzzerActivation+0x78>
			switch (Buz1.BuzTone)
 8001c46:	4b16      	ldr	r3, [pc, #88]	@ (8001ca0 <handleBuzzerActivation+0x7c>)
 8001c48:	88db      	ldrh	r3, [r3, #6]
 8001c4a:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d00c      	beq.n	8001c6c <handleBuzzerActivation+0x48>
 8001c52:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8001c56:	4293      	cmp	r3, r2
 8001c58:	dc20      	bgt.n	8001c9c <handleBuzzerActivation+0x78>
 8001c5a:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d014      	beq.n	8001c8c <handleBuzzerActivation+0x68>
 8001c62:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d008      	beq.n	8001c7c <handleBuzzerActivation+0x58>
				break;
			}
		}

	}
}
 8001c6a:	e017      	b.n	8001c9c <handleBuzzerActivation+0x78>
				activateBuzzer30msOn(&Buz1, &htim2, TIM_CHANNEL_1,
 8001c6c:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8001c70:	2200      	movs	r2, #0
 8001c72:	490d      	ldr	r1, [pc, #52]	@ (8001ca8 <handleBuzzerActivation+0x84>)
 8001c74:	480a      	ldr	r0, [pc, #40]	@ (8001ca0 <handleBuzzerActivation+0x7c>)
 8001c76:	f7ff ff59 	bl	8001b2c <activateBuzzer30msOn>
				break;
 8001c7a:	e00f      	b.n	8001c9c <handleBuzzerActivation+0x78>
				activateBuzzer30msOn(&Buz1, &htim2, TIM_CHANNEL_1,
 8001c7c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001c80:	2200      	movs	r2, #0
 8001c82:	4909      	ldr	r1, [pc, #36]	@ (8001ca8 <handleBuzzerActivation+0x84>)
 8001c84:	4806      	ldr	r0, [pc, #24]	@ (8001ca0 <handleBuzzerActivation+0x7c>)
 8001c86:	f7ff ff51 	bl	8001b2c <activateBuzzer30msOn>
				break;
 8001c8a:	e007      	b.n	8001c9c <handleBuzzerActivation+0x78>
				activateBuzzer30msOn(&Buz1, &htim2, TIM_CHANNEL_1,
 8001c8c:	f641 534c 	movw	r3, #7500	@ 0x1d4c
 8001c90:	2200      	movs	r2, #0
 8001c92:	4905      	ldr	r1, [pc, #20]	@ (8001ca8 <handleBuzzerActivation+0x84>)
 8001c94:	4802      	ldr	r0, [pc, #8]	@ (8001ca0 <handleBuzzerActivation+0x7c>)
 8001c96:	f7ff ff49 	bl	8001b2c <activateBuzzer30msOn>
				break;
 8001c9a:	bf00      	nop
}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	200000dc 	.word	0x200000dc
 8001ca4:	200000e6 	.word	0x200000e6
 8001ca8:	200000ec 	.word	0x200000ec

08001cac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08c      	sub	sp, #48	@ 0x30
 8001cb0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb2:	f107 031c 	add.w	r3, r7, #28
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	605a      	str	r2, [r3, #4]
 8001cbc:	609a      	str	r2, [r3, #8]
 8001cbe:	60da      	str	r2, [r3, #12]
 8001cc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61bb      	str	r3, [r7, #24]
 8001cc6:	4b5d      	ldr	r3, [pc, #372]	@ (8001e3c <MX_GPIO_Init+0x190>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cca:	4a5c      	ldr	r2, [pc, #368]	@ (8001e3c <MX_GPIO_Init+0x190>)
 8001ccc:	f043 0310 	orr.w	r3, r3, #16
 8001cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd2:	4b5a      	ldr	r3, [pc, #360]	@ (8001e3c <MX_GPIO_Init+0x190>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd6:	f003 0310 	and.w	r3, r3, #16
 8001cda:	61bb      	str	r3, [r7, #24]
 8001cdc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
 8001ce2:	4b56      	ldr	r3, [pc, #344]	@ (8001e3c <MX_GPIO_Init+0x190>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce6:	4a55      	ldr	r2, [pc, #340]	@ (8001e3c <MX_GPIO_Init+0x190>)
 8001ce8:	f043 0304 	orr.w	r3, r3, #4
 8001cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cee:	4b53      	ldr	r3, [pc, #332]	@ (8001e3c <MX_GPIO_Init+0x190>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf2:	f003 0304 	and.w	r3, r3, #4
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	613b      	str	r3, [r7, #16]
 8001cfe:	4b4f      	ldr	r3, [pc, #316]	@ (8001e3c <MX_GPIO_Init+0x190>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d02:	4a4e      	ldr	r2, [pc, #312]	@ (8001e3c <MX_GPIO_Init+0x190>)
 8001d04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d0a:	4b4c      	ldr	r3, [pc, #304]	@ (8001e3c <MX_GPIO_Init+0x190>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	4b48      	ldr	r3, [pc, #288]	@ (8001e3c <MX_GPIO_Init+0x190>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1e:	4a47      	ldr	r2, [pc, #284]	@ (8001e3c <MX_GPIO_Init+0x190>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d26:	4b45      	ldr	r3, [pc, #276]	@ (8001e3c <MX_GPIO_Init+0x190>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	4b41      	ldr	r3, [pc, #260]	@ (8001e3c <MX_GPIO_Init+0x190>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3a:	4a40      	ldr	r2, [pc, #256]	@ (8001e3c <MX_GPIO_Init+0x190>)
 8001d3c:	f043 0302 	orr.w	r3, r3, #2
 8001d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d42:	4b3e      	ldr	r3, [pc, #248]	@ (8001e3c <MX_GPIO_Init+0x190>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	607b      	str	r3, [r7, #4]
 8001d52:	4b3a      	ldr	r3, [pc, #232]	@ (8001e3c <MX_GPIO_Init+0x190>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d56:	4a39      	ldr	r2, [pc, #228]	@ (8001e3c <MX_GPIO_Init+0x190>)
 8001d58:	f043 0308 	orr.w	r3, r3, #8
 8001d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d5e:	4b37      	ldr	r3, [pc, #220]	@ (8001e3c <MX_GPIO_Init+0x190>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	607b      	str	r3, [r7, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_5, GPIO_PIN_RESET);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2121      	movs	r1, #33	@ 0x21
 8001d6e:	4834      	ldr	r0, [pc, #208]	@ (8001e40 <MX_GPIO_Init+0x194>)
 8001d70:	f001 ff12 	bl	8003b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001d74:	2200      	movs	r2, #0
 8001d76:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 8001d7a:	4832      	ldr	r0, [pc, #200]	@ (8001e44 <MX_GPIO_Init+0x198>)
 8001d7c:	f001 ff0c 	bl	8003b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001d80:	2200      	movs	r2, #0
 8001d82:	2140      	movs	r1, #64	@ 0x40
 8001d84:	4830      	ldr	r0, [pc, #192]	@ (8001e48 <MX_GPIO_Init+0x19c>)
 8001d86:	f001 ff07 	bl	8003b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d8a:	2308      	movs	r3, #8
 8001d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001d8e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001d92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d98:	f107 031c 	add.w	r3, r7, #28
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	482b      	ldr	r0, [pc, #172]	@ (8001e4c <MX_GPIO_Init+0x1a0>)
 8001da0:	f001 fd46 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001da4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001da8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001daa:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001dae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001db4:	f107 031c 	add.w	r3, r7, #28
 8001db8:	4619      	mov	r1, r3
 8001dba:	4823      	ldr	r0, [pc, #140]	@ (8001e48 <MX_GPIO_Init+0x19c>)
 8001dbc:	f001 fd38 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 8001dc0:	2321      	movs	r3, #33	@ 0x21
 8001dc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd0:	f107 031c 	add.w	r3, r7, #28
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	481a      	ldr	r0, [pc, #104]	@ (8001e40 <MX_GPIO_Init+0x194>)
 8001dd8:	f001 fd2a 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 8001ddc:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8001de0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001de2:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001de6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dec:	f107 031c 	add.w	r3, r7, #28
 8001df0:	4619      	mov	r1, r3
 8001df2:	4814      	ldr	r0, [pc, #80]	@ (8001e44 <MX_GPIO_Init+0x198>)
 8001df4:	f001 fd1c 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001df8:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8001dfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e06:	2300      	movs	r3, #0
 8001e08:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e0a:	f107 031c 	add.w	r3, r7, #28
 8001e0e:	4619      	mov	r1, r3
 8001e10:	480c      	ldr	r0, [pc, #48]	@ (8001e44 <MX_GPIO_Init+0x198>)
 8001e12:	f001 fd0d 	bl	8003830 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e16:	2340      	movs	r3, #64	@ 0x40
 8001e18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e22:	2300      	movs	r3, #0
 8001e24:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e26:	f107 031c 	add.w	r3, r7, #28
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4806      	ldr	r0, [pc, #24]	@ (8001e48 <MX_GPIO_Init+0x19c>)
 8001e2e:	f001 fcff 	bl	8003830 <HAL_GPIO_Init>

}
 8001e32:	bf00      	nop
 8001e34:	3730      	adds	r7, #48	@ 0x30
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40020400 	.word	0x40020400
 8001e44:	40020c00 	.word	0x40020c00
 8001e48:	40020800 	.word	0x40020800
 8001e4c:	40021000 	.word	0x40021000

08001e50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e54:	f001 fab2 	bl	80033bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e58:	f000 f930 	bl	80020bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e5c:	f7ff ff26 	bl	8001cac <MX_GPIO_Init>
  MX_TIM2_Init();
 8001e60:	f000 fbe4 	bl	800262c <MX_TIM2_Init>
  MX_TIM6_Init();
 8001e64:	f000 fc58 	bl	8002718 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 8001e68:	f000 fcfa 	bl	8002860 <MX_USART3_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001e6c:	f000 f990 	bl	8002190 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	_7SEG_GPIO_Init();
 8001e70:	f7fe fb76 	bl	8000560 <_7SEG_GPIO_Init>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8001e74:	2201      	movs	r2, #1
 8001e76:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e7a:	4884      	ldr	r0, [pc, #528]	@ (800208c <main+0x23c>)
 8001e7c:	f001 fe8c 	bl	8003b98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001e80:	2201      	movs	r2, #1
 8001e82:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e86:	4881      	ldr	r0, [pc, #516]	@ (800208c <main+0x23c>)
 8001e88:	f001 fe86 	bl	8003b98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001e92:	487e      	ldr	r0, [pc, #504]	@ (800208c <main+0x23c>)
 8001e94:	f001 fe80 	bl	8003b98 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001e98:	2201      	movs	r2, #1
 8001e9a:	2140      	movs	r1, #64	@ 0x40
 8001e9c:	487c      	ldr	r0, [pc, #496]	@ (8002090 <main+0x240>)
 8001e9e:	f001 fe7b 	bl	8003b98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	2120      	movs	r1, #32
 8001ea6:	487b      	ldr	r0, [pc, #492]	@ (8002094 <main+0x244>)
 8001ea8:	f001 fe76 	bl	8003b98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001eac:	2201      	movs	r2, #1
 8001eae:	2101      	movs	r1, #1
 8001eb0:	4878      	ldr	r0, [pc, #480]	@ (8002094 <main+0x244>)
 8001eb2:	f001 fe71 	bl	8003b98 <HAL_GPIO_WritePin>

	HAL_TIM_Base_Start_IT(&htim6);
 8001eb6:	4878      	ldr	r0, [pc, #480]	@ (8002098 <main+0x248>)
 8001eb8:	f002 fba2 	bl	8004600 <HAL_TIM_Base_Start_IT>
	_7SEG_SetNumber(DGT2, 0, OFF);
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	2001      	movs	r0, #1
 8001ec2:	f7fe fc33 	bl	800072c <_7SEG_SetNumber>

	CLCD_GPIO_Init();
 8001ec6:	f7ff f813 	bl	8000ef0 <CLCD_GPIO_Init>
	CLCD_Init();
 8001eca:	f7ff fa3a 	bl	8001342 <CLCD_Init>
	CLCD_Clear();
 8001ece:	f7ff fa5a 	bl	8001386 <CLCD_Clear>

	mode = WATCH;
 8001ed2:	4b72      	ldr	r3, [pc, #456]	@ (800209c <main+0x24c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	701a      	strb	r2, [r3, #0]

	InitializeBuzzer();
 8001ed8:	f7ff fe0c 	bl	8001af4 <InitializeBuzzer>
	InitializeButtons();
 8001edc:	f7ff fba8 	bl	8001630 <InitializeButtons>
	InitializeWatch();
 8001ee0:	f000 fd30 	bl	8002944 <InitializeWatch>
	alarm.alarmTime[alarm.alarmIndex].hour = 12;
 8001ee4:	4b6e      	ldr	r3, [pc, #440]	@ (80020a0 <main+0x250>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4a6d      	ldr	r2, [pc, #436]	@ (80020a0 <main+0x250>)
 8001eec:	460b      	mov	r3, r1
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	440b      	add	r3, r1
 8001ef2:	4413      	add	r3, r2
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	220c      	movs	r2, #12
 8001ef8:	701a      	strb	r2, [r3, #0]
	alarm.alarmTime[alarm.alarmIndex].minute = 1;
 8001efa:	4b69      	ldr	r3, [pc, #420]	@ (80020a0 <main+0x250>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	4619      	mov	r1, r3
 8001f00:	4a67      	ldr	r2, [pc, #412]	@ (80020a0 <main+0x250>)
 8001f02:	460b      	mov	r3, r1
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	440b      	add	r3, r1
 8001f08:	4413      	add	r3, r2
 8001f0a:	3305      	adds	r3, #5
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	701a      	strb	r2, [r3, #0]
	alarm.alarmTime[alarm.alarmIndex].isEnabled = 1;
 8001f10:	4b63      	ldr	r3, [pc, #396]	@ (80020a0 <main+0x250>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	4619      	mov	r1, r3
 8001f16:	4a62      	ldr	r2, [pc, #392]	@ (80020a0 <main+0x250>)
 8001f18:	460b      	mov	r3, r1
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	440b      	add	r3, r1
 8001f1e:	4413      	add	r3, r2
 8001f20:	3306      	adds	r3, #6
 8001f22:	2201      	movs	r2, #1
 8001f24:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch(mode)
 8001f26:	4b5d      	ldr	r3, [pc, #372]	@ (800209c <main+0x24c>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	f000 8089 	beq.w	8002044 <main+0x1f4>
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	f300 80a7 	bgt.w	8002086 <main+0x236>
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d002      	beq.n	8001f42 <main+0xf2>
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d016      	beq.n	8001f6e <main+0x11e>
 8001f40:	e0a1      	b.n	8002086 <main+0x236>
	  {
	  	  case WATCH:
	  		  switch(watchConfig.SubMode)
 8001f42:	4b58      	ldr	r3, [pc, #352]	@ (80020a4 <main+0x254>)
 8001f44:	7d5b      	ldrb	r3, [r3, #21]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d002      	beq.n	8001f50 <main+0x100>
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d003      	beq.n	8001f56 <main+0x106>
 8001f4e:	e005      	b.n	8001f5c <main+0x10c>
	  		  {
	  		  	  case WATCH_NORMAL:
	  		  		  updateWatchDisplay();
 8001f50:	f000 fdf0 	bl	8002b34 <updateWatchDisplay>
	  		  		  break;
 8001f54:	e002      	b.n	8001f5c <main+0x10c>
	  		  	  case WATCH_CLOCK_SETTING:
	  		  		  ClockSettingMode();
 8001f56:	f000 feb1 	bl	8002cbc <ClockSettingMode>
	  		  		  break;
 8001f5a:	bf00      	nop
	  		  }
	  		  //btn event
	  		  WatchHandleButton1();
 8001f5c:	f7ff fc8e 	bl	800187c <WatchHandleButton1>
	  		  WatchHandleButton2();
 8001f60:	f7ff fcda 	bl	8001918 <WatchHandleButton2>
	  		  WatchHandleButton3();
 8001f64:	f7ff fd2c 	bl	80019c0 <WatchHandleButton3>
	  		  WatchHandleButton4();
 8001f68:	f7ff fd82 	bl	8001a70 <WatchHandleButton4>
	  	  break;
 8001f6c:	e08b      	b.n	8002086 <main+0x236>

		case ALARM:
			if (alarm.alertFlag)
 8001f6e:	4b4c      	ldr	r3, [pc, #304]	@ (80020a0 <main+0x250>)
 8001f70:	785b      	ldrb	r3, [r3, #1]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d002      	beq.n	8001f7c <main+0x12c>
			{
				alert();
 8001f76:	f7ff faaf 	bl	80014d8 <alert>
								!alarm.alarmTime[alarm.alarmIndex].isEnabled;
						Btn3.ReleasedTime = Idle_Released;
					}
				}
			}
			break;
 8001f7a:	e081      	b.n	8002080 <main+0x230>
				displayAlarmSettings();
 8001f7c:	f7ff fa0e 	bl	800139c <displayAlarmSettings>
				if (Btn1.state == Pressing)
 8001f80:	4b49      	ldr	r3, [pc, #292]	@ (80020a8 <main+0x258>)
 8001f82:	799b      	ldrb	r3, [r3, #6]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d01b      	beq.n	8001fc0 <main+0x170>
					if (Btn1.ReleasedTime == Short_Released)
 8001f88:	4b47      	ldr	r3, [pc, #284]	@ (80020a8 <main+0x258>)
 8001f8a:	79db      	ldrb	r3, [r3, #7]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d117      	bne.n	8001fc0 <main+0x170>
						CLCD_Clear();
 8001f90:	f7ff f9f9 	bl	8001386 <CLCD_Clear>
						mode = (mode + 1) % NUM_MODES;
 8001f94:	4b41      	ldr	r3, [pc, #260]	@ (800209c <main+0x24c>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	1c5a      	adds	r2, r3, #1
 8001f9c:	4b43      	ldr	r3, [pc, #268]	@ (80020ac <main+0x25c>)
 8001f9e:	fb83 3102 	smull	r3, r1, r3, r2
 8001fa2:	17d3      	asrs	r3, r2, #31
 8001fa4:	1ac9      	subs	r1, r1, r3
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	440b      	add	r3, r1
 8001fac:	1ad1      	subs	r1, r2, r3
 8001fae:	b2ca      	uxtb	r2, r1
 8001fb0:	4b3a      	ldr	r3, [pc, #232]	@ (800209c <main+0x24c>)
 8001fb2:	701a      	strb	r2, [r3, #0]
						alarm.alarmIndex = 0;
 8001fb4:	4b3a      	ldr	r3, [pc, #232]	@ (80020a0 <main+0x250>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	701a      	strb	r2, [r3, #0]
						Btn1.ReleasedTime = Idle_Released;
 8001fba:	4b3b      	ldr	r3, [pc, #236]	@ (80020a8 <main+0x258>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	71da      	strb	r2, [r3, #7]
				if (Btn2.state == Pressing)
 8001fc0:	4b3b      	ldr	r3, [pc, #236]	@ (80020b0 <main+0x260>)
 8001fc2:	799b      	ldrb	r3, [r3, #6]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d016      	beq.n	8001ff6 <main+0x1a6>
					if (Btn2.ReleasedTime == Short_Released)
 8001fc8:	4b39      	ldr	r3, [pc, #228]	@ (80020b0 <main+0x260>)
 8001fca:	79db      	ldrb	r3, [r3, #7]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d112      	bne.n	8001ff6 <main+0x1a6>
						alarm.alarmIndex = (alarm.alarmIndex + 1) % MAX_ALARMS;
 8001fd0:	4b33      	ldr	r3, [pc, #204]	@ (80020a0 <main+0x250>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	1c5a      	adds	r2, r3, #1
 8001fd6:	4b37      	ldr	r3, [pc, #220]	@ (80020b4 <main+0x264>)
 8001fd8:	fb83 1302 	smull	r1, r3, r3, r2
 8001fdc:	1059      	asrs	r1, r3, #1
 8001fde:	17d3      	asrs	r3, r2, #31
 8001fe0:	1ac9      	subs	r1, r1, r3
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	440b      	add	r3, r1
 8001fe8:	1ad1      	subs	r1, r2, r3
 8001fea:	b2ca      	uxtb	r2, r1
 8001fec:	4b2c      	ldr	r3, [pc, #176]	@ (80020a0 <main+0x250>)
 8001fee:	701a      	strb	r2, [r3, #0]
						Btn2.ReleasedTime = Idle_Released;
 8001ff0:	4b2f      	ldr	r3, [pc, #188]	@ (80020b0 <main+0x260>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	71da      	strb	r2, [r3, #7]
				if (Btn3.state == Pressing)
 8001ff6:	4b30      	ldr	r3, [pc, #192]	@ (80020b8 <main+0x268>)
 8001ff8:	799b      	ldrb	r3, [r3, #6]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d040      	beq.n	8002080 <main+0x230>
					if (Btn3.ReleasedTime == Short_Released)
 8001ffe:	4b2e      	ldr	r3, [pc, #184]	@ (80020b8 <main+0x268>)
 8002000:	79db      	ldrb	r3, [r3, #7]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d13c      	bne.n	8002080 <main+0x230>
								!alarm.alarmTime[alarm.alarmIndex].isEnabled;
 8002006:	4b26      	ldr	r3, [pc, #152]	@ (80020a0 <main+0x250>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	4619      	mov	r1, r3
 800200c:	4a24      	ldr	r2, [pc, #144]	@ (80020a0 <main+0x250>)
 800200e:	460b      	mov	r3, r1
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	440b      	add	r3, r1
 8002014:	4413      	add	r3, r2
 8002016:	3306      	adds	r3, #6
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	bf0c      	ite	eq
 800201e:	2301      	moveq	r3, #1
 8002020:	2300      	movne	r3, #0
 8002022:	b2da      	uxtb	r2, r3
						alarm.alarmTime[alarm.alarmIndex].isEnabled =
 8002024:	4b1e      	ldr	r3, [pc, #120]	@ (80020a0 <main+0x250>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	4619      	mov	r1, r3
								!alarm.alarmTime[alarm.alarmIndex].isEnabled;
 800202a:	4610      	mov	r0, r2
						alarm.alarmTime[alarm.alarmIndex].isEnabled =
 800202c:	4a1c      	ldr	r2, [pc, #112]	@ (80020a0 <main+0x250>)
 800202e:	460b      	mov	r3, r1
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	440b      	add	r3, r1
 8002034:	4413      	add	r3, r2
 8002036:	3306      	adds	r3, #6
 8002038:	4602      	mov	r2, r0
 800203a:	701a      	strb	r2, [r3, #0]
						Btn3.ReleasedTime = Idle_Released;
 800203c:	4b1e      	ldr	r3, [pc, #120]	@ (80020b8 <main+0x268>)
 800203e:	2200      	movs	r2, #0
 8002040:	71da      	strb	r2, [r3, #7]
			break;
 8002042:	e01d      	b.n	8002080 <main+0x230>
		  case STOPWATCH:
			if (Btn1.state == Pressing)
 8002044:	4b18      	ldr	r3, [pc, #96]	@ (80020a8 <main+0x258>)
 8002046:	799b      	ldrb	r3, [r3, #6]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d01b      	beq.n	8002084 <main+0x234>
			{

			}
			else // released
			{
				if (Btn1.ReleasedTime == Short_Released)
 800204c:	4b16      	ldr	r3, [pc, #88]	@ (80020a8 <main+0x258>)
 800204e:	79db      	ldrb	r3, [r3, #7]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d117      	bne.n	8002084 <main+0x234>
				{
					CLCD_Clear();
 8002054:	f7ff f997 	bl	8001386 <CLCD_Clear>
					mode = (mode + 1) % NUM_MODES;
 8002058:	4b10      	ldr	r3, [pc, #64]	@ (800209c <main+0x24c>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	b2db      	uxtb	r3, r3
 800205e:	1c5a      	adds	r2, r3, #1
 8002060:	4b12      	ldr	r3, [pc, #72]	@ (80020ac <main+0x25c>)
 8002062:	fb83 3102 	smull	r3, r1, r3, r2
 8002066:	17d3      	asrs	r3, r2, #31
 8002068:	1ac9      	subs	r1, r1, r3
 800206a:	460b      	mov	r3, r1
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	440b      	add	r3, r1
 8002070:	1ad1      	subs	r1, r2, r3
 8002072:	b2ca      	uxtb	r2, r1
 8002074:	4b09      	ldr	r3, [pc, #36]	@ (800209c <main+0x24c>)
 8002076:	701a      	strb	r2, [r3, #0]
					Btn1.ReleasedTime = Idle_Released;
 8002078:	4b0b      	ldr	r3, [pc, #44]	@ (80020a8 <main+0x258>)
 800207a:	2200      	movs	r2, #0
 800207c:	71da      	strb	r2, [r3, #7]
				}
			}

			  break;
 800207e:	e001      	b.n	8002084 <main+0x234>
			break;
 8002080:	bf00      	nop
 8002082:	e000      	b.n	8002086 <main+0x236>
			  break;
 8002084:	bf00      	nop
	  }

	  // buzzer
	  handleBuzzerActivation();
 8002086:	f7ff fdcd 	bl	8001c24 <handleBuzzerActivation>
	  switch(mode)
 800208a:	e74c      	b.n	8001f26 <main+0xd6>
 800208c:	40020c00 	.word	0x40020c00
 8002090:	40020800 	.word	0x40020800
 8002094:	40020400 	.word	0x40020400
 8002098:	20000134 	.word	0x20000134
 800209c:	200000e4 	.word	0x200000e4
 80020a0:	20000098 	.word	0x20000098
 80020a4:	200001e4 	.word	0x200001e4
 80020a8:	200000ac 	.word	0x200000ac
 80020ac:	55555556 	.word	0x55555556
 80020b0:	200000b8 	.word	0x200000b8
 80020b4:	66666667 	.word	0x66666667
 80020b8:	200000c4 	.word	0x200000c4

080020bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b094      	sub	sp, #80	@ 0x50
 80020c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020c2:	f107 0320 	add.w	r3, r7, #32
 80020c6:	2230      	movs	r2, #48	@ 0x30
 80020c8:	2100      	movs	r1, #0
 80020ca:	4618      	mov	r0, r3
 80020cc:	f004 fa26 	bl	800651c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020d0:	f107 030c 	add.w	r3, r7, #12
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020e0:	2300      	movs	r3, #0
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	4b28      	ldr	r3, [pc, #160]	@ (8002188 <SystemClock_Config+0xcc>)
 80020e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e8:	4a27      	ldr	r2, [pc, #156]	@ (8002188 <SystemClock_Config+0xcc>)
 80020ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80020f0:	4b25      	ldr	r3, [pc, #148]	@ (8002188 <SystemClock_Config+0xcc>)
 80020f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f8:	60bb      	str	r3, [r7, #8]
 80020fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020fc:	2300      	movs	r3, #0
 80020fe:	607b      	str	r3, [r7, #4]
 8002100:	4b22      	ldr	r3, [pc, #136]	@ (800218c <SystemClock_Config+0xd0>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a21      	ldr	r2, [pc, #132]	@ (800218c <SystemClock_Config+0xd0>)
 8002106:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800210a:	6013      	str	r3, [r2, #0]
 800210c:	4b1f      	ldr	r3, [pc, #124]	@ (800218c <SystemClock_Config+0xd0>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002114:	607b      	str	r3, [r7, #4]
 8002116:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002118:	2301      	movs	r3, #1
 800211a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800211c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002120:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002122:	2302      	movs	r3, #2
 8002124:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002126:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800212a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800212c:	2304      	movs	r3, #4
 800212e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002130:	23a8      	movs	r3, #168	@ 0xa8
 8002132:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002134:	2302      	movs	r3, #2
 8002136:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002138:	2304      	movs	r3, #4
 800213a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800213c:	f107 0320 	add.w	r3, r7, #32
 8002140:	4618      	mov	r0, r3
 8002142:	f001 fd75 	bl	8003c30 <HAL_RCC_OscConfig>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800214c:	f000 f99a 	bl	8002484 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002150:	230f      	movs	r3, #15
 8002152:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002154:	2302      	movs	r3, #2
 8002156:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800215c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002160:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002162:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002166:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002168:	f107 030c 	add.w	r3, r7, #12
 800216c:	2105      	movs	r1, #5
 800216e:	4618      	mov	r0, r3
 8002170:	f001 ffd6 	bl	8004120 <HAL_RCC_ClockConfig>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800217a:	f000 f983 	bl	8002484 <Error_Handler>
  }
}
 800217e:	bf00      	nop
 8002180:	3750      	adds	r7, #80	@ 0x50
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40023800 	.word	0x40023800
 800218c:	40007000 	.word	0x40007000

08002190 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002194:	2200      	movs	r2, #0
 8002196:	2100      	movs	r1, #0
 8002198:	2036      	movs	r0, #54	@ 0x36
 800219a:	f001 fa80 	bl	800369e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800219e:	2036      	movs	r0, #54	@ 0x36
 80021a0:	f001 fa99 	bl	80036d6 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80021a4:	2200      	movs	r2, #0
 80021a6:	2100      	movs	r1, #0
 80021a8:	2028      	movs	r0, #40	@ 0x28
 80021aa:	f001 fa78 	bl	800369e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80021ae:	2028      	movs	r0, #40	@ 0x28
 80021b0:	f001 fa91 	bl	80036d6 <HAL_NVIC_EnableIRQ>
  /* EXTI3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80021b4:	2200      	movs	r2, #0
 80021b6:	2100      	movs	r1, #0
 80021b8:	2009      	movs	r0, #9
 80021ba:	f001 fa70 	bl	800369e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80021be:	2009      	movs	r0, #9
 80021c0:	f001 fa89 	bl	80036d6 <HAL_NVIC_EnableIRQ>
  /* EXTI4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80021c4:	2200      	movs	r2, #0
 80021c6:	2100      	movs	r1, #0
 80021c8:	200a      	movs	r0, #10
 80021ca:	f001 fa68 	bl	800369e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80021ce:	200a      	movs	r0, #10
 80021d0:	f001 fa81 	bl	80036d6 <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80021d4:	2200      	movs	r2, #0
 80021d6:	2100      	movs	r1, #0
 80021d8:	2027      	movs	r0, #39	@ 0x27
 80021da:	f001 fa60 	bl	800369e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 80021de:	2027      	movs	r0, #39	@ 0x27
 80021e0:	f001 fa79 	bl	80036d6 <HAL_NVIC_EnableIRQ>
}
 80021e4:	bf00      	nop
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	80fb      	strh	r3, [r7, #6]
	//btn1
	if (GPIO_Pin == GPIO_PIN_3)
 80021f2:	88fb      	ldrh	r3, [r7, #6]
 80021f4:	2b08      	cmp	r3, #8
 80021f6:	d116      	bne.n	8002226 <HAL_GPIO_EXTI_Callback+0x3e>
	{
		if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3) == GPIO_PIN_SET && Btn1.state == Idle)
 80021f8:	2108      	movs	r1, #8
 80021fa:	4849      	ldr	r0, [pc, #292]	@ (8002320 <HAL_GPIO_EXTI_Callback+0x138>)
 80021fc:	f001 fcb4 	bl	8003b68 <HAL_GPIO_ReadPin>
 8002200:	4603      	mov	r3, r0
 8002202:	2b01      	cmp	r3, #1
 8002204:	d10a      	bne.n	800221c <HAL_GPIO_EXTI_Callback+0x34>
 8002206:	4b47      	ldr	r3, [pc, #284]	@ (8002324 <HAL_GPIO_EXTI_Callback+0x13c>)
 8002208:	799b      	ldrb	r3, [r3, #6]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d106      	bne.n	800221c <HAL_GPIO_EXTI_Callback+0x34>
		{
			Buz1.BuzTone = BUZ_TONE_LOW_PSC;
 800220e:	4b46      	ldr	r3, [pc, #280]	@ (8002328 <HAL_GPIO_EXTI_Callback+0x140>)
 8002210:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8002214:	80da      	strh	r2, [r3, #6]
			Buz1.BuzFlag = true;
 8002216:	4b44      	ldr	r3, [pc, #272]	@ (8002328 <HAL_GPIO_EXTI_Callback+0x140>)
 8002218:	2201      	movs	r2, #1
 800221a:	711a      	strb	r2, [r3, #4]
		}
		HandleButtonPress(&Btn1, GPIOE, GPIO_PIN_3);
 800221c:	2208      	movs	r2, #8
 800221e:	4940      	ldr	r1, [pc, #256]	@ (8002320 <HAL_GPIO_EXTI_Callback+0x138>)
 8002220:	4840      	ldr	r0, [pc, #256]	@ (8002324 <HAL_GPIO_EXTI_Callback+0x13c>)
 8002222:	f7ff fa45 	bl	80016b0 <HandleButtonPress>

	}

	//btn2
	if (GPIO_Pin == GPIO_PIN_15)
 8002226:	88fb      	ldrh	r3, [r7, #6]
 8002228:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800222c:	d124      	bne.n	8002278 <HAL_GPIO_EXTI_Callback+0x90>
	{
		if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == GPIO_PIN_SET && Btn2.state == Idle)
 800222e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002232:	483e      	ldr	r0, [pc, #248]	@ (800232c <HAL_GPIO_EXTI_Callback+0x144>)
 8002234:	f001 fc98 	bl	8003b68 <HAL_GPIO_ReadPin>
 8002238:	4603      	mov	r3, r0
 800223a:	2b01      	cmp	r3, #1
 800223c:	d116      	bne.n	800226c <HAL_GPIO_EXTI_Callback+0x84>
 800223e:	4b3c      	ldr	r3, [pc, #240]	@ (8002330 <HAL_GPIO_EXTI_Callback+0x148>)
 8002240:	799b      	ldrb	r3, [r3, #6]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d112      	bne.n	800226c <HAL_GPIO_EXTI_Callback+0x84>
		{
			Buz1.BuzTone = BUZ_TONE_LOW_PSC;
 8002246:	4b38      	ldr	r3, [pc, #224]	@ (8002328 <HAL_GPIO_EXTI_Callback+0x140>)
 8002248:	f643 2298 	movw	r2, #15000	@ 0x3a98
 800224c:	80da      	strh	r2, [r3, #6]
			Buz1.BuzFlag = true;
 800224e:	4b36      	ldr	r3, [pc, #216]	@ (8002328 <HAL_GPIO_EXTI_Callback+0x140>)
 8002250:	2201      	movs	r2, #1
 8002252:	711a      	strb	r2, [r3, #4]

			if (mode == WATCH && watchConfig.SubMode == WATCH_CLOCK_SETTING)
 8002254:	4b37      	ldr	r3, [pc, #220]	@ (8002334 <HAL_GPIO_EXTI_Callback+0x14c>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d106      	bne.n	800226c <HAL_GPIO_EXTI_Callback+0x84>
 800225e:	4b36      	ldr	r3, [pc, #216]	@ (8002338 <HAL_GPIO_EXTI_Callback+0x150>)
 8002260:	7d5b      	ldrb	r3, [r3, #21]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d102      	bne.n	800226c <HAL_GPIO_EXTI_Callback+0x84>
			{
				watchConfig.NextItem = 1;  // clock setting flag on
 8002266:	4b34      	ldr	r3, [pc, #208]	@ (8002338 <HAL_GPIO_EXTI_Callback+0x150>)
 8002268:	2201      	movs	r2, #1
 800226a:	759a      	strb	r2, [r3, #22]
			}
		}
		HandleButtonPress(&Btn2, GPIOC, GPIO_PIN_15);
 800226c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002270:	492e      	ldr	r1, [pc, #184]	@ (800232c <HAL_GPIO_EXTI_Callback+0x144>)
 8002272:	482f      	ldr	r0, [pc, #188]	@ (8002330 <HAL_GPIO_EXTI_Callback+0x148>)
 8002274:	f7ff fa1c 	bl	80016b0 <HandleButtonPress>

	}

	//btn3
	if (GPIO_Pin == GPIO_PIN_4)
 8002278:	88fb      	ldrh	r3, [r7, #6]
 800227a:	2b10      	cmp	r3, #16
 800227c:	d122      	bne.n	80022c4 <HAL_GPIO_EXTI_Callback+0xdc>
	{
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4) == GPIO_PIN_SET && Btn3.state == Idle)
 800227e:	2110      	movs	r1, #16
 8002280:	482e      	ldr	r0, [pc, #184]	@ (800233c <HAL_GPIO_EXTI_Callback+0x154>)
 8002282:	f001 fc71 	bl	8003b68 <HAL_GPIO_ReadPin>
 8002286:	4603      	mov	r3, r0
 8002288:	2b01      	cmp	r3, #1
 800228a:	d116      	bne.n	80022ba <HAL_GPIO_EXTI_Callback+0xd2>
 800228c:	4b2c      	ldr	r3, [pc, #176]	@ (8002340 <HAL_GPIO_EXTI_Callback+0x158>)
 800228e:	799b      	ldrb	r3, [r3, #6]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d112      	bne.n	80022ba <HAL_GPIO_EXTI_Callback+0xd2>
		{
			Buz1.BuzTone = BUZ_TONE_LOW_PSC;
 8002294:	4b24      	ldr	r3, [pc, #144]	@ (8002328 <HAL_GPIO_EXTI_Callback+0x140>)
 8002296:	f643 2298 	movw	r2, #15000	@ 0x3a98
 800229a:	80da      	strh	r2, [r3, #6]
			Buz1.BuzFlag = true;
 800229c:	4b22      	ldr	r3, [pc, #136]	@ (8002328 <HAL_GPIO_EXTI_Callback+0x140>)
 800229e:	2201      	movs	r2, #1
 80022a0:	711a      	strb	r2, [r3, #4]

			if (mode == WATCH && watchConfig.SubMode == WATCH_CLOCK_SETTING)
 80022a2:	4b24      	ldr	r3, [pc, #144]	@ (8002334 <HAL_GPIO_EXTI_Callback+0x14c>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d106      	bne.n	80022ba <HAL_GPIO_EXTI_Callback+0xd2>
 80022ac:	4b22      	ldr	r3, [pc, #136]	@ (8002338 <HAL_GPIO_EXTI_Callback+0x150>)
 80022ae:	7d5b      	ldrb	r3, [r3, #21]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d102      	bne.n	80022ba <HAL_GPIO_EXTI_Callback+0xd2>
			{
				watchConfig.flags.increaseFlagOnce = 1;  // clock increase flag on
 80022b4:	4b20      	ldr	r3, [pc, #128]	@ (8002338 <HAL_GPIO_EXTI_Callback+0x150>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	75da      	strb	r2, [r3, #23]
			}
		}
		HandleButtonPress(&Btn3, GPIOD, GPIO_PIN_4);
 80022ba:	2210      	movs	r2, #16
 80022bc:	491f      	ldr	r1, [pc, #124]	@ (800233c <HAL_GPIO_EXTI_Callback+0x154>)
 80022be:	4820      	ldr	r0, [pc, #128]	@ (8002340 <HAL_GPIO_EXTI_Callback+0x158>)
 80022c0:	f7ff f9f6 	bl	80016b0 <HandleButtonPress>
	}

	//btn4
	if (GPIO_Pin == GPIO_PIN_10)
 80022c4:	88fb      	ldrh	r3, [r7, #6]
 80022c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022ca:	d124      	bne.n	8002316 <HAL_GPIO_EXTI_Callback+0x12e>
	{
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10) == GPIO_PIN_SET && Btn4.state == Idle)
 80022cc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80022d0:	481a      	ldr	r0, [pc, #104]	@ (800233c <HAL_GPIO_EXTI_Callback+0x154>)
 80022d2:	f001 fc49 	bl	8003b68 <HAL_GPIO_ReadPin>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d116      	bne.n	800230a <HAL_GPIO_EXTI_Callback+0x122>
 80022dc:	4b19      	ldr	r3, [pc, #100]	@ (8002344 <HAL_GPIO_EXTI_Callback+0x15c>)
 80022de:	799b      	ldrb	r3, [r3, #6]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d112      	bne.n	800230a <HAL_GPIO_EXTI_Callback+0x122>
		{
			Buz1.BuzTone = BUZ_TONE_LOW_PSC;
 80022e4:	4b10      	ldr	r3, [pc, #64]	@ (8002328 <HAL_GPIO_EXTI_Callback+0x140>)
 80022e6:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80022ea:	80da      	strh	r2, [r3, #6]
			Buz1.BuzFlag = true;
 80022ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002328 <HAL_GPIO_EXTI_Callback+0x140>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	711a      	strb	r2, [r3, #4]

			if (mode == WATCH && watchConfig.SubMode == WATCH_CLOCK_SETTING)
 80022f2:	4b10      	ldr	r3, [pc, #64]	@ (8002334 <HAL_GPIO_EXTI_Callback+0x14c>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d106      	bne.n	800230a <HAL_GPIO_EXTI_Callback+0x122>
 80022fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002338 <HAL_GPIO_EXTI_Callback+0x150>)
 80022fe:	7d5b      	ldrb	r3, [r3, #21]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d102      	bne.n	800230a <HAL_GPIO_EXTI_Callback+0x122>
			{
				watchConfig.flags.decreaseFlagOnce = 1;  // clock decrease flag on
 8002304:	4b0c      	ldr	r3, [pc, #48]	@ (8002338 <HAL_GPIO_EXTI_Callback+0x150>)
 8002306:	2201      	movs	r2, #1
 8002308:	761a      	strb	r2, [r3, #24]
			}
		}

		HandleButtonPress(&Btn4, GPIOD, GPIO_PIN_10);
 800230a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800230e:	490b      	ldr	r1, [pc, #44]	@ (800233c <HAL_GPIO_EXTI_Callback+0x154>)
 8002310:	480c      	ldr	r0, [pc, #48]	@ (8002344 <HAL_GPIO_EXTI_Callback+0x15c>)
 8002312:	f7ff f9cd 	bl	80016b0 <HandleButtonPress>
	}
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40021000 	.word	0x40021000
 8002324:	200000ac 	.word	0x200000ac
 8002328:	200000dc 	.word	0x200000dc
 800232c:	40020800 	.word	0x40020800
 8002330:	200000b8 	.word	0x200000b8
 8002334:	200000e4 	.word	0x200000e4
 8002338:	200001e4 	.word	0x200001e4
 800233c:	40020c00 	.word	0x40020c00
 8002340:	200000c4 	.word	0x200000c4
 8002344:	200000d0 	.word	0x200000d0

08002348 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]


	if(htim->Instance == TIM6)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a3d      	ldr	r2, [pc, #244]	@ (800244c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d174      	bne.n	8002444 <HAL_TIM_PeriodElapsedCallback+0xfc>
	{
		//btn hold event
		BtnHoldEvent(&Btn1,GPIOE,GPIO_PIN_3 );
 800235a:	2208      	movs	r2, #8
 800235c:	493c      	ldr	r1, [pc, #240]	@ (8002450 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800235e:	483d      	ldr	r0, [pc, #244]	@ (8002454 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8002360:	f7ff fa0a 	bl	8001778 <BtnHoldEvent>
		BtnHoldEvent(&Btn2,GPIOC,GPIO_PIN_15 );
 8002364:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002368:	493b      	ldr	r1, [pc, #236]	@ (8002458 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800236a:	483c      	ldr	r0, [pc, #240]	@ (800245c <HAL_TIM_PeriodElapsedCallback+0x114>)
 800236c:	f7ff fa04 	bl	8001778 <BtnHoldEvent>
		BtnHoldEvent(&Btn3,GPIOD,GPIO_PIN_4 );
 8002370:	2210      	movs	r2, #16
 8002372:	493b      	ldr	r1, [pc, #236]	@ (8002460 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002374:	483b      	ldr	r0, [pc, #236]	@ (8002464 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8002376:	f7ff f9ff 	bl	8001778 <BtnHoldEvent>
		BtnHoldEvent(&Btn4,GPIOD,GPIO_PIN_10 );
 800237a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800237e:	4938      	ldr	r1, [pc, #224]	@ (8002460 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002380:	4839      	ldr	r0, [pc, #228]	@ (8002468 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002382:	f7ff f9f9 	bl	8001778 <BtnHoldEvent>

		//watch time
		updateWatchTime();
 8002386:	f000 fb73 	bl	8002a70 <updateWatchTime>

		///watch time in/decrease flag
		IncreaseTime();
 800238a:	f000 fe4f 	bl	800302c <IncreaseTime>
		DecreaseTime();
 800238e:	f000 ff5d 	bl	800324c <DecreaseTime>

		////auto switch to watchmode
		AutoSwitchToWatchMode();
 8002392:	f000 ffc7 	bl	8003324 <AutoSwitchToWatchMode>

		//// alarm
		for (uint8_t i = 0; i < MAX_ALARMS; i++)
 8002396:	2300      	movs	r3, #0
 8002398:	73fb      	strb	r3, [r7, #15]
 800239a:	e037      	b.n	800240c <HAL_TIM_PeriodElapsedCallback+0xc4>
		{
		    if (watch.Time.hours == alarm.alarmTime[i].hour &&
 800239c:	4b33      	ldr	r3, [pc, #204]	@ (800246c <HAL_TIM_PeriodElapsedCallback+0x124>)
 800239e:	68d9      	ldr	r1, [r3, #12]
 80023a0:	7bfa      	ldrb	r2, [r7, #15]
 80023a2:	4833      	ldr	r0, [pc, #204]	@ (8002470 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80023a4:	4613      	mov	r3, r2
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	4413      	add	r3, r2
 80023aa:	4403      	add	r3, r0
 80023ac:	3304      	adds	r3, #4
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	4299      	cmp	r1, r3
 80023b2:	d128      	bne.n	8002406 <HAL_TIM_PeriodElapsedCallback+0xbe>
		        watch.Time.minutes == alarm.alarmTime[i].minute &&
 80023b4:	4b2d      	ldr	r3, [pc, #180]	@ (800246c <HAL_TIM_PeriodElapsedCallback+0x124>)
 80023b6:	6919      	ldr	r1, [r3, #16]
 80023b8:	7bfa      	ldrb	r2, [r7, #15]
 80023ba:	482d      	ldr	r0, [pc, #180]	@ (8002470 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80023bc:	4613      	mov	r3, r2
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	4413      	add	r3, r2
 80023c2:	4403      	add	r3, r0
 80023c4:	3305      	adds	r3, #5
 80023c6:	781b      	ldrb	r3, [r3, #0]
		    if (watch.Time.hours == alarm.alarmTime[i].hour &&
 80023c8:	4299      	cmp	r1, r3
 80023ca:	d11c      	bne.n	8002406 <HAL_TIM_PeriodElapsedCallback+0xbe>
				watch.Time.second == 0 && watch.Time.millisecond == 0 &&
 80023cc:	4b27      	ldr	r3, [pc, #156]	@ (800246c <HAL_TIM_PeriodElapsedCallback+0x124>)
 80023ce:	695b      	ldr	r3, [r3, #20]
		        watch.Time.minutes == alarm.alarmTime[i].minute &&
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d118      	bne.n	8002406 <HAL_TIM_PeriodElapsedCallback+0xbe>
				watch.Time.second == 0 && watch.Time.millisecond == 0 &&
 80023d4:	4b25      	ldr	r3, [pc, #148]	@ (800246c <HAL_TIM_PeriodElapsedCallback+0x124>)
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d114      	bne.n	8002406 <HAL_TIM_PeriodElapsedCallback+0xbe>
		        alarm.alarmTime[i].isEnabled) // Check if the alarm is enabled
 80023dc:	7bfa      	ldrb	r2, [r7, #15]
 80023de:	4924      	ldr	r1, [pc, #144]	@ (8002470 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80023e0:	4613      	mov	r3, r2
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	4413      	add	r3, r2
 80023e6:	440b      	add	r3, r1
 80023e8:	3306      	adds	r3, #6
 80023ea:	781b      	ldrb	r3, [r3, #0]
				watch.Time.second == 0 && watch.Time.millisecond == 0 &&
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00a      	beq.n	8002406 <HAL_TIM_PeriodElapsedCallback+0xbe>
		    {
		    	previousMode = mode;
 80023f0:	4b20      	ldr	r3, [pc, #128]	@ (8002474 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	4b20      	ldr	r3, [pc, #128]	@ (8002478 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80023f8:	701a      	strb	r2, [r3, #0]
		    	alarm.alertFlag = 1;
 80023fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002470 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80023fc:	2201      	movs	r2, #1
 80023fe:	705a      	strb	r2, [r3, #1]
		    	mode = ALARM;
 8002400:	4b1c      	ldr	r3, [pc, #112]	@ (8002474 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8002402:	2201      	movs	r2, #1
 8002404:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < MAX_ALARMS; i++)
 8002406:	7bfb      	ldrb	r3, [r7, #15]
 8002408:	3301      	adds	r3, #1
 800240a:	73fb      	strb	r3, [r7, #15]
 800240c:	7bfb      	ldrb	r3, [r7, #15]
 800240e:	2b04      	cmp	r3, #4
 8002410:	d9c4      	bls.n	800239c <HAL_TIM_PeriodElapsedCallback+0x54>
		    }
		}

		if(alarm.alertFlag)
 8002412:	4b17      	ldr	r3, [pc, #92]	@ (8002470 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002414:	785b      	ldrb	r3, [r3, #1]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00f      	beq.n	800243a <HAL_TIM_PeriodElapsedCallback+0xf2>
		{
			alarm.ledTimer++;
 800241a:	4b15      	ldr	r3, [pc, #84]	@ (8002470 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800241c:	78db      	ldrb	r3, [r3, #3]
 800241e:	3301      	adds	r3, #1
 8002420:	b2da      	uxtb	r2, r3
 8002422:	4b13      	ldr	r3, [pc, #76]	@ (8002470 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002424:	70da      	strb	r2, [r3, #3]

			if(alarm.ledTimer >= 30)
 8002426:	4b12      	ldr	r3, [pc, #72]	@ (8002470 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002428:	78db      	ldrb	r3, [r3, #3]
 800242a:	2b1d      	cmp	r3, #29
 800242c:	d905      	bls.n	800243a <HAL_TIM_PeriodElapsedCallback+0xf2>
			{
				alarm.ledTimer = 0;
 800242e:	4b10      	ldr	r3, [pc, #64]	@ (8002470 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002430:	2200      	movs	r2, #0
 8002432:	70da      	strb	r2, [r3, #3]
				alarm.ledState = 1;
 8002434:	4b0e      	ldr	r3, [pc, #56]	@ (8002470 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002436:	2201      	movs	r2, #1
 8002438:	709a      	strb	r2, [r3, #2]
			}
		}


		//buz off
		activateBuzzer30msOff(&Buz1, &htim2, TIM_CHANNEL_1);
 800243a:	2200      	movs	r2, #0
 800243c:	490f      	ldr	r1, [pc, #60]	@ (800247c <HAL_TIM_PeriodElapsedCallback+0x134>)
 800243e:	4810      	ldr	r0, [pc, #64]	@ (8002480 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002440:	f7ff fb95 	bl	8001b6e <activateBuzzer30msOff>

	}
}
 8002444:	bf00      	nop
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40001000 	.word	0x40001000
 8002450:	40021000 	.word	0x40021000
 8002454:	200000ac 	.word	0x200000ac
 8002458:	40020800 	.word	0x40020800
 800245c:	200000b8 	.word	0x200000b8
 8002460:	40020c00 	.word	0x40020c00
 8002464:	200000c4 	.word	0x200000c4
 8002468:	200000d0 	.word	0x200000d0
 800246c:	200001c4 	.word	0x200001c4
 8002470:	20000098 	.word	0x20000098
 8002474:	200000e4 	.word	0x200000e4
 8002478:	200000e5 	.word	0x200000e5
 800247c:	200000ec 	.word	0x200000ec
 8002480:	200000dc 	.word	0x200000dc

08002484 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002488:	b672      	cpsid	i
}
 800248a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800248c:	bf00      	nop
 800248e:	e7fd      	b.n	800248c <Error_Handler+0x8>

08002490 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	607b      	str	r3, [r7, #4]
 800249a:	4b10      	ldr	r3, [pc, #64]	@ (80024dc <HAL_MspInit+0x4c>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249e:	4a0f      	ldr	r2, [pc, #60]	@ (80024dc <HAL_MspInit+0x4c>)
 80024a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80024a6:	4b0d      	ldr	r3, [pc, #52]	@ (80024dc <HAL_MspInit+0x4c>)
 80024a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024ae:	607b      	str	r3, [r7, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	603b      	str	r3, [r7, #0]
 80024b6:	4b09      	ldr	r3, [pc, #36]	@ (80024dc <HAL_MspInit+0x4c>)
 80024b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ba:	4a08      	ldr	r2, [pc, #32]	@ (80024dc <HAL_MspInit+0x4c>)
 80024bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80024c2:	4b06      	ldr	r3, [pc, #24]	@ (80024dc <HAL_MspInit+0x4c>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ca:	603b      	str	r3, [r7, #0]
 80024cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	40023800 	.word	0x40023800

080024e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024e4:	bf00      	nop
 80024e6:	e7fd      	b.n	80024e4 <NMI_Handler+0x4>

080024e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024ec:	bf00      	nop
 80024ee:	e7fd      	b.n	80024ec <HardFault_Handler+0x4>

080024f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024f4:	bf00      	nop
 80024f6:	e7fd      	b.n	80024f4 <MemManage_Handler+0x4>

080024f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024fc:	bf00      	nop
 80024fe:	e7fd      	b.n	80024fc <BusFault_Handler+0x4>

08002500 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002504:	bf00      	nop
 8002506:	e7fd      	b.n	8002504 <UsageFault_Handler+0x4>

08002508 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002516:	b480      	push	{r7}
 8002518:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002528:	bf00      	nop
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002536:	f000 ff93 	bl	8003460 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}

0800253e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002542:	2008      	movs	r0, #8
 8002544:	f001 fb5c 	bl	8003c00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002548:	bf00      	nop
 800254a:	bd80      	pop	{r7, pc}

0800254c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002550:	2010      	movs	r0, #16
 8002552:	f001 fb55 	bl	8003c00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002560:	4802      	ldr	r0, [pc, #8]	@ (800256c <USART3_IRQHandler+0x10>)
 8002562:	f003 f8ed 	bl	8005740 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	2000017c 	.word	0x2000017c

08002570 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002574:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002578:	f001 fb42 	bl	8003c00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800257c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002580:	f001 fb3e 	bl	8003c00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002584:	bf00      	nop
 8002586:	bd80      	pop	{r7, pc}

08002588 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800258c:	4802      	ldr	r0, [pc, #8]	@ (8002598 <TIM6_DAC_IRQHandler+0x10>)
 800258e:	f002 fa39 	bl	8004a04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20000134 	.word	0x20000134

0800259c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025a4:	4a14      	ldr	r2, [pc, #80]	@ (80025f8 <_sbrk+0x5c>)
 80025a6:	4b15      	ldr	r3, [pc, #84]	@ (80025fc <_sbrk+0x60>)
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025b0:	4b13      	ldr	r3, [pc, #76]	@ (8002600 <_sbrk+0x64>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d102      	bne.n	80025be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025b8:	4b11      	ldr	r3, [pc, #68]	@ (8002600 <_sbrk+0x64>)
 80025ba:	4a12      	ldr	r2, [pc, #72]	@ (8002604 <_sbrk+0x68>)
 80025bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025be:	4b10      	ldr	r3, [pc, #64]	@ (8002600 <_sbrk+0x64>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4413      	add	r3, r2
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d207      	bcs.n	80025dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025cc:	f003 ffae 	bl	800652c <__errno>
 80025d0:	4603      	mov	r3, r0
 80025d2:	220c      	movs	r2, #12
 80025d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025d6:	f04f 33ff 	mov.w	r3, #4294967295
 80025da:	e009      	b.n	80025f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025dc:	4b08      	ldr	r3, [pc, #32]	@ (8002600 <_sbrk+0x64>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025e2:	4b07      	ldr	r3, [pc, #28]	@ (8002600 <_sbrk+0x64>)
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4413      	add	r3, r2
 80025ea:	4a05      	ldr	r2, [pc, #20]	@ (8002600 <_sbrk+0x64>)
 80025ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025ee:	68fb      	ldr	r3, [r7, #12]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	20020000 	.word	0x20020000
 80025fc:	00000400 	.word	0x00000400
 8002600:	200000e8 	.word	0x200000e8
 8002604:	20000350 	.word	0x20000350

08002608 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800260c:	4b06      	ldr	r3, [pc, #24]	@ (8002628 <SystemInit+0x20>)
 800260e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002612:	4a05      	ldr	r2, [pc, #20]	@ (8002628 <SystemInit+0x20>)
 8002614:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002618:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800261c:	bf00      	nop
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	e000ed00 	.word	0xe000ed00

0800262c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08e      	sub	sp, #56	@ 0x38
 8002630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002632:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	605a      	str	r2, [r3, #4]
 800263c:	609a      	str	r2, [r3, #8]
 800263e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002640:	f107 0320 	add.w	r3, r7, #32
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800264a:	1d3b      	adds	r3, r7, #4
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	609a      	str	r2, [r3, #8]
 8002654:	60da      	str	r2, [r3, #12]
 8002656:	611a      	str	r2, [r3, #16]
 8002658:	615a      	str	r2, [r3, #20]
 800265a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800265c:	4b2d      	ldr	r3, [pc, #180]	@ (8002714 <MX_TIM2_Init+0xe8>)
 800265e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002662:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 8002664:	4b2b      	ldr	r3, [pc, #172]	@ (8002714 <MX_TIM2_Init+0xe8>)
 8002666:	f24a 420f 	movw	r2, #41999	@ 0xa40f
 800266a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800266c:	4b29      	ldr	r3, [pc, #164]	@ (8002714 <MX_TIM2_Init+0xe8>)
 800266e:	2200      	movs	r2, #0
 8002670:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8002672:	4b28      	ldr	r3, [pc, #160]	@ (8002714 <MX_TIM2_Init+0xe8>)
 8002674:	2209      	movs	r2, #9
 8002676:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002678:	4b26      	ldr	r3, [pc, #152]	@ (8002714 <MX_TIM2_Init+0xe8>)
 800267a:	2200      	movs	r2, #0
 800267c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800267e:	4b25      	ldr	r3, [pc, #148]	@ (8002714 <MX_TIM2_Init+0xe8>)
 8002680:	2200      	movs	r2, #0
 8002682:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002684:	4823      	ldr	r0, [pc, #140]	@ (8002714 <MX_TIM2_Init+0xe8>)
 8002686:	f001 ff6b 	bl	8004560 <HAL_TIM_Base_Init>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002690:	f7ff fef8 	bl	8002484 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002694:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002698:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800269a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800269e:	4619      	mov	r1, r3
 80026a0:	481c      	ldr	r0, [pc, #112]	@ (8002714 <MX_TIM2_Init+0xe8>)
 80026a2:	f002 fb61 	bl	8004d68 <HAL_TIM_ConfigClockSource>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80026ac:	f7ff feea 	bl	8002484 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80026b0:	4818      	ldr	r0, [pc, #96]	@ (8002714 <MX_TIM2_Init+0xe8>)
 80026b2:	f002 f815 	bl	80046e0 <HAL_TIM_PWM_Init>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80026bc:	f7ff fee2 	bl	8002484 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026c0:	2300      	movs	r3, #0
 80026c2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026c4:	2300      	movs	r3, #0
 80026c6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026c8:	f107 0320 	add.w	r3, r7, #32
 80026cc:	4619      	mov	r1, r3
 80026ce:	4811      	ldr	r0, [pc, #68]	@ (8002714 <MX_TIM2_Init+0xe8>)
 80026d0:	f002 ff56 	bl	8005580 <HAL_TIMEx_MasterConfigSynchronization>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80026da:	f7ff fed3 	bl	8002484 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026de:	2360      	movs	r3, #96	@ 0x60
 80026e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 4;
 80026e2:	2304      	movs	r3, #4
 80026e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026e6:	2300      	movs	r3, #0
 80026e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026ea:	2300      	movs	r3, #0
 80026ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026ee:	1d3b      	adds	r3, r7, #4
 80026f0:	2200      	movs	r2, #0
 80026f2:	4619      	mov	r1, r3
 80026f4:	4807      	ldr	r0, [pc, #28]	@ (8002714 <MX_TIM2_Init+0xe8>)
 80026f6:	f002 fa75 	bl	8004be4 <HAL_TIM_PWM_ConfigChannel>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002700:	f7ff fec0 	bl	8002484 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002704:	4803      	ldr	r0, [pc, #12]	@ (8002714 <MX_TIM2_Init+0xe8>)
 8002706:	f000 f873 	bl	80027f0 <HAL_TIM_MspPostInit>

}
 800270a:	bf00      	nop
 800270c:	3738      	adds	r7, #56	@ 0x38
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	200000ec 	.word	0x200000ec

08002718 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800271e:	463b      	mov	r3, r7
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002726:	4b15      	ldr	r3, [pc, #84]	@ (800277c <MX_TIM6_Init+0x64>)
 8002728:	4a15      	ldr	r2, [pc, #84]	@ (8002780 <MX_TIM6_Init+0x68>)
 800272a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 800272c:	4b13      	ldr	r3, [pc, #76]	@ (800277c <MX_TIM6_Init+0x64>)
 800272e:	2253      	movs	r2, #83	@ 0x53
 8002730:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002732:	4b12      	ldr	r3, [pc, #72]	@ (800277c <MX_TIM6_Init+0x64>)
 8002734:	2200      	movs	r2, #0
 8002736:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8002738:	4b10      	ldr	r3, [pc, #64]	@ (800277c <MX_TIM6_Init+0x64>)
 800273a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800273e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002740:	4b0e      	ldr	r3, [pc, #56]	@ (800277c <MX_TIM6_Init+0x64>)
 8002742:	2200      	movs	r2, #0
 8002744:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002746:	480d      	ldr	r0, [pc, #52]	@ (800277c <MX_TIM6_Init+0x64>)
 8002748:	f001 ff0a 	bl	8004560 <HAL_TIM_Base_Init>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002752:	f7ff fe97 	bl	8002484 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002756:	2300      	movs	r3, #0
 8002758:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800275a:	2300      	movs	r3, #0
 800275c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800275e:	463b      	mov	r3, r7
 8002760:	4619      	mov	r1, r3
 8002762:	4806      	ldr	r0, [pc, #24]	@ (800277c <MX_TIM6_Init+0x64>)
 8002764:	f002 ff0c 	bl	8005580 <HAL_TIMEx_MasterConfigSynchronization>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800276e:	f7ff fe89 	bl	8002484 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002772:	bf00      	nop
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	20000134 	.word	0x20000134
 8002780:	40001000 	.word	0x40001000

08002784 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002794:	d10e      	bne.n	80027b4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	4b13      	ldr	r3, [pc, #76]	@ (80027e8 <HAL_TIM_Base_MspInit+0x64>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279e:	4a12      	ldr	r2, [pc, #72]	@ (80027e8 <HAL_TIM_Base_MspInit+0x64>)
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80027a6:	4b10      	ldr	r3, [pc, #64]	@ (80027e8 <HAL_TIM_Base_MspInit+0x64>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80027b2:	e012      	b.n	80027da <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM6)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a0c      	ldr	r2, [pc, #48]	@ (80027ec <HAL_TIM_Base_MspInit+0x68>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d10d      	bne.n	80027da <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	60bb      	str	r3, [r7, #8]
 80027c2:	4b09      	ldr	r3, [pc, #36]	@ (80027e8 <HAL_TIM_Base_MspInit+0x64>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c6:	4a08      	ldr	r2, [pc, #32]	@ (80027e8 <HAL_TIM_Base_MspInit+0x64>)
 80027c8:	f043 0310 	orr.w	r3, r3, #16
 80027cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80027ce:	4b06      	ldr	r3, [pc, #24]	@ (80027e8 <HAL_TIM_Base_MspInit+0x64>)
 80027d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d2:	f003 0310 	and.w	r3, r3, #16
 80027d6:	60bb      	str	r3, [r7, #8]
 80027d8:	68bb      	ldr	r3, [r7, #8]
}
 80027da:	bf00      	nop
 80027dc:	3714      	adds	r7, #20
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40001000 	.word	0x40001000

080027f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b088      	sub	sp, #32
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f8:	f107 030c 	add.w	r3, r7, #12
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	605a      	str	r2, [r3, #4]
 8002802:	609a      	str	r2, [r3, #8]
 8002804:	60da      	str	r2, [r3, #12]
 8002806:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002810:	d11d      	bne.n	800284e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002812:	2300      	movs	r3, #0
 8002814:	60bb      	str	r3, [r7, #8]
 8002816:	4b10      	ldr	r3, [pc, #64]	@ (8002858 <HAL_TIM_MspPostInit+0x68>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281a:	4a0f      	ldr	r2, [pc, #60]	@ (8002858 <HAL_TIM_MspPostInit+0x68>)
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	6313      	str	r3, [r2, #48]	@ 0x30
 8002822:	4b0d      	ldr	r3, [pc, #52]	@ (8002858 <HAL_TIM_MspPostInit+0x68>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	60bb      	str	r3, [r7, #8]
 800282c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800282e:	2320      	movs	r3, #32
 8002830:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002832:	2302      	movs	r3, #2
 8002834:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002836:	2300      	movs	r3, #0
 8002838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283a:	2300      	movs	r3, #0
 800283c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800283e:	2301      	movs	r3, #1
 8002840:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002842:	f107 030c 	add.w	r3, r7, #12
 8002846:	4619      	mov	r1, r3
 8002848:	4804      	ldr	r0, [pc, #16]	@ (800285c <HAL_TIM_MspPostInit+0x6c>)
 800284a:	f000 fff1 	bl	8003830 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800284e:	bf00      	nop
 8002850:	3720      	adds	r7, #32
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	40023800 	.word	0x40023800
 800285c:	40020000 	.word	0x40020000

08002860 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002864:	4b11      	ldr	r3, [pc, #68]	@ (80028ac <MX_USART3_UART_Init+0x4c>)
 8002866:	4a12      	ldr	r2, [pc, #72]	@ (80028b0 <MX_USART3_UART_Init+0x50>)
 8002868:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800286a:	4b10      	ldr	r3, [pc, #64]	@ (80028ac <MX_USART3_UART_Init+0x4c>)
 800286c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002870:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002872:	4b0e      	ldr	r3, [pc, #56]	@ (80028ac <MX_USART3_UART_Init+0x4c>)
 8002874:	2200      	movs	r2, #0
 8002876:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002878:	4b0c      	ldr	r3, [pc, #48]	@ (80028ac <MX_USART3_UART_Init+0x4c>)
 800287a:	2200      	movs	r2, #0
 800287c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800287e:	4b0b      	ldr	r3, [pc, #44]	@ (80028ac <MX_USART3_UART_Init+0x4c>)
 8002880:	2200      	movs	r2, #0
 8002882:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002884:	4b09      	ldr	r3, [pc, #36]	@ (80028ac <MX_USART3_UART_Init+0x4c>)
 8002886:	220c      	movs	r2, #12
 8002888:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800288a:	4b08      	ldr	r3, [pc, #32]	@ (80028ac <MX_USART3_UART_Init+0x4c>)
 800288c:	2200      	movs	r2, #0
 800288e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002890:	4b06      	ldr	r3, [pc, #24]	@ (80028ac <MX_USART3_UART_Init+0x4c>)
 8002892:	2200      	movs	r2, #0
 8002894:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002896:	4805      	ldr	r0, [pc, #20]	@ (80028ac <MX_USART3_UART_Init+0x4c>)
 8002898:	f002 ff02 	bl	80056a0 <HAL_UART_Init>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80028a2:	f7ff fdef 	bl	8002484 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80028a6:	bf00      	nop
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	2000017c 	.word	0x2000017c
 80028b0:	40004800 	.word	0x40004800

080028b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b08a      	sub	sp, #40	@ 0x28
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028bc:	f107 0314 	add.w	r3, r7, #20
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	605a      	str	r2, [r3, #4]
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	60da      	str	r2, [r3, #12]
 80028ca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a19      	ldr	r2, [pc, #100]	@ (8002938 <HAL_UART_MspInit+0x84>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d12c      	bne.n	8002930 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	613b      	str	r3, [r7, #16]
 80028da:	4b18      	ldr	r3, [pc, #96]	@ (800293c <HAL_UART_MspInit+0x88>)
 80028dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028de:	4a17      	ldr	r2, [pc, #92]	@ (800293c <HAL_UART_MspInit+0x88>)
 80028e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80028e6:	4b15      	ldr	r3, [pc, #84]	@ (800293c <HAL_UART_MspInit+0x88>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028ee:	613b      	str	r3, [r7, #16]
 80028f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	4b11      	ldr	r3, [pc, #68]	@ (800293c <HAL_UART_MspInit+0x88>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fa:	4a10      	ldr	r2, [pc, #64]	@ (800293c <HAL_UART_MspInit+0x88>)
 80028fc:	f043 0308 	orr.w	r3, r3, #8
 8002900:	6313      	str	r3, [r2, #48]	@ 0x30
 8002902:	4b0e      	ldr	r3, [pc, #56]	@ (800293c <HAL_UART_MspInit+0x88>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800290e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002914:	2302      	movs	r3, #2
 8002916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002918:	2300      	movs	r3, #0
 800291a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800291c:	2303      	movs	r3, #3
 800291e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002920:	2307      	movs	r3, #7
 8002922:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002924:	f107 0314 	add.w	r3, r7, #20
 8002928:	4619      	mov	r1, r3
 800292a:	4805      	ldr	r0, [pc, #20]	@ (8002940 <HAL_UART_MspInit+0x8c>)
 800292c:	f000 ff80 	bl	8003830 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002930:	bf00      	nop
 8002932:	3728      	adds	r7, #40	@ 0x28
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40004800 	.word	0x40004800
 800293c:	40023800 	.word	0x40023800
 8002940:	40020c00 	.word	0x40020c00

08002944 <InitializeWatch>:

Watch watch;
WatchConfig watchConfig;

void InitializeWatch(void)
{
 8002944:	b5b0      	push	{r4, r5, r7, lr}
 8002946:	b090      	sub	sp, #64	@ 0x40
 8002948:	af00      	add	r7, sp, #0
    watch = (Watch){
 800294a:	4a0a      	ldr	r2, [pc, #40]	@ (8002974 <InitializeWatch+0x30>)
 800294c:	4b0a      	ldr	r3, [pc, #40]	@ (8002978 <InitializeWatch+0x34>)
 800294e:	4614      	mov	r4, r2
 8002950:	461d      	mov	r5, r3
 8002952:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002954:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002956:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800295a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        .Time = {2024, 9, 28, 12, 0, 55, 0},
        .isLeap = false,
        .WatchMode = MODE_12_HOUR
    };

    watchConfig = (WatchConfig){
 800295e:	4b07      	ldr	r3, [pc, #28]	@ (800297c <InitializeWatch+0x38>)
 8002960:	4618      	mov	r0, r3
 8002962:	2320      	movs	r3, #32
 8002964:	461a      	mov	r2, r3
 8002966:	2100      	movs	r1, #0
 8002968:	f003 fdd8 	bl	800651c <memset>
        .WatchTime = SET_SECOND,
        .SubMode = WATCH_NORMAL,
        .NextItem = false
    };
}
 800296c:	bf00      	nop
 800296e:	3740      	adds	r7, #64	@ 0x40
 8002970:	46bd      	mov	sp, r7
 8002972:	bdb0      	pop	{r4, r5, r7, pc}
 8002974:	200001c4 	.word	0x200001c4
 8002978:	08006e94 	.word	0x08006e94
 800297c:	200001e4 	.word	0x200001e4

08002980 <isLeapYear>:

bool isLeapYear(uint16_t year)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	80fb      	strh	r3, [r7, #6]
	 if((year % 4 == 0 && year % 100 !=0) || year % 400 == 0)
 800298a:	88fb      	ldrh	r3, [r7, #6]
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	b29b      	uxth	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10b      	bne.n	80029ae <isLeapYear+0x2e>
 8002996:	88fb      	ldrh	r3, [r7, #6]
 8002998:	4a10      	ldr	r2, [pc, #64]	@ (80029dc <isLeapYear+0x5c>)
 800299a:	fba2 1203 	umull	r1, r2, r2, r3
 800299e:	0952      	lsrs	r2, r2, #5
 80029a0:	2164      	movs	r1, #100	@ 0x64
 80029a2:	fb01 f202 	mul.w	r2, r1, r2
 80029a6:	1a9b      	subs	r3, r3, r2
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10c      	bne.n	80029c8 <isLeapYear+0x48>
 80029ae:	88fb      	ldrh	r3, [r7, #6]
 80029b0:	4a0a      	ldr	r2, [pc, #40]	@ (80029dc <isLeapYear+0x5c>)
 80029b2:	fba2 1203 	umull	r1, r2, r2, r3
 80029b6:	09d2      	lsrs	r2, r2, #7
 80029b8:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80029bc:	fb01 f202 	mul.w	r2, r1, r2
 80029c0:	1a9b      	subs	r3, r3, r2
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <isLeapYear+0x4c>
	 {
		 return true;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e000      	b.n	80029ce <isLeapYear+0x4e>
	 }
	 else
	 {
		 return false;
 80029cc:	2300      	movs	r3, #0
	 }
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	51eb851f 	.word	0x51eb851f

080029e0 <getDaysInMonth>:

int getDaysInMonth(Watch* watch)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
	 uint16_t year = watch->Time.years;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	81fb      	strh	r3, [r7, #14]
	 uint8_t months = watch->Time.months;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	737b      	strb	r3, [r7, #13]
	switch(months)
 80029f4:	7b7b      	ldrb	r3, [r7, #13]
 80029f6:	2b0c      	cmp	r3, #12
 80029f8:	bf8c      	ite	hi
 80029fa:	2201      	movhi	r2, #1
 80029fc:	2200      	movls	r2, #0
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	2a00      	cmp	r2, #0
 8002a02:	d12e      	bne.n	8002a62 <getDaysInMonth+0x82>
 8002a04:	2201      	movs	r2, #1
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	f241 52aa 	movw	r2, #5546	@ 0x15aa
 8002a0e:	401a      	ands	r2, r3
 8002a10:	2a00      	cmp	r2, #0
 8002a12:	bf14      	ite	ne
 8002a14:	2201      	movne	r2, #1
 8002a16:	2200      	moveq	r2, #0
 8002a18:	b2d2      	uxtb	r2, r2
 8002a1a:	2a00      	cmp	r2, #0
 8002a1c:	d112      	bne.n	8002a44 <getDaysInMonth+0x64>
 8002a1e:	f403 6225 	and.w	r2, r3, #2640	@ 0xa50
 8002a22:	2a00      	cmp	r2, #0
 8002a24:	bf14      	ite	ne
 8002a26:	2201      	movne	r2, #1
 8002a28:	2200      	moveq	r2, #0
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	2a00      	cmp	r2, #0
 8002a2e:	d10b      	bne.n	8002a48 <getDaysInMonth+0x68>
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	bf14      	ite	ne
 8002a38:	2301      	movne	r3, #1
 8002a3a:	2300      	moveq	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d104      	bne.n	8002a4c <getDaysInMonth+0x6c>
 8002a42:	e00e      	b.n	8002a62 <getDaysInMonth+0x82>
	{
	case 1: case 3: case 5: case 7: case 8: case 10: case 12:
		return 31;
 8002a44:	231f      	movs	r3, #31
 8002a46:	e00e      	b.n	8002a66 <getDaysInMonth+0x86>
	case 4: case 6: case 9: case 11:
	    return 30;
 8002a48:	231e      	movs	r3, #30
 8002a4a:	e00c      	b.n	8002a66 <getDaysInMonth+0x86>
	case 2:
		if(isLeapYear(year))
 8002a4c:	89fb      	ldrh	r3, [r7, #14]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff ff96 	bl	8002980 <isLeapYear>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <getDaysInMonth+0x7e>
		{
			return 29;
 8002a5a:	231d      	movs	r3, #29
 8002a5c:	e003      	b.n	8002a66 <getDaysInMonth+0x86>
		}
		else
		{
			return 28;
 8002a5e:	231c      	movs	r3, #28
 8002a60:	e001      	b.n	8002a66 <getDaysInMonth+0x86>
		}
	default :
		return -1;
 8002a62:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
	...

08002a70 <updateWatchTime>:

void updateWatchTime(void)
{
 8002a70:	b598      	push	{r3, r4, r7, lr}
 8002a72:	af00      	add	r7, sp, #0

	watch.Time.millisecond++;
 8002a74:	4b2e      	ldr	r3, [pc, #184]	@ (8002b30 <updateWatchTime+0xc0>)
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	4a2d      	ldr	r2, [pc, #180]	@ (8002b30 <updateWatchTime+0xc0>)
 8002a7c:	6193      	str	r3, [r2, #24]

	if(watch.Time.millisecond >= 1000)
 8002a7e:	4b2c      	ldr	r3, [pc, #176]	@ (8002b30 <updateWatchTime+0xc0>)
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a86:	db51      	blt.n	8002b2c <updateWatchTime+0xbc>
	{
		watch.Time.millisecond = 0;
 8002a88:	4b29      	ldr	r3, [pc, #164]	@ (8002b30 <updateWatchTime+0xc0>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	619a      	str	r2, [r3, #24]
//		if(watchConfig.SubMode == WATCH_CLOCK_SETTING)
//		{
//			return;
//		}

		watch.Time.second++;
 8002a8e:	4b28      	ldr	r3, [pc, #160]	@ (8002b30 <updateWatchTime+0xc0>)
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	3301      	adds	r3, #1
 8002a94:	4a26      	ldr	r2, [pc, #152]	@ (8002b30 <updateWatchTime+0xc0>)
 8002a96:	6153      	str	r3, [r2, #20]

		if(watch.Time.second >= 60)
 8002a98:	4b25      	ldr	r3, [pc, #148]	@ (8002b30 <updateWatchTime+0xc0>)
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	2b3b      	cmp	r3, #59	@ 0x3b
 8002a9e:	dd07      	ble.n	8002ab0 <updateWatchTime+0x40>
		{
			watch.Time.second = 0;
 8002aa0:	4b23      	ldr	r3, [pc, #140]	@ (8002b30 <updateWatchTime+0xc0>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	615a      	str	r2, [r3, #20]
			watch.Time.minutes++;
 8002aa6:	4b22      	ldr	r3, [pc, #136]	@ (8002b30 <updateWatchTime+0xc0>)
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	4a20      	ldr	r2, [pc, #128]	@ (8002b30 <updateWatchTime+0xc0>)
 8002aae:	6113      	str	r3, [r2, #16]
		}
		if(watch.Time.minutes >= 60)
 8002ab0:	4b1f      	ldr	r3, [pc, #124]	@ (8002b30 <updateWatchTime+0xc0>)
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	2b3b      	cmp	r3, #59	@ 0x3b
 8002ab6:	dd07      	ble.n	8002ac8 <updateWatchTime+0x58>
		{
			watch.Time.minutes = 0;
 8002ab8:	4b1d      	ldr	r3, [pc, #116]	@ (8002b30 <updateWatchTime+0xc0>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	611a      	str	r2, [r3, #16]
			watch.Time.hours++;
 8002abe:	4b1c      	ldr	r3, [pc, #112]	@ (8002b30 <updateWatchTime+0xc0>)
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	4a1a      	ldr	r2, [pc, #104]	@ (8002b30 <updateWatchTime+0xc0>)
 8002ac6:	60d3      	str	r3, [r2, #12]
		}
		if(watch.Time.hours >= 24)
 8002ac8:	4b19      	ldr	r3, [pc, #100]	@ (8002b30 <updateWatchTime+0xc0>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	2b17      	cmp	r3, #23
 8002ace:	dd07      	ble.n	8002ae0 <updateWatchTime+0x70>
		{
			watch.Time.hours = 0;
 8002ad0:	4b17      	ldr	r3, [pc, #92]	@ (8002b30 <updateWatchTime+0xc0>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	60da      	str	r2, [r3, #12]
			watch.Time.days++;
 8002ad6:	4b16      	ldr	r3, [pc, #88]	@ (8002b30 <updateWatchTime+0xc0>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	3301      	adds	r3, #1
 8002adc:	4a14      	ldr	r2, [pc, #80]	@ (8002b30 <updateWatchTime+0xc0>)
 8002ade:	6093      	str	r3, [r2, #8]
		}
		if(watch.Time.days > getDaysInMonth(&watch))
 8002ae0:	4b13      	ldr	r3, [pc, #76]	@ (8002b30 <updateWatchTime+0xc0>)
 8002ae2:	689c      	ldr	r4, [r3, #8]
 8002ae4:	4812      	ldr	r0, [pc, #72]	@ (8002b30 <updateWatchTime+0xc0>)
 8002ae6:	f7ff ff7b 	bl	80029e0 <getDaysInMonth>
 8002aea:	4603      	mov	r3, r0
 8002aec:	429c      	cmp	r4, r3
 8002aee:	dd07      	ble.n	8002b00 <updateWatchTime+0x90>
		{
			watch.Time.days = 1;
 8002af0:	4b0f      	ldr	r3, [pc, #60]	@ (8002b30 <updateWatchTime+0xc0>)
 8002af2:	2201      	movs	r2, #1
 8002af4:	609a      	str	r2, [r3, #8]
			watch.Time.months++;
 8002af6:	4b0e      	ldr	r3, [pc, #56]	@ (8002b30 <updateWatchTime+0xc0>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	3301      	adds	r3, #1
 8002afc:	4a0c      	ldr	r2, [pc, #48]	@ (8002b30 <updateWatchTime+0xc0>)
 8002afe:	6053      	str	r3, [r2, #4]
		}
		if(watch.Time.months > 12)
 8002b00:	4b0b      	ldr	r3, [pc, #44]	@ (8002b30 <updateWatchTime+0xc0>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b0c      	cmp	r3, #12
 8002b06:	dd07      	ble.n	8002b18 <updateWatchTime+0xa8>
		{
			watch.Time.months = 1;
 8002b08:	4b09      	ldr	r3, [pc, #36]	@ (8002b30 <updateWatchTime+0xc0>)
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	605a      	str	r2, [r3, #4]
			watch.Time.years++;
 8002b0e:	4b08      	ldr	r3, [pc, #32]	@ (8002b30 <updateWatchTime+0xc0>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	3301      	adds	r3, #1
 8002b14:	4a06      	ldr	r2, [pc, #24]	@ (8002b30 <updateWatchTime+0xc0>)
 8002b16:	6013      	str	r3, [r2, #0]
		}
		watch.isLeap = isLeapYear(watch.Time.years);
 8002b18:	4b05      	ldr	r3, [pc, #20]	@ (8002b30 <updateWatchTime+0xc0>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff ff2e 	bl	8002980 <isLeapYear>
 8002b24:	4603      	mov	r3, r0
 8002b26:	461a      	mov	r2, r3
 8002b28:	4b01      	ldr	r3, [pc, #4]	@ (8002b30 <updateWatchTime+0xc0>)
 8002b2a:	771a      	strb	r2, [r3, #28]
	}
}
 8002b2c:	bf00      	nop
 8002b2e:	bd98      	pop	{r3, r4, r7, pc}
 8002b30:	200001c4 	.word	0x200001c4

08002b34 <updateWatchDisplay>:

void updateWatchDisplay(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b088      	sub	sp, #32
 8002b38:	af04      	add	r7, sp, #16
	char* BuzState;
	const char* colon;

    // 7SEG
    _7SEG_SetNumber(DGT1, watch.Time.second / 10, OFF);
 8002b3a:	4b51      	ldr	r3, [pc, #324]	@ (8002c80 <updateWatchDisplay+0x14c>)
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	4a51      	ldr	r2, [pc, #324]	@ (8002c84 <updateWatchDisplay+0x150>)
 8002b40:	fb82 1203 	smull	r1, r2, r2, r3
 8002b44:	1092      	asrs	r2, r2, #2
 8002b46:	17db      	asrs	r3, r3, #31
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	2000      	movs	r0, #0
 8002b50:	f7fd fdec 	bl	800072c <_7SEG_SetNumber>
    _7SEG_SetNumber(DGT2, watch.Time.second % 10, OFF);
 8002b54:	4b4a      	ldr	r3, [pc, #296]	@ (8002c80 <updateWatchDisplay+0x14c>)
 8002b56:	695a      	ldr	r2, [r3, #20]
 8002b58:	4b4a      	ldr	r3, [pc, #296]	@ (8002c84 <updateWatchDisplay+0x150>)
 8002b5a:	fb83 1302 	smull	r1, r3, r3, r2
 8002b5e:	1099      	asrs	r1, r3, #2
 8002b60:	17d3      	asrs	r3, r2, #31
 8002b62:	1ac9      	subs	r1, r1, r3
 8002b64:	460b      	mov	r3, r1
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	1ad1      	subs	r1, r2, r3
 8002b6e:	2200      	movs	r2, #0
 8002b70:	2001      	movs	r0, #1
 8002b72:	f7fd fddb 	bl	800072c <_7SEG_SetNumber>

    // CLCD
    if(watch.isLeap)
 8002b76:	4b42      	ldr	r3, [pc, #264]	@ (8002c80 <updateWatchDisplay+0x14c>)
 8002b78:	7f1b      	ldrb	r3, [r3, #28]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00c      	beq.n	8002b98 <updateWatchDisplay+0x64>
    {
    	sprintf(clcd.str1, "LEAP  %04d.%02d.%02d",
    			watch.Time.years,
 8002b7e:	4b40      	ldr	r3, [pc, #256]	@ (8002c80 <updateWatchDisplay+0x14c>)
 8002b80:	681a      	ldr	r2, [r3, #0]
				watch.Time.months,
 8002b82:	4b3f      	ldr	r3, [pc, #252]	@ (8002c80 <updateWatchDisplay+0x14c>)
 8002b84:	6859      	ldr	r1, [r3, #4]
				watch.Time.days);
 8002b86:	4b3e      	ldr	r3, [pc, #248]	@ (8002c80 <updateWatchDisplay+0x14c>)
 8002b88:	689b      	ldr	r3, [r3, #8]
    	sprintf(clcd.str1, "LEAP  %04d.%02d.%02d",
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	493e      	ldr	r1, [pc, #248]	@ (8002c88 <updateWatchDisplay+0x154>)
 8002b90:	483e      	ldr	r0, [pc, #248]	@ (8002c8c <updateWatchDisplay+0x158>)
 8002b92:	f003 fca3 	bl	80064dc <siprintf>
 8002b96:	e00b      	b.n	8002bb0 <updateWatchDisplay+0x7c>
    }
    else
    {
    	sprintf(clcd.str1, "      %04d.%02d.%02d",
    	    	watch.Time.years,
 8002b98:	4b39      	ldr	r3, [pc, #228]	@ (8002c80 <updateWatchDisplay+0x14c>)
 8002b9a:	681a      	ldr	r2, [r3, #0]
    			watch.Time.months,
 8002b9c:	4b38      	ldr	r3, [pc, #224]	@ (8002c80 <updateWatchDisplay+0x14c>)
 8002b9e:	6859      	ldr	r1, [r3, #4]
    			watch.Time.days);
 8002ba0:	4b37      	ldr	r3, [pc, #220]	@ (8002c80 <updateWatchDisplay+0x14c>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
    	sprintf(clcd.str1, "      %04d.%02d.%02d",
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	4939      	ldr	r1, [pc, #228]	@ (8002c90 <updateWatchDisplay+0x15c>)
 8002baa:	4838      	ldr	r0, [pc, #224]	@ (8002c8c <updateWatchDisplay+0x158>)
 8002bac:	f003 fc96 	bl	80064dc <siprintf>
    }

    if (watch.Time.millisecond >= 500)
 8002bb0:	4b33      	ldr	r3, [pc, #204]	@ (8002c80 <updateWatchDisplay+0x14c>)
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002bb8:	db02      	blt.n	8002bc0 <updateWatchDisplay+0x8c>
    {
       colon = " ";  // 콜론을 공백으로 변경
 8002bba:	4b36      	ldr	r3, [pc, #216]	@ (8002c94 <updateWatchDisplay+0x160>)
 8002bbc:	60bb      	str	r3, [r7, #8]
 8002bbe:	e001      	b.n	8002bc4 <updateWatchDisplay+0x90>
    }
    else
    {
        colon = ":";  // 콜론을 표시
 8002bc0:	4b35      	ldr	r3, [pc, #212]	@ (8002c98 <updateWatchDisplay+0x164>)
 8002bc2:	60bb      	str	r3, [r7, #8]
    }


    if (BuzLock == 0)
 8002bc4:	4b35      	ldr	r3, [pc, #212]	@ (8002c9c <updateWatchDisplay+0x168>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	f083 0301 	eor.w	r3, r3, #1
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d002      	beq.n	8002bd8 <updateWatchDisplay+0xa4>
    {
        BuzState = "BZ ON ";
 8002bd2:	4b33      	ldr	r3, [pc, #204]	@ (8002ca0 <updateWatchDisplay+0x16c>)
 8002bd4:	60fb      	str	r3, [r7, #12]
 8002bd6:	e005      	b.n	8002be4 <updateWatchDisplay+0xb0>
    }
    else if(BuzLock == 1)
 8002bd8:	4b30      	ldr	r3, [pc, #192]	@ (8002c9c <updateWatchDisplay+0x168>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <updateWatchDisplay+0xb0>
    {
    	BuzState = "BZ OFF";
 8002be0:	4b30      	ldr	r3, [pc, #192]	@ (8002ca4 <updateWatchDisplay+0x170>)
 8002be2:	60fb      	str	r3, [r7, #12]
    }

    if(watch.WatchMode == MODE_12_HOUR)
 8002be4:	4b26      	ldr	r3, [pc, #152]	@ (8002c80 <updateWatchDisplay+0x14c>)
 8002be6:	7f5b      	ldrb	r3, [r3, #29]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d128      	bne.n	8002c3e <updateWatchDisplay+0x10a>
    {
    	int displayHour = watch.Time.hours;
 8002bec:	4b24      	ldr	r3, [pc, #144]	@ (8002c80 <updateWatchDisplay+0x14c>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	607b      	str	r3, [r7, #4]
    	const char* period = "AM";
 8002bf2:	4b2d      	ldr	r3, [pc, #180]	@ (8002ca8 <updateWatchDisplay+0x174>)
 8002bf4:	603b      	str	r3, [r7, #0]

    	if (displayHour == 0)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d104      	bne.n	8002c06 <updateWatchDisplay+0xd2>
    	{
    	    displayHour = 12; // 0시를 12시로 표시
 8002bfc:	230c      	movs	r3, #12
 8002bfe:	607b      	str	r3, [r7, #4]
    	    period = "AM"; // 자정
 8002c00:	4b29      	ldr	r3, [pc, #164]	@ (8002ca8 <updateWatchDisplay+0x174>)
 8002c02:	603b      	str	r3, [r7, #0]
 8002c04:	e00d      	b.n	8002c22 <updateWatchDisplay+0xee>
    	}
    	else if (displayHour < 12)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b0b      	cmp	r3, #11
 8002c0a:	dc02      	bgt.n	8002c12 <updateWatchDisplay+0xde>
    	{
    	    period = "AM"; // 오전
 8002c0c:	4b26      	ldr	r3, [pc, #152]	@ (8002ca8 <updateWatchDisplay+0x174>)
 8002c0e:	603b      	str	r3, [r7, #0]
 8002c10:	e007      	b.n	8002c22 <updateWatchDisplay+0xee>
    	}
    	else
    	{
    	    period = "PM"; // 오후
 8002c12:	4b26      	ldr	r3, [pc, #152]	@ (8002cac <updateWatchDisplay+0x178>)
 8002c14:	603b      	str	r3, [r7, #0]
    	    if (displayHour > 12)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2b0c      	cmp	r3, #12
 8002c1a:	dd02      	ble.n	8002c22 <updateWatchDisplay+0xee>
    	    {
    	        displayHour -= 12;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3b0c      	subs	r3, #12
 8002c20:	607b      	str	r3, [r7, #4]
    	sprintf(clcd.str2,"%s  %s %02d%s%02d",
    			BuzState,
    			period,
				displayHour,
				colon,
    			watch.Time.minutes);
 8002c22:	4b17      	ldr	r3, [pc, #92]	@ (8002c80 <updateWatchDisplay+0x14c>)
 8002c24:	691b      	ldr	r3, [r3, #16]
    	sprintf(clcd.str2,"%s  %s %02d%s%02d",
 8002c26:	9302      	str	r3, [sp, #8]
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	9301      	str	r3, [sp, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	491e      	ldr	r1, [pc, #120]	@ (8002cb0 <updateWatchDisplay+0x17c>)
 8002c36:	481f      	ldr	r0, [pc, #124]	@ (8002cb4 <updateWatchDisplay+0x180>)
 8002c38:	f003 fc50 	bl	80064dc <siprintf>
 8002c3c:	e010      	b.n	8002c60 <updateWatchDisplay+0x12c>
    }
    else if(watch.WatchMode == MODE_24_HOUR)
 8002c3e:	4b10      	ldr	r3, [pc, #64]	@ (8002c80 <updateWatchDisplay+0x14c>)
 8002c40:	7f5b      	ldrb	r3, [r3, #29]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d10c      	bne.n	8002c60 <updateWatchDisplay+0x12c>
    {
    	sprintf(clcd.str2,"%s     %02d%s%02d",
    			BuzState,
    			watch.Time.hours,
 8002c46:	4b0e      	ldr	r3, [pc, #56]	@ (8002c80 <updateWatchDisplay+0x14c>)
 8002c48:	68da      	ldr	r2, [r3, #12]
				colon,
				watch.Time.minutes
 8002c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c80 <updateWatchDisplay+0x14c>)
 8002c4c:	691b      	ldr	r3, [r3, #16]
    	sprintf(clcd.str2,"%s     %02d%s%02d",
 8002c4e:	9301      	str	r3, [sp, #4]
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	9300      	str	r3, [sp, #0]
 8002c54:	4613      	mov	r3, r2
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	4917      	ldr	r1, [pc, #92]	@ (8002cb8 <updateWatchDisplay+0x184>)
 8002c5a:	4816      	ldr	r0, [pc, #88]	@ (8002cb4 <updateWatchDisplay+0x180>)
 8002c5c:	f003 fc3e 	bl	80064dc <siprintf>
    			);
    }

    CLCD_Puts(0, 0, clcd.str1);
 8002c60:	4a0a      	ldr	r2, [pc, #40]	@ (8002c8c <updateWatchDisplay+0x158>)
 8002c62:	2100      	movs	r1, #0
 8002c64:	2000      	movs	r0, #0
 8002c66:	f7fe fb47 	bl	80012f8 <CLCD_Puts>
    CLCD_Puts(0, 1, clcd.str2);
 8002c6a:	4a12      	ldr	r2, [pc, #72]	@ (8002cb4 <updateWatchDisplay+0x180>)
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	2000      	movs	r0, #0
 8002c70:	f7fe fb42 	bl	80012f8 <CLCD_Puts>

    checkAndRingBuzzer();
 8002c74:	f7fe ffa0 	bl	8001bb8 <checkAndRingBuzzer>
}
 8002c78:	bf00      	nop
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	200001c4 	.word	0x200001c4
 8002c84:	66666667 	.word	0x66666667
 8002c88:	08006eb4 	.word	0x08006eb4
 8002c8c:	20000000 	.word	0x20000000
 8002c90:	08006ecc 	.word	0x08006ecc
 8002c94:	08006ee4 	.word	0x08006ee4
 8002c98:	08006ee8 	.word	0x08006ee8
 8002c9c:	200000e6 	.word	0x200000e6
 8002ca0:	08006eec 	.word	0x08006eec
 8002ca4:	08006ef4 	.word	0x08006ef4
 8002ca8:	08006efc 	.word	0x08006efc
 8002cac:	08006f00 	.word	0x08006f00
 8002cb0:	08006f04 	.word	0x08006f04
 8002cb4:	20000010 	.word	0x20000010
 8002cb8:	08006f18 	.word	0x08006f18

08002cbc <ClockSettingMode>:
//////////////////////////////////////////
//setiing mode///
void ClockSettingMode(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af02      	add	r7, sp, #8
	    // 7SEG
	    _7SEG_SetNumber(DGT1, watch.Time.second / 10, OFF);
 8002cc2:	4b57      	ldr	r3, [pc, #348]	@ (8002e20 <ClockSettingMode+0x164>)
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	4a57      	ldr	r2, [pc, #348]	@ (8002e24 <ClockSettingMode+0x168>)
 8002cc8:	fb82 1203 	smull	r1, r2, r2, r3
 8002ccc:	1092      	asrs	r2, r2, #2
 8002cce:	17db      	asrs	r3, r3, #31
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	2000      	movs	r0, #0
 8002cd8:	f7fd fd28 	bl	800072c <_7SEG_SetNumber>
	    _7SEG_SetNumber(DGT2, watch.Time.second % 10, OFF);
 8002cdc:	4b50      	ldr	r3, [pc, #320]	@ (8002e20 <ClockSettingMode+0x164>)
 8002cde:	695a      	ldr	r2, [r3, #20]
 8002ce0:	4b50      	ldr	r3, [pc, #320]	@ (8002e24 <ClockSettingMode+0x168>)
 8002ce2:	fb83 1302 	smull	r1, r3, r3, r2
 8002ce6:	1099      	asrs	r1, r3, #2
 8002ce8:	17d3      	asrs	r3, r2, #31
 8002cea:	1ac9      	subs	r1, r1, r3
 8002cec:	460b      	mov	r3, r1
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	1ad1      	subs	r1, r2, r3
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	2001      	movs	r0, #1
 8002cfa:	f7fd fd17 	bl	800072c <_7SEG_SetNumber>

	    // CLCD
	    sprintf(watchConfig.watchStrings.second, "%02d", watch.Time.second);
 8002cfe:	4b48      	ldr	r3, [pc, #288]	@ (8002e20 <ClockSettingMode+0x164>)
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	461a      	mov	r2, r3
 8002d04:	4948      	ldr	r1, [pc, #288]	@ (8002e28 <ClockSettingMode+0x16c>)
 8002d06:	4849      	ldr	r0, [pc, #292]	@ (8002e2c <ClockSettingMode+0x170>)
 8002d08:	f003 fbe8 	bl	80064dc <siprintf>
	    sprintf(watchConfig.watchStrings.minute, "%02d", watch.Time.minutes);
 8002d0c:	4b44      	ldr	r3, [pc, #272]	@ (8002e20 <ClockSettingMode+0x164>)
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	461a      	mov	r2, r3
 8002d12:	4945      	ldr	r1, [pc, #276]	@ (8002e28 <ClockSettingMode+0x16c>)
 8002d14:	4846      	ldr	r0, [pc, #280]	@ (8002e30 <ClockSettingMode+0x174>)
 8002d16:	f003 fbe1 	bl	80064dc <siprintf>
	    sprintf(watchConfig.watchStrings.hour, "%02d", watch.Time.hours);
 8002d1a:	4b41      	ldr	r3, [pc, #260]	@ (8002e20 <ClockSettingMode+0x164>)
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	4941      	ldr	r1, [pc, #260]	@ (8002e28 <ClockSettingMode+0x16c>)
 8002d22:	4844      	ldr	r0, [pc, #272]	@ (8002e34 <ClockSettingMode+0x178>)
 8002d24:	f003 fbda 	bl	80064dc <siprintf>
	    sprintf(watchConfig.watchStrings.day, "%02d", watch.Time.days);
 8002d28:	4b3d      	ldr	r3, [pc, #244]	@ (8002e20 <ClockSettingMode+0x164>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	493e      	ldr	r1, [pc, #248]	@ (8002e28 <ClockSettingMode+0x16c>)
 8002d30:	4841      	ldr	r0, [pc, #260]	@ (8002e38 <ClockSettingMode+0x17c>)
 8002d32:	f003 fbd3 	bl	80064dc <siprintf>
	    sprintf(watchConfig.watchStrings.month, "%02d", watch.Time.months);
 8002d36:	4b3a      	ldr	r3, [pc, #232]	@ (8002e20 <ClockSettingMode+0x164>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	493a      	ldr	r1, [pc, #232]	@ (8002e28 <ClockSettingMode+0x16c>)
 8002d3e:	483f      	ldr	r0, [pc, #252]	@ (8002e3c <ClockSettingMode+0x180>)
 8002d40:	f003 fbcc 	bl	80064dc <siprintf>
	    sprintf(watchConfig.watchStrings.year, "%04d", watch.Time.years);
 8002d44:	4b36      	ldr	r3, [pc, #216]	@ (8002e20 <ClockSettingMode+0x164>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	493d      	ldr	r1, [pc, #244]	@ (8002e40 <ClockSettingMode+0x184>)
 8002d4c:	483d      	ldr	r0, [pc, #244]	@ (8002e44 <ClockSettingMode+0x188>)
 8002d4e:	f003 fbc5 	bl	80064dc <siprintf>


	    switch(watchConfig.WatchTime)
 8002d52:	4b3d      	ldr	r3, [pc, #244]	@ (8002e48 <ClockSettingMode+0x18c>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b05      	cmp	r3, #5
 8002d58:	d844      	bhi.n	8002de4 <ClockSettingMode+0x128>
 8002d5a:	a201      	add	r2, pc, #4	@ (adr r2, 8002d60 <ClockSettingMode+0xa4>)
 8002d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d60:	08002d79 	.word	0x08002d79
 8002d64:	08002d8b 	.word	0x08002d8b
 8002d68:	08002d9d 	.word	0x08002d9d
 8002d6c:	08002daf 	.word	0x08002daf
 8002d70:	08002dc1 	.word	0x08002dc1
 8002d74:	08002dd3 	.word	0x08002dd3
	    {
	    case SET_SECOND:
	    	UpdateWatchString(watchConfig.watchStrings.second, watch.Time.second, watch.Time.millisecond);
 8002d78:	4b29      	ldr	r3, [pc, #164]	@ (8002e20 <ClockSettingMode+0x164>)
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	4a28      	ldr	r2, [pc, #160]	@ (8002e20 <ClockSettingMode+0x164>)
 8002d7e:	6992      	ldr	r2, [r2, #24]
 8002d80:	4619      	mov	r1, r3
 8002d82:	482a      	ldr	r0, [pc, #168]	@ (8002e2c <ClockSettingMode+0x170>)
 8002d84:	f000 f86a 	bl	8002e5c <UpdateWatchString>
	    	break;
 8002d88:	e02c      	b.n	8002de4 <ClockSettingMode+0x128>

	    case SET_MINUTE:
	    	UpdateWatchString(watchConfig.watchStrings.minute, watch.Time.minutes, watch.Time.millisecond);
 8002d8a:	4b25      	ldr	r3, [pc, #148]	@ (8002e20 <ClockSettingMode+0x164>)
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	4a24      	ldr	r2, [pc, #144]	@ (8002e20 <ClockSettingMode+0x164>)
 8002d90:	6992      	ldr	r2, [r2, #24]
 8002d92:	4619      	mov	r1, r3
 8002d94:	4826      	ldr	r0, [pc, #152]	@ (8002e30 <ClockSettingMode+0x174>)
 8002d96:	f000 f861 	bl	8002e5c <UpdateWatchString>
	    	break;
 8002d9a:	e023      	b.n	8002de4 <ClockSettingMode+0x128>

	    case SET_HOUR:
	    	UpdateWatchString(watchConfig.watchStrings.hour, watch.Time.hours, watch.Time.millisecond);
 8002d9c:	4b20      	ldr	r3, [pc, #128]	@ (8002e20 <ClockSettingMode+0x164>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	4a1f      	ldr	r2, [pc, #124]	@ (8002e20 <ClockSettingMode+0x164>)
 8002da2:	6992      	ldr	r2, [r2, #24]
 8002da4:	4619      	mov	r1, r3
 8002da6:	4823      	ldr	r0, [pc, #140]	@ (8002e34 <ClockSettingMode+0x178>)
 8002da8:	f000 f858 	bl	8002e5c <UpdateWatchString>
	    	break;
 8002dac:	e01a      	b.n	8002de4 <ClockSettingMode+0x128>

	    case SET_DAY:
	    	UpdateWatchString(watchConfig.watchStrings.day, watch.Time.days, watch.Time.millisecond);
 8002dae:	4b1c      	ldr	r3, [pc, #112]	@ (8002e20 <ClockSettingMode+0x164>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	4a1b      	ldr	r2, [pc, #108]	@ (8002e20 <ClockSettingMode+0x164>)
 8002db4:	6992      	ldr	r2, [r2, #24]
 8002db6:	4619      	mov	r1, r3
 8002db8:	481f      	ldr	r0, [pc, #124]	@ (8002e38 <ClockSettingMode+0x17c>)
 8002dba:	f000 f84f 	bl	8002e5c <UpdateWatchString>
	    	break;
 8002dbe:	e011      	b.n	8002de4 <ClockSettingMode+0x128>

	    case SET_MONTH:
	    	UpdateWatchString(watchConfig.watchStrings.month, watch.Time.months, watch.Time.millisecond);
 8002dc0:	4b17      	ldr	r3, [pc, #92]	@ (8002e20 <ClockSettingMode+0x164>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	4a16      	ldr	r2, [pc, #88]	@ (8002e20 <ClockSettingMode+0x164>)
 8002dc6:	6992      	ldr	r2, [r2, #24]
 8002dc8:	4619      	mov	r1, r3
 8002dca:	481c      	ldr	r0, [pc, #112]	@ (8002e3c <ClockSettingMode+0x180>)
 8002dcc:	f000 f846 	bl	8002e5c <UpdateWatchString>
	    	break;
 8002dd0:	e008      	b.n	8002de4 <ClockSettingMode+0x128>

	    case SET_YEAR:
	    	UpdateWatchString(watchConfig.watchStrings.year, watch.Time.years, watch.Time.millisecond);
 8002dd2:	4b13      	ldr	r3, [pc, #76]	@ (8002e20 <ClockSettingMode+0x164>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a12      	ldr	r2, [pc, #72]	@ (8002e20 <ClockSettingMode+0x164>)
 8002dd8:	6992      	ldr	r2, [r2, #24]
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4819      	ldr	r0, [pc, #100]	@ (8002e44 <ClockSettingMode+0x188>)
 8002dde:	f000 f83d 	bl	8002e5c <UpdateWatchString>
	    	break;
 8002de2:	bf00      	nop
	    }

	    	sprintf(clcd.str1,"CLOCK %s.%s.%s",
 8002de4:	4b14      	ldr	r3, [pc, #80]	@ (8002e38 <ClockSettingMode+0x17c>)
 8002de6:	9300      	str	r3, [sp, #0]
 8002de8:	4b14      	ldr	r3, [pc, #80]	@ (8002e3c <ClockSettingMode+0x180>)
 8002dea:	4a16      	ldr	r2, [pc, #88]	@ (8002e44 <ClockSettingMode+0x188>)
 8002dec:	4917      	ldr	r1, [pc, #92]	@ (8002e4c <ClockSettingMode+0x190>)
 8002dee:	4818      	ldr	r0, [pc, #96]	@ (8002e50 <ClockSettingMode+0x194>)
 8002df0:	f003 fb74 	bl	80064dc <siprintf>
	    			watchConfig.watchStrings.year,
					watchConfig.watchStrings.month,
					watchConfig.watchStrings.day);


	    	sprintf(clcd.str2,"SET     %s:%s:%s",
 8002df4:	4b0d      	ldr	r3, [pc, #52]	@ (8002e2c <ClockSettingMode+0x170>)
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	4b0d      	ldr	r3, [pc, #52]	@ (8002e30 <ClockSettingMode+0x174>)
 8002dfa:	4a0e      	ldr	r2, [pc, #56]	@ (8002e34 <ClockSettingMode+0x178>)
 8002dfc:	4915      	ldr	r1, [pc, #84]	@ (8002e54 <ClockSettingMode+0x198>)
 8002dfe:	4816      	ldr	r0, [pc, #88]	@ (8002e58 <ClockSettingMode+0x19c>)
 8002e00:	f003 fb6c 	bl	80064dc <siprintf>
					watchConfig.watchStrings.minute,
					watchConfig.watchStrings.second);



	    CLCD_Puts(0, 0, clcd.str1);
 8002e04:	4a12      	ldr	r2, [pc, #72]	@ (8002e50 <ClockSettingMode+0x194>)
 8002e06:	2100      	movs	r1, #0
 8002e08:	2000      	movs	r0, #0
 8002e0a:	f7fe fa75 	bl	80012f8 <CLCD_Puts>
	    CLCD_Puts(0, 1, clcd.str2);
 8002e0e:	4a12      	ldr	r2, [pc, #72]	@ (8002e58 <ClockSettingMode+0x19c>)
 8002e10:	2101      	movs	r1, #1
 8002e12:	2000      	movs	r0, #0
 8002e14:	f7fe fa70 	bl	80012f8 <CLCD_Puts>
}
 8002e18:	bf00      	nop
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	200001c4 	.word	0x200001c4
 8002e24:	66666667 	.word	0x66666667
 8002e28:	08006f2c 	.word	0x08006f2c
 8002e2c:	200001e5 	.word	0x200001e5
 8002e30:	200001e8 	.word	0x200001e8
 8002e34:	200001eb 	.word	0x200001eb
 8002e38:	200001ee 	.word	0x200001ee
 8002e3c:	200001f1 	.word	0x200001f1
 8002e40:	08006f34 	.word	0x08006f34
 8002e44:	200001f4 	.word	0x200001f4
 8002e48:	200001e4 	.word	0x200001e4
 8002e4c:	08006f3c 	.word	0x08006f3c
 8002e50:	20000000 	.word	0x20000000
 8002e54:	08006f4c 	.word	0x08006f4c
 8002e58:	20000010 	.word	0x20000010

08002e5c <UpdateWatchString>:

void UpdateWatchString(char* timeString, int timeValue, int milliseconds)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
//    {
//        sprintf(timeString, "%02d", timeValue);
//    }
//    else
//    {
        if (milliseconds >= 500)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002e6e:	db04      	blt.n	8002e7a <UpdateWatchString+0x1e>
        {
            sprintf(timeString, "  ");
 8002e70:	4906      	ldr	r1, [pc, #24]	@ (8002e8c <UpdateWatchString+0x30>)
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f003 fb32 	bl	80064dc <siprintf>
        else
        {
            sprintf(timeString, "%02d", timeValue);
        }
    //}
}
 8002e78:	e004      	b.n	8002e84 <UpdateWatchString+0x28>
            sprintf(timeString, "%02d", timeValue);
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	4904      	ldr	r1, [pc, #16]	@ (8002e90 <UpdateWatchString+0x34>)
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f003 fb2c 	bl	80064dc <siprintf>
}
 8002e84:	bf00      	nop
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	08006f60 	.word	0x08006f60
 8002e90:	08006f2c 	.word	0x08006f2c

08002e94 <IncreaseTimeOnce>:


void IncreaseTimeOnce(void)
{
 8002e94:	b590      	push	{r4, r7, lr}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
		switch (watchConfig.WatchTime)
 8002e9a:	4b62      	ldr	r3, [pc, #392]	@ (8003024 <IncreaseTimeOnce+0x190>)
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	2b05      	cmp	r3, #5
 8002ea0:	d87b      	bhi.n	8002f9a <IncreaseTimeOnce+0x106>
 8002ea2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ea8 <IncreaseTimeOnce+0x14>)
 8002ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea8:	08002ec1 	.word	0x08002ec1
 8002eac:	08002ee1 	.word	0x08002ee1
 8002eb0:	08002f01 	.word	0x08002f01
 8002eb4:	08002f21 	.word	0x08002f21
 8002eb8:	08002f49 	.word	0x08002f49
 8002ebc:	08002f69 	.word	0x08002f69
		{
		case SET_SECOND:
			if (++watch.Time.second == 59)
 8002ec0:	4b59      	ldr	r3, [pc, #356]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	4a58      	ldr	r2, [pc, #352]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8002ec8:	6153      	str	r3, [r2, #20]
 8002eca:	2b3b      	cmp	r3, #59	@ 0x3b
 8002ecc:	d15a      	bne.n	8002f84 <IncreaseTimeOnce+0xf0>
			{
				watch.Time.second = 0;
 8002ece:	4b56      	ldr	r3, [pc, #344]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	615a      	str	r2, [r3, #20]
				watch.Time.minutes++;
 8002ed4:	4b54      	ldr	r3, [pc, #336]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	4a53      	ldr	r2, [pc, #332]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8002edc:	6113      	str	r3, [r2, #16]
			}
			break;
 8002ede:	e051      	b.n	8002f84 <IncreaseTimeOnce+0xf0>

		case SET_MINUTE:
			if (++watch.Time.minutes == 59)
 8002ee0:	4b51      	ldr	r3, [pc, #324]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	4a50      	ldr	r2, [pc, #320]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8002ee8:	6113      	str	r3, [r2, #16]
 8002eea:	2b3b      	cmp	r3, #59	@ 0x3b
 8002eec:	d14c      	bne.n	8002f88 <IncreaseTimeOnce+0xf4>
			{
				watch.Time.minutes = 0;
 8002eee:	4b4e      	ldr	r3, [pc, #312]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	611a      	str	r2, [r3, #16]
				watch.Time.hours++;
 8002ef4:	4b4c      	ldr	r3, [pc, #304]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	4a4b      	ldr	r2, [pc, #300]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8002efc:	60d3      	str	r3, [r2, #12]
			}
			break;
 8002efe:	e043      	b.n	8002f88 <IncreaseTimeOnce+0xf4>

		case SET_HOUR:
			if (++watch.Time.hours == 23)
 8002f00:	4b49      	ldr	r3, [pc, #292]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	3301      	adds	r3, #1
 8002f06:	4a48      	ldr	r2, [pc, #288]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8002f08:	60d3      	str	r3, [r2, #12]
 8002f0a:	2b17      	cmp	r3, #23
 8002f0c:	d13e      	bne.n	8002f8c <IncreaseTimeOnce+0xf8>
			{
				watch.Time.hours = 0;
 8002f0e:	4b46      	ldr	r3, [pc, #280]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	60da      	str	r2, [r3, #12]
				watch.Time.days++;
 8002f14:	4b44      	ldr	r3, [pc, #272]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	4a43      	ldr	r2, [pc, #268]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8002f1c:	6093      	str	r3, [r2, #8]
			}
			break;
 8002f1e:	e035      	b.n	8002f8c <IncreaseTimeOnce+0xf8>

		case SET_DAY:
			if (++watch.Time.days == getDaysInMonth(&watch))
 8002f20:	4b41      	ldr	r3, [pc, #260]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	1c5c      	adds	r4, r3, #1
 8002f26:	4b40      	ldr	r3, [pc, #256]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8002f28:	609c      	str	r4, [r3, #8]
 8002f2a:	483f      	ldr	r0, [pc, #252]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8002f2c:	f7ff fd58 	bl	80029e0 <getDaysInMonth>
 8002f30:	4603      	mov	r3, r0
 8002f32:	429c      	cmp	r4, r3
 8002f34:	d12c      	bne.n	8002f90 <IncreaseTimeOnce+0xfc>
			{
				watch.Time.days = 1;
 8002f36:	4b3c      	ldr	r3, [pc, #240]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8002f38:	2201      	movs	r2, #1
 8002f3a:	609a      	str	r2, [r3, #8]
				watch.Time.months++;
 8002f3c:	4b3a      	ldr	r3, [pc, #232]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	3301      	adds	r3, #1
 8002f42:	4a39      	ldr	r2, [pc, #228]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8002f44:	6053      	str	r3, [r2, #4]
			}
			break;
 8002f46:	e023      	b.n	8002f90 <IncreaseTimeOnce+0xfc>

		case SET_MONTH:
			if (++watch.Time.months == 12)
 8002f48:	4b37      	ldr	r3, [pc, #220]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	4a36      	ldr	r2, [pc, #216]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8002f50:	6053      	str	r3, [r2, #4]
 8002f52:	2b0c      	cmp	r3, #12
 8002f54:	d11e      	bne.n	8002f94 <IncreaseTimeOnce+0x100>
			{
				watch.Time.months = 1;
 8002f56:	4b34      	ldr	r3, [pc, #208]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8002f58:	2201      	movs	r2, #1
 8002f5a:	605a      	str	r2, [r3, #4]
				watch.Time.years++;
 8002f5c:	4b32      	ldr	r3, [pc, #200]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	3301      	adds	r3, #1
 8002f62:	4a31      	ldr	r2, [pc, #196]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8002f64:	6013      	str	r3, [r2, #0]
			}
			break;
 8002f66:	e015      	b.n	8002f94 <IncreaseTimeOnce+0x100>

		case SET_YEAR:
			if (++watch.Time.years == 3000)
 8002f68:	4b2f      	ldr	r3, [pc, #188]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	4a2e      	ldr	r2, [pc, #184]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8002f70:	6013      	str	r3, [r2, #0]
 8002f72:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d10e      	bne.n	8002f98 <IncreaseTimeOnce+0x104>
			{
				watch.Time.years = 1900;
 8002f7a:	4b2b      	ldr	r3, [pc, #172]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8002f7c:	f240 726c 	movw	r2, #1900	@ 0x76c
 8002f80:	601a      	str	r2, [r3, #0]
			}
			break;
 8002f82:	e009      	b.n	8002f98 <IncreaseTimeOnce+0x104>
			break;
 8002f84:	bf00      	nop
 8002f86:	e008      	b.n	8002f9a <IncreaseTimeOnce+0x106>
			break;
 8002f88:	bf00      	nop
 8002f8a:	e006      	b.n	8002f9a <IncreaseTimeOnce+0x106>
			break;
 8002f8c:	bf00      	nop
 8002f8e:	e004      	b.n	8002f9a <IncreaseTimeOnce+0x106>
			break;
 8002f90:	bf00      	nop
 8002f92:	e002      	b.n	8002f9a <IncreaseTimeOnce+0x106>
			break;
 8002f94:	bf00      	nop
 8002f96:	e000      	b.n	8002f9a <IncreaseTimeOnce+0x106>
			break;
 8002f98:	bf00      	nop
		}

		// 최대일수 다시 구함
		int maxDays = getDaysInMonth(&watch);
 8002f9a:	4823      	ldr	r0, [pc, #140]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8002f9c:	f7ff fd20 	bl	80029e0 <getDaysInMonth>
 8002fa0:	6078      	str	r0, [r7, #4]

		if (watch.Time.days > maxDays)
 8002fa2:	4b21      	ldr	r3, [pc, #132]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	da02      	bge.n	8002fb2 <IncreaseTimeOnce+0x11e>
		{
			watch.Time.days = maxDays;
 8002fac:	4a1e      	ldr	r2, [pc, #120]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6093      	str	r3, [r2, #8]
		}

		// 추가적인 오버플로 처리
		if (watch.Time.minutes >= 60)
 8002fb2:	4b1d      	ldr	r3, [pc, #116]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	2b3b      	cmp	r3, #59	@ 0x3b
 8002fb8:	dd07      	ble.n	8002fca <IncreaseTimeOnce+0x136>
		{
			watch.Time.minutes = 0;
 8002fba:	4b1b      	ldr	r3, [pc, #108]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	611a      	str	r2, [r3, #16]
			watch.Time.hours++;
 8002fc0:	4b19      	ldr	r3, [pc, #100]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	4a18      	ldr	r2, [pc, #96]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8002fc8:	60d3      	str	r3, [r2, #12]
		}
		if (watch.Time.hours >= 24)
 8002fca:	4b17      	ldr	r3, [pc, #92]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	2b17      	cmp	r3, #23
 8002fd0:	dd07      	ble.n	8002fe2 <IncreaseTimeOnce+0x14e>
		{
			watch.Time.hours = 0;
 8002fd2:	4b15      	ldr	r3, [pc, #84]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	60da      	str	r2, [r3, #12]
			watch.Time.days++;
 8002fd8:	4b13      	ldr	r3, [pc, #76]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	4a12      	ldr	r2, [pc, #72]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8002fe0:	6093      	str	r3, [r2, #8]
		}
		if (watch.Time.days > getDaysInMonth(&watch))
 8002fe2:	4b11      	ldr	r3, [pc, #68]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8002fe4:	689c      	ldr	r4, [r3, #8]
 8002fe6:	4810      	ldr	r0, [pc, #64]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8002fe8:	f7ff fcfa 	bl	80029e0 <getDaysInMonth>
 8002fec:	4603      	mov	r3, r0
 8002fee:	429c      	cmp	r4, r3
 8002ff0:	dd07      	ble.n	8003002 <IncreaseTimeOnce+0x16e>
		{
			watch.Time.days = 1;
 8002ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	609a      	str	r2, [r3, #8]
			watch.Time.months++;
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8003000:	6053      	str	r3, [r2, #4]
		}
		if (watch.Time.months > 12)
 8003002:	4b09      	ldr	r3, [pc, #36]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2b0c      	cmp	r3, #12
 8003008:	dd07      	ble.n	800301a <IncreaseTimeOnce+0x186>
		{
			watch.Time.months = 1;
 800300a:	4b07      	ldr	r3, [pc, #28]	@ (8003028 <IncreaseTimeOnce+0x194>)
 800300c:	2201      	movs	r2, #1
 800300e:	605a      	str	r2, [r3, #4]
			watch.Time.years++;
 8003010:	4b05      	ldr	r3, [pc, #20]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	3301      	adds	r3, #1
 8003016:	4a04      	ldr	r2, [pc, #16]	@ (8003028 <IncreaseTimeOnce+0x194>)
 8003018:	6013      	str	r3, [r2, #0]
		}
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	bd90      	pop	{r4, r7, pc}
 8003022:	bf00      	nop
 8003024:	200001e4 	.word	0x200001e4
 8003028:	200001c4 	.word	0x200001c4

0800302c <IncreaseTime>:
void IncreaseTime(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
	if (Btn3.state == Pressing && watchConfig.SubMode == WATCH_CLOCK_SETTING)
 8003030:	4b1c      	ldr	r3, [pc, #112]	@ (80030a4 <IncreaseTime+0x78>)
 8003032:	799b      	ldrb	r3, [r3, #6]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d12f      	bne.n	8003098 <IncreaseTime+0x6c>
 8003038:	4b1b      	ldr	r3, [pc, #108]	@ (80030a8 <IncreaseTime+0x7c>)
 800303a:	7d5b      	ldrb	r3, [r3, #21]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d12b      	bne.n	8003098 <IncreaseTime+0x6c>
	{
		switch (Btn3.holdTime)
 8003040:	4b18      	ldr	r3, [pc, #96]	@ (80030a4 <IncreaseTime+0x78>)
 8003042:	7a1b      	ldrb	r3, [r3, #8]
 8003044:	2b02      	cmp	r3, #2
 8003046:	d002      	beq.n	800304e <IncreaseTime+0x22>
 8003048:	2b03      	cmp	r3, #3
 800304a:	d011      	beq.n	8003070 <IncreaseTime+0x44>
				watchConfig.flags.increaseFlag20ms = 1;
			}
			break;
		}
	}
}
 800304c:	e024      	b.n	8003098 <IncreaseTime+0x6c>
			Btn3.SettingModeCount++;
 800304e:	4b15      	ldr	r3, [pc, #84]	@ (80030a4 <IncreaseTime+0x78>)
 8003050:	791b      	ldrb	r3, [r3, #4]
 8003052:	3301      	adds	r3, #1
 8003054:	b2da      	uxtb	r2, r3
 8003056:	4b13      	ldr	r3, [pc, #76]	@ (80030a4 <IncreaseTime+0x78>)
 8003058:	711a      	strb	r2, [r3, #4]
			if (Btn3.SettingModeCount > 150)
 800305a:	4b12      	ldr	r3, [pc, #72]	@ (80030a4 <IncreaseTime+0x78>)
 800305c:	791b      	ldrb	r3, [r3, #4]
 800305e:	2b96      	cmp	r3, #150	@ 0x96
 8003060:	d917      	bls.n	8003092 <IncreaseTime+0x66>
				Btn3.SettingModeCount = 0;
 8003062:	4b10      	ldr	r3, [pc, #64]	@ (80030a4 <IncreaseTime+0x78>)
 8003064:	2200      	movs	r2, #0
 8003066:	711a      	strb	r2, [r3, #4]
				watchConfig.flags.increaseFlag150ms = 1;
 8003068:	4b0f      	ldr	r3, [pc, #60]	@ (80030a8 <IncreaseTime+0x7c>)
 800306a:	2201      	movs	r2, #1
 800306c:	765a      	strb	r2, [r3, #25]
			break;
 800306e:	e010      	b.n	8003092 <IncreaseTime+0x66>
			Btn3.SettingModeCount++;
 8003070:	4b0c      	ldr	r3, [pc, #48]	@ (80030a4 <IncreaseTime+0x78>)
 8003072:	791b      	ldrb	r3, [r3, #4]
 8003074:	3301      	adds	r3, #1
 8003076:	b2da      	uxtb	r2, r3
 8003078:	4b0a      	ldr	r3, [pc, #40]	@ (80030a4 <IncreaseTime+0x78>)
 800307a:	711a      	strb	r2, [r3, #4]
			if (Btn3.SettingModeCount > 20)
 800307c:	4b09      	ldr	r3, [pc, #36]	@ (80030a4 <IncreaseTime+0x78>)
 800307e:	791b      	ldrb	r3, [r3, #4]
 8003080:	2b14      	cmp	r3, #20
 8003082:	d908      	bls.n	8003096 <IncreaseTime+0x6a>
				Btn3.SettingModeCount = 0;
 8003084:	4b07      	ldr	r3, [pc, #28]	@ (80030a4 <IncreaseTime+0x78>)
 8003086:	2200      	movs	r2, #0
 8003088:	711a      	strb	r2, [r3, #4]
				watchConfig.flags.increaseFlag20ms = 1;
 800308a:	4b07      	ldr	r3, [pc, #28]	@ (80030a8 <IncreaseTime+0x7c>)
 800308c:	2201      	movs	r2, #1
 800308e:	76da      	strb	r2, [r3, #27]
			break;
 8003090:	e001      	b.n	8003096 <IncreaseTime+0x6a>
			break;
 8003092:	bf00      	nop
 8003094:	e000      	b.n	8003098 <IncreaseTime+0x6c>
			break;
 8003096:	bf00      	nop
}
 8003098:	bf00      	nop
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	200000c4 	.word	0x200000c4
 80030a8:	200001e4 	.word	0x200001e4

080030ac <DecreaseTimeOnce>:
void DecreaseTimeOnce(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
	switch (watchConfig.WatchTime)
 80030b2:	4b64      	ldr	r3, [pc, #400]	@ (8003244 <DecreaseTimeOnce+0x198>)
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	2b05      	cmp	r3, #5
 80030b8:	d877      	bhi.n	80031aa <DecreaseTimeOnce+0xfe>
 80030ba:	a201      	add	r2, pc, #4	@ (adr r2, 80030c0 <DecreaseTimeOnce+0x14>)
 80030bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c0:	080030d9 	.word	0x080030d9
 80030c4:	080030f9 	.word	0x080030f9
 80030c8:	08003119 	.word	0x08003119
 80030cc:	08003139 	.word	0x08003139
 80030d0:	08003159 	.word	0x08003159
 80030d4:	08003179 	.word	0x08003179
	{
	case SET_SECOND:
		if (--watch.Time.second < 0)
 80030d8:	4b5b      	ldr	r3, [pc, #364]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	3b01      	subs	r3, #1
 80030de:	4a5a      	ldr	r2, [pc, #360]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 80030e0:	6153      	str	r3, [r2, #20]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	da56      	bge.n	8003194 <DecreaseTimeOnce+0xe8>
		{
			watch.Time.second = 59;
 80030e6:	4b58      	ldr	r3, [pc, #352]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 80030e8:	223b      	movs	r2, #59	@ 0x3b
 80030ea:	615a      	str	r2, [r3, #20]
			watch.Time.minutes--;
 80030ec:	4b56      	ldr	r3, [pc, #344]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	3b01      	subs	r3, #1
 80030f2:	4a55      	ldr	r2, [pc, #340]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 80030f4:	6113      	str	r3, [r2, #16]
		}

		break;
 80030f6:	e04d      	b.n	8003194 <DecreaseTimeOnce+0xe8>

	case SET_MINUTE:
		if (--watch.Time.minutes < 0)
 80030f8:	4b53      	ldr	r3, [pc, #332]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	3b01      	subs	r3, #1
 80030fe:	4a52      	ldr	r2, [pc, #328]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 8003100:	6113      	str	r3, [r2, #16]
 8003102:	2b00      	cmp	r3, #0
 8003104:	da48      	bge.n	8003198 <DecreaseTimeOnce+0xec>
		{
			watch.Time.minutes = 59;
 8003106:	4b50      	ldr	r3, [pc, #320]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 8003108:	223b      	movs	r2, #59	@ 0x3b
 800310a:	611a      	str	r2, [r3, #16]
			watch.Time.hours--;
 800310c:	4b4e      	ldr	r3, [pc, #312]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	3b01      	subs	r3, #1
 8003112:	4a4d      	ldr	r2, [pc, #308]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 8003114:	60d3      	str	r3, [r2, #12]
		}

		break;
 8003116:	e03f      	b.n	8003198 <DecreaseTimeOnce+0xec>

	case SET_HOUR:
		if (--watch.Time.hours < 0)
 8003118:	4b4b      	ldr	r3, [pc, #300]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	3b01      	subs	r3, #1
 800311e:	4a4a      	ldr	r2, [pc, #296]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 8003120:	60d3      	str	r3, [r2, #12]
 8003122:	2b00      	cmp	r3, #0
 8003124:	da3a      	bge.n	800319c <DecreaseTimeOnce+0xf0>
		{
			watch.Time.hours = 23;
 8003126:	4b48      	ldr	r3, [pc, #288]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 8003128:	2217      	movs	r2, #23
 800312a:	60da      	str	r2, [r3, #12]
			watch.Time.days--;
 800312c:	4b46      	ldr	r3, [pc, #280]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	3b01      	subs	r3, #1
 8003132:	4a45      	ldr	r2, [pc, #276]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 8003134:	6093      	str	r3, [r2, #8]
		}
		break;
 8003136:	e031      	b.n	800319c <DecreaseTimeOnce+0xf0>

	case SET_DAY:
		if (watch.Time.days < 1)
 8003138:	4b43      	ldr	r3, [pc, #268]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	2b00      	cmp	r3, #0
 800313e:	dc2f      	bgt.n	80031a0 <DecreaseTimeOnce+0xf4>
		{
			watch.Time.days = getDaysInMonth(&watch);
 8003140:	4841      	ldr	r0, [pc, #260]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 8003142:	f7ff fc4d 	bl	80029e0 <getDaysInMonth>
 8003146:	4603      	mov	r3, r0
 8003148:	4a3f      	ldr	r2, [pc, #252]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 800314a:	6093      	str	r3, [r2, #8]
			watch.Time.months--;
 800314c:	4b3e      	ldr	r3, [pc, #248]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	3b01      	subs	r3, #1
 8003152:	4a3d      	ldr	r2, [pc, #244]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 8003154:	6053      	str	r3, [r2, #4]
		}

		break;
 8003156:	e023      	b.n	80031a0 <DecreaseTimeOnce+0xf4>

	case SET_MONTH:
		if (--watch.Time.months < 1)
 8003158:	4b3b      	ldr	r3, [pc, #236]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	3b01      	subs	r3, #1
 800315e:	4a3a      	ldr	r2, [pc, #232]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 8003160:	6053      	str	r3, [r2, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	dc1e      	bgt.n	80031a4 <DecreaseTimeOnce+0xf8>
		{
			watch.Time.months = 12;
 8003166:	4b38      	ldr	r3, [pc, #224]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 8003168:	220c      	movs	r2, #12
 800316a:	605a      	str	r2, [r3, #4]
			watch.Time.years--;
 800316c:	4b36      	ldr	r3, [pc, #216]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	3b01      	subs	r3, #1
 8003172:	4a35      	ldr	r2, [pc, #212]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 8003174:	6013      	str	r3, [r2, #0]
		}
		break;
 8003176:	e015      	b.n	80031a4 <DecreaseTimeOnce+0xf8>

	case SET_YEAR:
		if (--watch.Time.years < 1900)
 8003178:	4b33      	ldr	r3, [pc, #204]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	3b01      	subs	r3, #1
 800317e:	4a32      	ldr	r2, [pc, #200]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 8003180:	6013      	str	r3, [r2, #0]
 8003182:	f240 726b 	movw	r2, #1899	@ 0x76b
 8003186:	4293      	cmp	r3, r2
 8003188:	dc0e      	bgt.n	80031a8 <DecreaseTimeOnce+0xfc>
		{
			watch.Time.years = 3000;
 800318a:	4b2f      	ldr	r3, [pc, #188]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 800318c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003190:	601a      	str	r2, [r3, #0]
		}
		break;
 8003192:	e009      	b.n	80031a8 <DecreaseTimeOnce+0xfc>
		break;
 8003194:	bf00      	nop
 8003196:	e008      	b.n	80031aa <DecreaseTimeOnce+0xfe>
		break;
 8003198:	bf00      	nop
 800319a:	e006      	b.n	80031aa <DecreaseTimeOnce+0xfe>
		break;
 800319c:	bf00      	nop
 800319e:	e004      	b.n	80031aa <DecreaseTimeOnce+0xfe>
		break;
 80031a0:	bf00      	nop
 80031a2:	e002      	b.n	80031aa <DecreaseTimeOnce+0xfe>
		break;
 80031a4:	bf00      	nop
 80031a6:	e000      	b.n	80031aa <DecreaseTimeOnce+0xfe>
		break;
 80031a8:	bf00      	nop
	}
		///////
		int maxDays = getDaysInMonth(&watch);
 80031aa:	4827      	ldr	r0, [pc, #156]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 80031ac:	f7ff fc18 	bl	80029e0 <getDaysInMonth>
 80031b0:	6078      	str	r0, [r7, #4]

		if (watch.Time.days > maxDays)
 80031b2:	4b25      	ldr	r3, [pc, #148]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	da02      	bge.n	80031c2 <DecreaseTimeOnce+0x116>
		{
			watch.Time.days = maxDays;
 80031bc:	4a22      	ldr	r2, [pc, #136]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6093      	str	r3, [r2, #8]
		}
		///// underflow
		if (watch.Time.minutes < 0)
 80031c2:	4b21      	ldr	r3, [pc, #132]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	da07      	bge.n	80031da <DecreaseTimeOnce+0x12e>
		{
			watch.Time.minutes = 59;
 80031ca:	4b1f      	ldr	r3, [pc, #124]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 80031cc:	223b      	movs	r2, #59	@ 0x3b
 80031ce:	611a      	str	r2, [r3, #16]
			watch.Time.hours--;
 80031d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	3b01      	subs	r3, #1
 80031d6:	4a1c      	ldr	r2, [pc, #112]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 80031d8:	60d3      	str	r3, [r2, #12]
		}
		if (watch.Time.hours < 0)
 80031da:	4b1b      	ldr	r3, [pc, #108]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	da07      	bge.n	80031f2 <DecreaseTimeOnce+0x146>
		{
			watch.Time.hours = 23;
 80031e2:	4b19      	ldr	r3, [pc, #100]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 80031e4:	2217      	movs	r2, #23
 80031e6:	60da      	str	r2, [r3, #12]
			watch.Time.days--;
 80031e8:	4b17      	ldr	r3, [pc, #92]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	3b01      	subs	r3, #1
 80031ee:	4a16      	ldr	r2, [pc, #88]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 80031f0:	6093      	str	r3, [r2, #8]
		}
		if (watch.Time.days < 1)
 80031f2:	4b15      	ldr	r3, [pc, #84]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	dc0a      	bgt.n	8003210 <DecreaseTimeOnce+0x164>
		{
			watch.Time.months--;
 80031fa:	4b13      	ldr	r3, [pc, #76]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	3b01      	subs	r3, #1
 8003200:	4a11      	ldr	r2, [pc, #68]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 8003202:	6053      	str	r3, [r2, #4]
			watch.Time.days = getDaysInMonth(&watch);
 8003204:	4810      	ldr	r0, [pc, #64]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 8003206:	f7ff fbeb 	bl	80029e0 <getDaysInMonth>
 800320a:	4603      	mov	r3, r0
 800320c:	4a0e      	ldr	r2, [pc, #56]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 800320e:	6093      	str	r3, [r2, #8]
		}
		if (watch.Time.months < 1)
 8003210:	4b0d      	ldr	r3, [pc, #52]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	dc07      	bgt.n	8003228 <DecreaseTimeOnce+0x17c>
		{
			watch.Time.months = 12;
 8003218:	4b0b      	ldr	r3, [pc, #44]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 800321a:	220c      	movs	r2, #12
 800321c:	605a      	str	r2, [r3, #4]
			watch.Time.years--;
 800321e:	4b0a      	ldr	r3, [pc, #40]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	3b01      	subs	r3, #1
 8003224:	4a08      	ldr	r2, [pc, #32]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 8003226:	6013      	str	r3, [r2, #0]
		}
		if (watch.Time.years < 1900)
 8003228:	4b07      	ldr	r3, [pc, #28]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f240 726b 	movw	r2, #1899	@ 0x76b
 8003230:	4293      	cmp	r3, r2
 8003232:	dc03      	bgt.n	800323c <DecreaseTimeOnce+0x190>
		{
			watch.Time.years = 3000;
 8003234:	4b04      	ldr	r3, [pc, #16]	@ (8003248 <DecreaseTimeOnce+0x19c>)
 8003236:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800323a:	601a      	str	r2, [r3, #0]
		}
}
 800323c:	bf00      	nop
 800323e:	3708      	adds	r7, #8
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	200001e4 	.word	0x200001e4
 8003248:	200001c4 	.word	0x200001c4

0800324c <DecreaseTime>:
void DecreaseTime(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
	if (Btn4.state == Pressing && watchConfig.SubMode == WATCH_CLOCK_SETTING)
 8003250:	4b1c      	ldr	r3, [pc, #112]	@ (80032c4 <DecreaseTime+0x78>)
 8003252:	799b      	ldrb	r3, [r3, #6]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d12f      	bne.n	80032b8 <DecreaseTime+0x6c>
 8003258:	4b1b      	ldr	r3, [pc, #108]	@ (80032c8 <DecreaseTime+0x7c>)
 800325a:	7d5b      	ldrb	r3, [r3, #21]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d12b      	bne.n	80032b8 <DecreaseTime+0x6c>
	{
		switch (Btn4.holdTime)
 8003260:	4b18      	ldr	r3, [pc, #96]	@ (80032c4 <DecreaseTime+0x78>)
 8003262:	7a1b      	ldrb	r3, [r3, #8]
 8003264:	2b02      	cmp	r3, #2
 8003266:	d002      	beq.n	800326e <DecreaseTime+0x22>
 8003268:	2b03      	cmp	r3, #3
 800326a:	d011      	beq.n	8003290 <DecreaseTime+0x44>
				watchConfig.flags.decreaseFlag20ms = 1;
			}
			break;
		}
	}
}
 800326c:	e024      	b.n	80032b8 <DecreaseTime+0x6c>
			Btn4.SettingModeCount++;
 800326e:	4b15      	ldr	r3, [pc, #84]	@ (80032c4 <DecreaseTime+0x78>)
 8003270:	791b      	ldrb	r3, [r3, #4]
 8003272:	3301      	adds	r3, #1
 8003274:	b2da      	uxtb	r2, r3
 8003276:	4b13      	ldr	r3, [pc, #76]	@ (80032c4 <DecreaseTime+0x78>)
 8003278:	711a      	strb	r2, [r3, #4]
			if (Btn4.SettingModeCount > 150) {
 800327a:	4b12      	ldr	r3, [pc, #72]	@ (80032c4 <DecreaseTime+0x78>)
 800327c:	791b      	ldrb	r3, [r3, #4]
 800327e:	2b96      	cmp	r3, #150	@ 0x96
 8003280:	d917      	bls.n	80032b2 <DecreaseTime+0x66>
				Btn4.SettingModeCount = 0;
 8003282:	4b10      	ldr	r3, [pc, #64]	@ (80032c4 <DecreaseTime+0x78>)
 8003284:	2200      	movs	r2, #0
 8003286:	711a      	strb	r2, [r3, #4]
				watchConfig.flags.decreaseFlag150ms = 1;
 8003288:	4b0f      	ldr	r3, [pc, #60]	@ (80032c8 <DecreaseTime+0x7c>)
 800328a:	2201      	movs	r2, #1
 800328c:	769a      	strb	r2, [r3, #26]
			break;
 800328e:	e010      	b.n	80032b2 <DecreaseTime+0x66>
			Btn4.SettingModeCount++;
 8003290:	4b0c      	ldr	r3, [pc, #48]	@ (80032c4 <DecreaseTime+0x78>)
 8003292:	791b      	ldrb	r3, [r3, #4]
 8003294:	3301      	adds	r3, #1
 8003296:	b2da      	uxtb	r2, r3
 8003298:	4b0a      	ldr	r3, [pc, #40]	@ (80032c4 <DecreaseTime+0x78>)
 800329a:	711a      	strb	r2, [r3, #4]
			if (Btn4.SettingModeCount > 20)
 800329c:	4b09      	ldr	r3, [pc, #36]	@ (80032c4 <DecreaseTime+0x78>)
 800329e:	791b      	ldrb	r3, [r3, #4]
 80032a0:	2b14      	cmp	r3, #20
 80032a2:	d908      	bls.n	80032b6 <DecreaseTime+0x6a>
				Btn4.SettingModeCount = 0;
 80032a4:	4b07      	ldr	r3, [pc, #28]	@ (80032c4 <DecreaseTime+0x78>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	711a      	strb	r2, [r3, #4]
				watchConfig.flags.decreaseFlag20ms = 1;
 80032aa:	4b07      	ldr	r3, [pc, #28]	@ (80032c8 <DecreaseTime+0x7c>)
 80032ac:	2201      	movs	r2, #1
 80032ae:	771a      	strb	r2, [r3, #28]
			break;
 80032b0:	e001      	b.n	80032b6 <DecreaseTime+0x6a>
			break;
 80032b2:	bf00      	nop
 80032b4:	e000      	b.n	80032b8 <DecreaseTime+0x6c>
			break;
 80032b6:	bf00      	nop
}
 80032b8:	bf00      	nop
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	200000d0 	.word	0x200000d0
 80032c8:	200001e4 	.word	0x200001e4

080032cc <AreAllButtonsIdle>:
bool AreAllButtonsIdle() {
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
    return (Btn1.state == Idle && Btn2.state == Idle && Btn3.state == Idle && Btn4.state == Idle && watchConfig.SubMode == WATCH_CLOCK_SETTING);
 80032d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003310 <AreAllButtonsIdle+0x44>)
 80032d2:	799b      	ldrb	r3, [r3, #6]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d111      	bne.n	80032fc <AreAllButtonsIdle+0x30>
 80032d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003314 <AreAllButtonsIdle+0x48>)
 80032da:	799b      	ldrb	r3, [r3, #6]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10d      	bne.n	80032fc <AreAllButtonsIdle+0x30>
 80032e0:	4b0d      	ldr	r3, [pc, #52]	@ (8003318 <AreAllButtonsIdle+0x4c>)
 80032e2:	799b      	ldrb	r3, [r3, #6]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d109      	bne.n	80032fc <AreAllButtonsIdle+0x30>
 80032e8:	4b0c      	ldr	r3, [pc, #48]	@ (800331c <AreAllButtonsIdle+0x50>)
 80032ea:	799b      	ldrb	r3, [r3, #6]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d105      	bne.n	80032fc <AreAllButtonsIdle+0x30>
 80032f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003320 <AreAllButtonsIdle+0x54>)
 80032f2:	7d5b      	ldrb	r3, [r3, #21]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d101      	bne.n	80032fc <AreAllButtonsIdle+0x30>
 80032f8:	2301      	movs	r3, #1
 80032fa:	e000      	b.n	80032fe <AreAllButtonsIdle+0x32>
 80032fc:	2300      	movs	r3, #0
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	b2db      	uxtb	r3, r3
}
 8003304:	4618      	mov	r0, r3
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	200000ac 	.word	0x200000ac
 8003314:	200000b8 	.word	0x200000b8
 8003318:	200000c4 	.word	0x200000c4
 800331c:	200000d0 	.word	0x200000d0
 8003320:	200001e4 	.word	0x200001e4

08003324 <AutoSwitchToWatchMode>:

void AutoSwitchToWatchMode()
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
	if(AreAllButtonsIdle())
 8003328:	f7ff ffd0 	bl	80032cc <AreAllButtonsIdle>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d006      	beq.n	8003340 <AutoSwitchToWatchMode+0x1c>
	{
		watchConfig.IdleTimer ++;
 8003332:	4b0c      	ldr	r3, [pc, #48]	@ (8003364 <AutoSwitchToWatchMode+0x40>)
 8003334:	8bdb      	ldrh	r3, [r3, #30]
 8003336:	3301      	adds	r3, #1
 8003338:	b29a      	uxth	r2, r3
 800333a:	4b0a      	ldr	r3, [pc, #40]	@ (8003364 <AutoSwitchToWatchMode+0x40>)
 800333c:	83da      	strh	r2, [r3, #30]
 800333e:	e002      	b.n	8003346 <AutoSwitchToWatchMode+0x22>
	}
	else
	{
		watchConfig.IdleTimer  = 0;
 8003340:	4b08      	ldr	r3, [pc, #32]	@ (8003364 <AutoSwitchToWatchMode+0x40>)
 8003342:	2200      	movs	r2, #0
 8003344:	83da      	strh	r2, [r3, #30]
	}

	if(watchConfig.IdleTimer > 30*1000)
 8003346:	4b07      	ldr	r3, [pc, #28]	@ (8003364 <AutoSwitchToWatchMode+0x40>)
 8003348:	8bdb      	ldrh	r3, [r3, #30]
 800334a:	f247 5230 	movw	r2, #30000	@ 0x7530
 800334e:	4293      	cmp	r3, r2
 8003350:	d905      	bls.n	800335e <AutoSwitchToWatchMode+0x3a>
	{
		watchConfig.SubMode = WATCH_NORMAL;
 8003352:	4b04      	ldr	r3, [pc, #16]	@ (8003364 <AutoSwitchToWatchMode+0x40>)
 8003354:	2200      	movs	r2, #0
 8003356:	755a      	strb	r2, [r3, #21]
		watchConfig.IdleTimer  = 0;
 8003358:	4b02      	ldr	r3, [pc, #8]	@ (8003364 <AutoSwitchToWatchMode+0x40>)
 800335a:	2200      	movs	r2, #0
 800335c:	83da      	strh	r2, [r3, #30]
	}
}
 800335e:	bf00      	nop
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	200001e4 	.word	0x200001e4

08003368 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003368:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80033a0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800336c:	f7ff f94c 	bl	8002608 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003370:	480c      	ldr	r0, [pc, #48]	@ (80033a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003372:	490d      	ldr	r1, [pc, #52]	@ (80033a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003374:	4a0d      	ldr	r2, [pc, #52]	@ (80033ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003378:	e002      	b.n	8003380 <LoopCopyDataInit>

0800337a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800337a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800337c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800337e:	3304      	adds	r3, #4

08003380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003384:	d3f9      	bcc.n	800337a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003386:	4a0a      	ldr	r2, [pc, #40]	@ (80033b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003388:	4c0a      	ldr	r4, [pc, #40]	@ (80033b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800338a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800338c:	e001      	b.n	8003392 <LoopFillZerobss>

0800338e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800338e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003390:	3204      	adds	r2, #4

08003392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003394:	d3fb      	bcc.n	800338e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003396:	f003 f8cf 	bl	8006538 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800339a:	f7fe fd59 	bl	8001e50 <main>
  bx  lr    
 800339e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80033a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80033a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033a8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80033ac:	08006fc0 	.word	0x08006fc0
  ldr r2, =_sbss
 80033b0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80033b4:	20000350 	.word	0x20000350

080033b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033b8:	e7fe      	b.n	80033b8 <ADC_IRQHandler>
	...

080033bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80033c0:	4b0e      	ldr	r3, [pc, #56]	@ (80033fc <HAL_Init+0x40>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a0d      	ldr	r2, [pc, #52]	@ (80033fc <HAL_Init+0x40>)
 80033c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033cc:	4b0b      	ldr	r3, [pc, #44]	@ (80033fc <HAL_Init+0x40>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a0a      	ldr	r2, [pc, #40]	@ (80033fc <HAL_Init+0x40>)
 80033d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80033d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033d8:	4b08      	ldr	r3, [pc, #32]	@ (80033fc <HAL_Init+0x40>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a07      	ldr	r2, [pc, #28]	@ (80033fc <HAL_Init+0x40>)
 80033de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033e4:	2003      	movs	r0, #3
 80033e6:	f000 f94f 	bl	8003688 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033ea:	200f      	movs	r0, #15
 80033ec:	f000 f808 	bl	8003400 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033f0:	f7ff f84e 	bl	8002490 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40023c00 	.word	0x40023c00

08003400 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003408:	4b12      	ldr	r3, [pc, #72]	@ (8003454 <HAL_InitTick+0x54>)
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	4b12      	ldr	r3, [pc, #72]	@ (8003458 <HAL_InitTick+0x58>)
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	4619      	mov	r1, r3
 8003412:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003416:	fbb3 f3f1 	udiv	r3, r3, r1
 800341a:	fbb2 f3f3 	udiv	r3, r2, r3
 800341e:	4618      	mov	r0, r3
 8003420:	f000 f967 	bl	80036f2 <HAL_SYSTICK_Config>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e00e      	b.n	800344c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b0f      	cmp	r3, #15
 8003432:	d80a      	bhi.n	800344a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003434:	2200      	movs	r2, #0
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	f04f 30ff 	mov.w	r0, #4294967295
 800343c:	f000 f92f 	bl	800369e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003440:	4a06      	ldr	r2, [pc, #24]	@ (800345c <HAL_InitTick+0x5c>)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003446:	2300      	movs	r3, #0
 8003448:	e000      	b.n	800344c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
}
 800344c:	4618      	mov	r0, r3
 800344e:	3708      	adds	r7, #8
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	20000020 	.word	0x20000020
 8003458:	20000028 	.word	0x20000028
 800345c:	20000024 	.word	0x20000024

08003460 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003464:	4b06      	ldr	r3, [pc, #24]	@ (8003480 <HAL_IncTick+0x20>)
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	461a      	mov	r2, r3
 800346a:	4b06      	ldr	r3, [pc, #24]	@ (8003484 <HAL_IncTick+0x24>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4413      	add	r3, r2
 8003470:	4a04      	ldr	r2, [pc, #16]	@ (8003484 <HAL_IncTick+0x24>)
 8003472:	6013      	str	r3, [r2, #0]
}
 8003474:	bf00      	nop
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	20000028 	.word	0x20000028
 8003484:	20000204 	.word	0x20000204

08003488 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
  return uwTick;
 800348c:	4b03      	ldr	r3, [pc, #12]	@ (800349c <HAL_GetTick+0x14>)
 800348e:	681b      	ldr	r3, [r3, #0]
}
 8003490:	4618      	mov	r0, r3
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	20000204 	.word	0x20000204

080034a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034a8:	f7ff ffee 	bl	8003488 <HAL_GetTick>
 80034ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b8:	d005      	beq.n	80034c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034ba:	4b0a      	ldr	r3, [pc, #40]	@ (80034e4 <HAL_Delay+0x44>)
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	461a      	mov	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4413      	add	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80034c6:	bf00      	nop
 80034c8:	f7ff ffde 	bl	8003488 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d8f7      	bhi.n	80034c8 <HAL_Delay+0x28>
  {
  }
}
 80034d8:	bf00      	nop
 80034da:	bf00      	nop
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	20000028 	.word	0x20000028

080034e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034f8:	4b0c      	ldr	r3, [pc, #48]	@ (800352c <__NVIC_SetPriorityGrouping+0x44>)
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003504:	4013      	ands	r3, r2
 8003506:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003510:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003514:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003518:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800351a:	4a04      	ldr	r2, [pc, #16]	@ (800352c <__NVIC_SetPriorityGrouping+0x44>)
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	60d3      	str	r3, [r2, #12]
}
 8003520:	bf00      	nop
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	e000ed00 	.word	0xe000ed00

08003530 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003534:	4b04      	ldr	r3, [pc, #16]	@ (8003548 <__NVIC_GetPriorityGrouping+0x18>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	0a1b      	lsrs	r3, r3, #8
 800353a:	f003 0307 	and.w	r3, r3, #7
}
 800353e:	4618      	mov	r0, r3
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	e000ed00 	.word	0xe000ed00

0800354c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	4603      	mov	r3, r0
 8003554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355a:	2b00      	cmp	r3, #0
 800355c:	db0b      	blt.n	8003576 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800355e:	79fb      	ldrb	r3, [r7, #7]
 8003560:	f003 021f 	and.w	r2, r3, #31
 8003564:	4907      	ldr	r1, [pc, #28]	@ (8003584 <__NVIC_EnableIRQ+0x38>)
 8003566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356a:	095b      	lsrs	r3, r3, #5
 800356c:	2001      	movs	r0, #1
 800356e:	fa00 f202 	lsl.w	r2, r0, r2
 8003572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	e000e100 	.word	0xe000e100

08003588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	4603      	mov	r3, r0
 8003590:	6039      	str	r1, [r7, #0]
 8003592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003598:	2b00      	cmp	r3, #0
 800359a:	db0a      	blt.n	80035b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	490c      	ldr	r1, [pc, #48]	@ (80035d4 <__NVIC_SetPriority+0x4c>)
 80035a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a6:	0112      	lsls	r2, r2, #4
 80035a8:	b2d2      	uxtb	r2, r2
 80035aa:	440b      	add	r3, r1
 80035ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035b0:	e00a      	b.n	80035c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	4908      	ldr	r1, [pc, #32]	@ (80035d8 <__NVIC_SetPriority+0x50>)
 80035b8:	79fb      	ldrb	r3, [r7, #7]
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	3b04      	subs	r3, #4
 80035c0:	0112      	lsls	r2, r2, #4
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	440b      	add	r3, r1
 80035c6:	761a      	strb	r2, [r3, #24]
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	e000e100 	.word	0xe000e100
 80035d8:	e000ed00 	.word	0xe000ed00

080035dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035dc:	b480      	push	{r7}
 80035de:	b089      	sub	sp, #36	@ 0x24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f003 0307 	and.w	r3, r3, #7
 80035ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	f1c3 0307 	rsb	r3, r3, #7
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	bf28      	it	cs
 80035fa:	2304      	movcs	r3, #4
 80035fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	3304      	adds	r3, #4
 8003602:	2b06      	cmp	r3, #6
 8003604:	d902      	bls.n	800360c <NVIC_EncodePriority+0x30>
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	3b03      	subs	r3, #3
 800360a:	e000      	b.n	800360e <NVIC_EncodePriority+0x32>
 800360c:	2300      	movs	r3, #0
 800360e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003610:	f04f 32ff 	mov.w	r2, #4294967295
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	43da      	mvns	r2, r3
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	401a      	ands	r2, r3
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003624:	f04f 31ff 	mov.w	r1, #4294967295
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	fa01 f303 	lsl.w	r3, r1, r3
 800362e:	43d9      	mvns	r1, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003634:	4313      	orrs	r3, r2
         );
}
 8003636:	4618      	mov	r0, r3
 8003638:	3724      	adds	r7, #36	@ 0x24
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
	...

08003644 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3b01      	subs	r3, #1
 8003650:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003654:	d301      	bcc.n	800365a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003656:	2301      	movs	r3, #1
 8003658:	e00f      	b.n	800367a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800365a:	4a0a      	ldr	r2, [pc, #40]	@ (8003684 <SysTick_Config+0x40>)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3b01      	subs	r3, #1
 8003660:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003662:	210f      	movs	r1, #15
 8003664:	f04f 30ff 	mov.w	r0, #4294967295
 8003668:	f7ff ff8e 	bl	8003588 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800366c:	4b05      	ldr	r3, [pc, #20]	@ (8003684 <SysTick_Config+0x40>)
 800366e:	2200      	movs	r2, #0
 8003670:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003672:	4b04      	ldr	r3, [pc, #16]	@ (8003684 <SysTick_Config+0x40>)
 8003674:	2207      	movs	r2, #7
 8003676:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	e000e010 	.word	0xe000e010

08003688 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f7ff ff29 	bl	80034e8 <__NVIC_SetPriorityGrouping>
}
 8003696:	bf00      	nop
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800369e:	b580      	push	{r7, lr}
 80036a0:	b086      	sub	sp, #24
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	4603      	mov	r3, r0
 80036a6:	60b9      	str	r1, [r7, #8]
 80036a8:	607a      	str	r2, [r7, #4]
 80036aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036ac:	2300      	movs	r3, #0
 80036ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036b0:	f7ff ff3e 	bl	8003530 <__NVIC_GetPriorityGrouping>
 80036b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	68b9      	ldr	r1, [r7, #8]
 80036ba:	6978      	ldr	r0, [r7, #20]
 80036bc:	f7ff ff8e 	bl	80035dc <NVIC_EncodePriority>
 80036c0:	4602      	mov	r2, r0
 80036c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036c6:	4611      	mov	r1, r2
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff ff5d 	bl	8003588 <__NVIC_SetPriority>
}
 80036ce:	bf00      	nop
 80036d0:	3718      	adds	r7, #24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b082      	sub	sp, #8
 80036da:	af00      	add	r7, sp, #0
 80036dc:	4603      	mov	r3, r0
 80036de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff ff31 	bl	800354c <__NVIC_EnableIRQ>
}
 80036ea:	bf00      	nop
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b082      	sub	sp, #8
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7ff ffa2 	bl	8003644 <SysTick_Config>
 8003700:	4603      	mov	r3, r0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b084      	sub	sp, #16
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003716:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003718:	f7ff feb6 	bl	8003488 <HAL_GetTick>
 800371c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d008      	beq.n	800373c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2280      	movs	r2, #128	@ 0x80
 800372e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e052      	b.n	80037e2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 0216 	bic.w	r2, r2, #22
 800374a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	695a      	ldr	r2, [r3, #20]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800375a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003760:	2b00      	cmp	r3, #0
 8003762:	d103      	bne.n	800376c <HAL_DMA_Abort+0x62>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003768:	2b00      	cmp	r3, #0
 800376a:	d007      	beq.n	800377c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 0208 	bic.w	r2, r2, #8
 800377a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0201 	bic.w	r2, r2, #1
 800378a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800378c:	e013      	b.n	80037b6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800378e:	f7ff fe7b 	bl	8003488 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b05      	cmp	r3, #5
 800379a:	d90c      	bls.n	80037b6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2220      	movs	r2, #32
 80037a0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2203      	movs	r2, #3
 80037a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e015      	b.n	80037e2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1e4      	bne.n	800378e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037c8:	223f      	movs	r2, #63	@ 0x3f
 80037ca:	409a      	lsls	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b083      	sub	sp, #12
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d004      	beq.n	8003808 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2280      	movs	r2, #128	@ 0x80
 8003802:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e00c      	b.n	8003822 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2205      	movs	r2, #5
 800380c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0201 	bic.w	r2, r2, #1
 800381e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
	...

08003830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003830:	b480      	push	{r7}
 8003832:	b089      	sub	sp, #36	@ 0x24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800383a:	2300      	movs	r3, #0
 800383c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800383e:	2300      	movs	r3, #0
 8003840:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003842:	2300      	movs	r3, #0
 8003844:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003846:	2300      	movs	r3, #0
 8003848:	61fb      	str	r3, [r7, #28]
 800384a:	e16b      	b.n	8003b24 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800384c:	2201      	movs	r2, #1
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	4013      	ands	r3, r2
 800385e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	429a      	cmp	r2, r3
 8003866:	f040 815a 	bne.w	8003b1e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f003 0303 	and.w	r3, r3, #3
 8003872:	2b01      	cmp	r3, #1
 8003874:	d005      	beq.n	8003882 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800387e:	2b02      	cmp	r3, #2
 8003880:	d130      	bne.n	80038e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	2203      	movs	r2, #3
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	43db      	mvns	r3, r3
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	4013      	ands	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	69ba      	ldr	r2, [r7, #24]
 80038b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038b8:	2201      	movs	r2, #1
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	43db      	mvns	r3, r3
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	4013      	ands	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	091b      	lsrs	r3, r3, #4
 80038ce:	f003 0201 	and.w	r2, r3, #1
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	4313      	orrs	r3, r2
 80038dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f003 0303 	and.w	r3, r3, #3
 80038ec:	2b03      	cmp	r3, #3
 80038ee:	d017      	beq.n	8003920 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	2203      	movs	r2, #3
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	43db      	mvns	r3, r3
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	4013      	ands	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	4313      	orrs	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f003 0303 	and.w	r3, r3, #3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d123      	bne.n	8003974 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	08da      	lsrs	r2, r3, #3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3208      	adds	r2, #8
 8003934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003938:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	220f      	movs	r2, #15
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	43db      	mvns	r3, r3
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	4013      	ands	r3, r2
 800394e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	691a      	ldr	r2, [r3, #16]
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	f003 0307 	and.w	r3, r3, #7
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4313      	orrs	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	08da      	lsrs	r2, r3, #3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	3208      	adds	r2, #8
 800396e:	69b9      	ldr	r1, [r7, #24]
 8003970:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	2203      	movs	r2, #3
 8003980:	fa02 f303 	lsl.w	r3, r2, r3
 8003984:	43db      	mvns	r3, r3
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	4013      	ands	r3, r2
 800398a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f003 0203 	and.w	r2, r3, #3
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	4313      	orrs	r3, r2
 80039a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 80b4 	beq.w	8003b1e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039b6:	2300      	movs	r3, #0
 80039b8:	60fb      	str	r3, [r7, #12]
 80039ba:	4b60      	ldr	r3, [pc, #384]	@ (8003b3c <HAL_GPIO_Init+0x30c>)
 80039bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039be:	4a5f      	ldr	r2, [pc, #380]	@ (8003b3c <HAL_GPIO_Init+0x30c>)
 80039c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80039c6:	4b5d      	ldr	r3, [pc, #372]	@ (8003b3c <HAL_GPIO_Init+0x30c>)
 80039c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039d2:	4a5b      	ldr	r2, [pc, #364]	@ (8003b40 <HAL_GPIO_Init+0x310>)
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	089b      	lsrs	r3, r3, #2
 80039d8:	3302      	adds	r3, #2
 80039da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	f003 0303 	and.w	r3, r3, #3
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	220f      	movs	r2, #15
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	43db      	mvns	r3, r3
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	4013      	ands	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a52      	ldr	r2, [pc, #328]	@ (8003b44 <HAL_GPIO_Init+0x314>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d02b      	beq.n	8003a56 <HAL_GPIO_Init+0x226>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a51      	ldr	r2, [pc, #324]	@ (8003b48 <HAL_GPIO_Init+0x318>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d025      	beq.n	8003a52 <HAL_GPIO_Init+0x222>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a50      	ldr	r2, [pc, #320]	@ (8003b4c <HAL_GPIO_Init+0x31c>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d01f      	beq.n	8003a4e <HAL_GPIO_Init+0x21e>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a4f      	ldr	r2, [pc, #316]	@ (8003b50 <HAL_GPIO_Init+0x320>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d019      	beq.n	8003a4a <HAL_GPIO_Init+0x21a>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a4e      	ldr	r2, [pc, #312]	@ (8003b54 <HAL_GPIO_Init+0x324>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d013      	beq.n	8003a46 <HAL_GPIO_Init+0x216>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a4d      	ldr	r2, [pc, #308]	@ (8003b58 <HAL_GPIO_Init+0x328>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d00d      	beq.n	8003a42 <HAL_GPIO_Init+0x212>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a4c      	ldr	r2, [pc, #304]	@ (8003b5c <HAL_GPIO_Init+0x32c>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d007      	beq.n	8003a3e <HAL_GPIO_Init+0x20e>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a4b      	ldr	r2, [pc, #300]	@ (8003b60 <HAL_GPIO_Init+0x330>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d101      	bne.n	8003a3a <HAL_GPIO_Init+0x20a>
 8003a36:	2307      	movs	r3, #7
 8003a38:	e00e      	b.n	8003a58 <HAL_GPIO_Init+0x228>
 8003a3a:	2308      	movs	r3, #8
 8003a3c:	e00c      	b.n	8003a58 <HAL_GPIO_Init+0x228>
 8003a3e:	2306      	movs	r3, #6
 8003a40:	e00a      	b.n	8003a58 <HAL_GPIO_Init+0x228>
 8003a42:	2305      	movs	r3, #5
 8003a44:	e008      	b.n	8003a58 <HAL_GPIO_Init+0x228>
 8003a46:	2304      	movs	r3, #4
 8003a48:	e006      	b.n	8003a58 <HAL_GPIO_Init+0x228>
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e004      	b.n	8003a58 <HAL_GPIO_Init+0x228>
 8003a4e:	2302      	movs	r3, #2
 8003a50:	e002      	b.n	8003a58 <HAL_GPIO_Init+0x228>
 8003a52:	2301      	movs	r3, #1
 8003a54:	e000      	b.n	8003a58 <HAL_GPIO_Init+0x228>
 8003a56:	2300      	movs	r3, #0
 8003a58:	69fa      	ldr	r2, [r7, #28]
 8003a5a:	f002 0203 	and.w	r2, r2, #3
 8003a5e:	0092      	lsls	r2, r2, #2
 8003a60:	4093      	lsls	r3, r2
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a68:	4935      	ldr	r1, [pc, #212]	@ (8003b40 <HAL_GPIO_Init+0x310>)
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	089b      	lsrs	r3, r3, #2
 8003a6e:	3302      	adds	r3, #2
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a76:	4b3b      	ldr	r3, [pc, #236]	@ (8003b64 <HAL_GPIO_Init+0x334>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	43db      	mvns	r3, r3
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	4013      	ands	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a9a:	4a32      	ldr	r2, [pc, #200]	@ (8003b64 <HAL_GPIO_Init+0x334>)
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003aa0:	4b30      	ldr	r3, [pc, #192]	@ (8003b64 <HAL_GPIO_Init+0x334>)
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	43db      	mvns	r3, r3
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	4013      	ands	r3, r2
 8003aae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d003      	beq.n	8003ac4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ac4:	4a27      	ldr	r2, [pc, #156]	@ (8003b64 <HAL_GPIO_Init+0x334>)
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003aca:	4b26      	ldr	r3, [pc, #152]	@ (8003b64 <HAL_GPIO_Init+0x334>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	43db      	mvns	r3, r3
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003aee:	4a1d      	ldr	r2, [pc, #116]	@ (8003b64 <HAL_GPIO_Init+0x334>)
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003af4:	4b1b      	ldr	r3, [pc, #108]	@ (8003b64 <HAL_GPIO_Init+0x334>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	43db      	mvns	r3, r3
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	4013      	ands	r3, r2
 8003b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d003      	beq.n	8003b18 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b18:	4a12      	ldr	r2, [pc, #72]	@ (8003b64 <HAL_GPIO_Init+0x334>)
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	3301      	adds	r3, #1
 8003b22:	61fb      	str	r3, [r7, #28]
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	2b0f      	cmp	r3, #15
 8003b28:	f67f ae90 	bls.w	800384c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b2c:	bf00      	nop
 8003b2e:	bf00      	nop
 8003b30:	3724      	adds	r7, #36	@ 0x24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	40023800 	.word	0x40023800
 8003b40:	40013800 	.word	0x40013800
 8003b44:	40020000 	.word	0x40020000
 8003b48:	40020400 	.word	0x40020400
 8003b4c:	40020800 	.word	0x40020800
 8003b50:	40020c00 	.word	0x40020c00
 8003b54:	40021000 	.word	0x40021000
 8003b58:	40021400 	.word	0x40021400
 8003b5c:	40021800 	.word	0x40021800
 8003b60:	40021c00 	.word	0x40021c00
 8003b64:	40013c00 	.word	0x40013c00

08003b68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	460b      	mov	r3, r1
 8003b72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691a      	ldr	r2, [r3, #16]
 8003b78:	887b      	ldrh	r3, [r7, #2]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d002      	beq.n	8003b86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b80:	2301      	movs	r3, #1
 8003b82:	73fb      	strb	r3, [r7, #15]
 8003b84:	e001      	b.n	8003b8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b86:	2300      	movs	r3, #0
 8003b88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3714      	adds	r7, #20
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	807b      	strh	r3, [r7, #2]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ba8:	787b      	ldrb	r3, [r7, #1]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bae:	887a      	ldrh	r2, [r7, #2]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bb4:	e003      	b.n	8003bbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bb6:	887b      	ldrh	r3, [r7, #2]
 8003bb8:	041a      	lsls	r2, r3, #16
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	619a      	str	r2, [r3, #24]
}
 8003bbe:	bf00      	nop
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b085      	sub	sp, #20
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003bdc:	887a      	ldrh	r2, [r7, #2]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	4013      	ands	r3, r2
 8003be2:	041a      	lsls	r2, r3, #16
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	43d9      	mvns	r1, r3
 8003be8:	887b      	ldrh	r3, [r7, #2]
 8003bea:	400b      	ands	r3, r1
 8003bec:	431a      	orrs	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	619a      	str	r2, [r3, #24]
}
 8003bf2:	bf00      	nop
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
	...

08003c00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	4603      	mov	r3, r0
 8003c08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003c0a:	4b08      	ldr	r3, [pc, #32]	@ (8003c2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c0c:	695a      	ldr	r2, [r3, #20]
 8003c0e:	88fb      	ldrh	r3, [r7, #6]
 8003c10:	4013      	ands	r3, r2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d006      	beq.n	8003c24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c16:	4a05      	ldr	r2, [pc, #20]	@ (8003c2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c18:	88fb      	ldrh	r3, [r7, #6]
 8003c1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c1c:	88fb      	ldrh	r3, [r7, #6]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fe fae2 	bl	80021e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c24:	bf00      	nop
 8003c26:	3708      	adds	r7, #8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40013c00 	.word	0x40013c00

08003c30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e267      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d075      	beq.n	8003d3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003c4e:	4b88      	ldr	r3, [pc, #544]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f003 030c 	and.w	r3, r3, #12
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	d00c      	beq.n	8003c74 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c5a:	4b85      	ldr	r3, [pc, #532]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003c62:	2b08      	cmp	r3, #8
 8003c64:	d112      	bne.n	8003c8c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c66:	4b82      	ldr	r3, [pc, #520]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c72:	d10b      	bne.n	8003c8c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c74:	4b7e      	ldr	r3, [pc, #504]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d05b      	beq.n	8003d38 <HAL_RCC_OscConfig+0x108>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d157      	bne.n	8003d38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e242      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c94:	d106      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x74>
 8003c96:	4b76      	ldr	r3, [pc, #472]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a75      	ldr	r2, [pc, #468]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003c9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ca0:	6013      	str	r3, [r2, #0]
 8003ca2:	e01d      	b.n	8003ce0 <HAL_RCC_OscConfig+0xb0>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cac:	d10c      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x98>
 8003cae:	4b70      	ldr	r3, [pc, #448]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a6f      	ldr	r2, [pc, #444]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cb8:	6013      	str	r3, [r2, #0]
 8003cba:	4b6d      	ldr	r3, [pc, #436]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a6c      	ldr	r2, [pc, #432]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	e00b      	b.n	8003ce0 <HAL_RCC_OscConfig+0xb0>
 8003cc8:	4b69      	ldr	r3, [pc, #420]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a68      	ldr	r2, [pc, #416]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cd2:	6013      	str	r3, [r2, #0]
 8003cd4:	4b66      	ldr	r3, [pc, #408]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a65      	ldr	r2, [pc, #404]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d013      	beq.n	8003d10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce8:	f7ff fbce 	bl	8003488 <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cf0:	f7ff fbca 	bl	8003488 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b64      	cmp	r3, #100	@ 0x64
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e207      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d02:	4b5b      	ldr	r3, [pc, #364]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d0f0      	beq.n	8003cf0 <HAL_RCC_OscConfig+0xc0>
 8003d0e:	e014      	b.n	8003d3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d10:	f7ff fbba 	bl	8003488 <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d18:	f7ff fbb6 	bl	8003488 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b64      	cmp	r3, #100	@ 0x64
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e1f3      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d2a:	4b51      	ldr	r3, [pc, #324]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1f0      	bne.n	8003d18 <HAL_RCC_OscConfig+0xe8>
 8003d36:	e000      	b.n	8003d3a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d063      	beq.n	8003e0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003d46:	4b4a      	ldr	r3, [pc, #296]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f003 030c 	and.w	r3, r3, #12
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00b      	beq.n	8003d6a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d52:	4b47      	ldr	r3, [pc, #284]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003d5a:	2b08      	cmp	r3, #8
 8003d5c:	d11c      	bne.n	8003d98 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d5e:	4b44      	ldr	r3, [pc, #272]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d116      	bne.n	8003d98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d6a:	4b41      	ldr	r3, [pc, #260]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d005      	beq.n	8003d82 <HAL_RCC_OscConfig+0x152>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d001      	beq.n	8003d82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e1c7      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d82:	4b3b      	ldr	r3, [pc, #236]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	4937      	ldr	r1, [pc, #220]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d96:	e03a      	b.n	8003e0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d020      	beq.n	8003de2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003da0:	4b34      	ldr	r3, [pc, #208]	@ (8003e74 <HAL_RCC_OscConfig+0x244>)
 8003da2:	2201      	movs	r2, #1
 8003da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da6:	f7ff fb6f 	bl	8003488 <HAL_GetTick>
 8003daa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dac:	e008      	b.n	8003dc0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dae:	f7ff fb6b 	bl	8003488 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e1a8      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc0:	4b2b      	ldr	r3, [pc, #172]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0f0      	beq.n	8003dae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dcc:	4b28      	ldr	r3, [pc, #160]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	4925      	ldr	r1, [pc, #148]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	600b      	str	r3, [r1, #0]
 8003de0:	e015      	b.n	8003e0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003de2:	4b24      	ldr	r3, [pc, #144]	@ (8003e74 <HAL_RCC_OscConfig+0x244>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de8:	f7ff fb4e 	bl	8003488 <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003df0:	f7ff fb4a 	bl	8003488 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e187      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e02:	4b1b      	ldr	r3, [pc, #108]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1f0      	bne.n	8003df0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0308 	and.w	r3, r3, #8
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d036      	beq.n	8003e88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d016      	beq.n	8003e50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e22:	4b15      	ldr	r3, [pc, #84]	@ (8003e78 <HAL_RCC_OscConfig+0x248>)
 8003e24:	2201      	movs	r2, #1
 8003e26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e28:	f7ff fb2e 	bl	8003488 <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e30:	f7ff fb2a 	bl	8003488 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e167      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e42:	4b0b      	ldr	r3, [pc, #44]	@ (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003e44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d0f0      	beq.n	8003e30 <HAL_RCC_OscConfig+0x200>
 8003e4e:	e01b      	b.n	8003e88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e50:	4b09      	ldr	r3, [pc, #36]	@ (8003e78 <HAL_RCC_OscConfig+0x248>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e56:	f7ff fb17 	bl	8003488 <HAL_GetTick>
 8003e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e5c:	e00e      	b.n	8003e7c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e5e:	f7ff fb13 	bl	8003488 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d907      	bls.n	8003e7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e150      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
 8003e70:	40023800 	.word	0x40023800
 8003e74:	42470000 	.word	0x42470000
 8003e78:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e7c:	4b88      	ldr	r3, [pc, #544]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003e7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1ea      	bne.n	8003e5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f000 8097 	beq.w	8003fc4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e96:	2300      	movs	r3, #0
 8003e98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e9a:	4b81      	ldr	r3, [pc, #516]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10f      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	60bb      	str	r3, [r7, #8]
 8003eaa:	4b7d      	ldr	r3, [pc, #500]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eae:	4a7c      	ldr	r2, [pc, #496]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003eb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003eb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003eb6:	4b7a      	ldr	r3, [pc, #488]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ebe:	60bb      	str	r3, [r7, #8]
 8003ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec6:	4b77      	ldr	r3, [pc, #476]	@ (80040a4 <HAL_RCC_OscConfig+0x474>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d118      	bne.n	8003f04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ed2:	4b74      	ldr	r3, [pc, #464]	@ (80040a4 <HAL_RCC_OscConfig+0x474>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a73      	ldr	r2, [pc, #460]	@ (80040a4 <HAL_RCC_OscConfig+0x474>)
 8003ed8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ede:	f7ff fad3 	bl	8003488 <HAL_GetTick>
 8003ee2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ee6:	f7ff facf 	bl	8003488 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e10c      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef8:	4b6a      	ldr	r3, [pc, #424]	@ (80040a4 <HAL_RCC_OscConfig+0x474>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0f0      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d106      	bne.n	8003f1a <HAL_RCC_OscConfig+0x2ea>
 8003f0c:	4b64      	ldr	r3, [pc, #400]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f10:	4a63      	ldr	r2, [pc, #396]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f12:	f043 0301 	orr.w	r3, r3, #1
 8003f16:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f18:	e01c      	b.n	8003f54 <HAL_RCC_OscConfig+0x324>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	2b05      	cmp	r3, #5
 8003f20:	d10c      	bne.n	8003f3c <HAL_RCC_OscConfig+0x30c>
 8003f22:	4b5f      	ldr	r3, [pc, #380]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f26:	4a5e      	ldr	r2, [pc, #376]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f28:	f043 0304 	orr.w	r3, r3, #4
 8003f2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f2e:	4b5c      	ldr	r3, [pc, #368]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f32:	4a5b      	ldr	r2, [pc, #364]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f34:	f043 0301 	orr.w	r3, r3, #1
 8003f38:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f3a:	e00b      	b.n	8003f54 <HAL_RCC_OscConfig+0x324>
 8003f3c:	4b58      	ldr	r3, [pc, #352]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f40:	4a57      	ldr	r2, [pc, #348]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f42:	f023 0301 	bic.w	r3, r3, #1
 8003f46:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f48:	4b55      	ldr	r3, [pc, #340]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f4c:	4a54      	ldr	r2, [pc, #336]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f4e:	f023 0304 	bic.w	r3, r3, #4
 8003f52:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d015      	beq.n	8003f88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5c:	f7ff fa94 	bl	8003488 <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f62:	e00a      	b.n	8003f7a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f64:	f7ff fa90 	bl	8003488 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e0cb      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f7a:	4b49      	ldr	r3, [pc, #292]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0ee      	beq.n	8003f64 <HAL_RCC_OscConfig+0x334>
 8003f86:	e014      	b.n	8003fb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f88:	f7ff fa7e 	bl	8003488 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f8e:	e00a      	b.n	8003fa6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f90:	f7ff fa7a 	bl	8003488 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e0b5      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fa6:	4b3e      	ldr	r3, [pc, #248]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1ee      	bne.n	8003f90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fb2:	7dfb      	ldrb	r3, [r7, #23]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d105      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fb8:	4b39      	ldr	r3, [pc, #228]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fbc:	4a38      	ldr	r2, [pc, #224]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003fbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fc2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 80a1 	beq.w	8004110 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fce:	4b34      	ldr	r3, [pc, #208]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 030c 	and.w	r3, r3, #12
 8003fd6:	2b08      	cmp	r3, #8
 8003fd8:	d05c      	beq.n	8004094 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d141      	bne.n	8004066 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fe2:	4b31      	ldr	r3, [pc, #196]	@ (80040a8 <HAL_RCC_OscConfig+0x478>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe8:	f7ff fa4e 	bl	8003488 <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff0:	f7ff fa4a 	bl	8003488 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e087      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004002:	4b27      	ldr	r3, [pc, #156]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1f0      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	69da      	ldr	r2, [r3, #28]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	431a      	orrs	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401c:	019b      	lsls	r3, r3, #6
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004024:	085b      	lsrs	r3, r3, #1
 8004026:	3b01      	subs	r3, #1
 8004028:	041b      	lsls	r3, r3, #16
 800402a:	431a      	orrs	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004030:	061b      	lsls	r3, r3, #24
 8004032:	491b      	ldr	r1, [pc, #108]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8004034:	4313      	orrs	r3, r2
 8004036:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004038:	4b1b      	ldr	r3, [pc, #108]	@ (80040a8 <HAL_RCC_OscConfig+0x478>)
 800403a:	2201      	movs	r2, #1
 800403c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403e:	f7ff fa23 	bl	8003488 <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004044:	e008      	b.n	8004058 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004046:	f7ff fa1f 	bl	8003488 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e05c      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004058:	4b11      	ldr	r3, [pc, #68]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0f0      	beq.n	8004046 <HAL_RCC_OscConfig+0x416>
 8004064:	e054      	b.n	8004110 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004066:	4b10      	ldr	r3, [pc, #64]	@ (80040a8 <HAL_RCC_OscConfig+0x478>)
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800406c:	f7ff fa0c 	bl	8003488 <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004074:	f7ff fa08 	bl	8003488 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e045      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004086:	4b06      	ldr	r3, [pc, #24]	@ (80040a0 <HAL_RCC_OscConfig+0x470>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1f0      	bne.n	8004074 <HAL_RCC_OscConfig+0x444>
 8004092:	e03d      	b.n	8004110 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d107      	bne.n	80040ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e038      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
 80040a0:	40023800 	.word	0x40023800
 80040a4:	40007000 	.word	0x40007000
 80040a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040ac:	4b1b      	ldr	r3, [pc, #108]	@ (800411c <HAL_RCC_OscConfig+0x4ec>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d028      	beq.n	800410c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d121      	bne.n	800410c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d11a      	bne.n	800410c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80040dc:	4013      	ands	r3, r2
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80040e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d111      	bne.n	800410c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f2:	085b      	lsrs	r3, r3, #1
 80040f4:	3b01      	subs	r3, #1
 80040f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d107      	bne.n	800410c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004106:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004108:	429a      	cmp	r2, r3
 800410a:	d001      	beq.n	8004110 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e000      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3718      	adds	r7, #24
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	40023800 	.word	0x40023800

08004120 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e0cc      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004134:	4b68      	ldr	r3, [pc, #416]	@ (80042d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	429a      	cmp	r2, r3
 8004140:	d90c      	bls.n	800415c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004142:	4b65      	ldr	r3, [pc, #404]	@ (80042d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	b2d2      	uxtb	r2, r2
 8004148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800414a:	4b63      	ldr	r3, [pc, #396]	@ (80042d8 <HAL_RCC_ClockConfig+0x1b8>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	429a      	cmp	r2, r3
 8004156:	d001      	beq.n	800415c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e0b8      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d020      	beq.n	80041aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b00      	cmp	r3, #0
 8004172:	d005      	beq.n	8004180 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004174:	4b59      	ldr	r3, [pc, #356]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	4a58      	ldr	r2, [pc, #352]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 800417a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800417e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0308 	and.w	r3, r3, #8
 8004188:	2b00      	cmp	r3, #0
 800418a:	d005      	beq.n	8004198 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800418c:	4b53      	ldr	r3, [pc, #332]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	4a52      	ldr	r2, [pc, #328]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004192:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004196:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004198:	4b50      	ldr	r3, [pc, #320]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	494d      	ldr	r1, [pc, #308]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d044      	beq.n	8004240 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d107      	bne.n	80041ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041be:	4b47      	ldr	r3, [pc, #284]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d119      	bne.n	80041fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e07f      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d003      	beq.n	80041de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041da:	2b03      	cmp	r3, #3
 80041dc:	d107      	bne.n	80041ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041de:	4b3f      	ldr	r3, [pc, #252]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d109      	bne.n	80041fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e06f      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ee:	4b3b      	ldr	r3, [pc, #236]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e067      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041fe:	4b37      	ldr	r3, [pc, #220]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f023 0203 	bic.w	r2, r3, #3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	4934      	ldr	r1, [pc, #208]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 800420c:	4313      	orrs	r3, r2
 800420e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004210:	f7ff f93a 	bl	8003488 <HAL_GetTick>
 8004214:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004216:	e00a      	b.n	800422e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004218:	f7ff f936 	bl	8003488 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004226:	4293      	cmp	r3, r2
 8004228:	d901      	bls.n	800422e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e04f      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800422e:	4b2b      	ldr	r3, [pc, #172]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 020c 	and.w	r2, r3, #12
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	429a      	cmp	r2, r3
 800423e:	d1eb      	bne.n	8004218 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004240:	4b25      	ldr	r3, [pc, #148]	@ (80042d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0307 	and.w	r3, r3, #7
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d20c      	bcs.n	8004268 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424e:	4b22      	ldr	r3, [pc, #136]	@ (80042d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	b2d2      	uxtb	r2, r2
 8004254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004256:	4b20      	ldr	r3, [pc, #128]	@ (80042d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0307 	and.w	r3, r3, #7
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	429a      	cmp	r2, r3
 8004262:	d001      	beq.n	8004268 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e032      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	2b00      	cmp	r3, #0
 8004272:	d008      	beq.n	8004286 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004274:	4b19      	ldr	r3, [pc, #100]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	4916      	ldr	r1, [pc, #88]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004282:	4313      	orrs	r3, r2
 8004284:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	2b00      	cmp	r3, #0
 8004290:	d009      	beq.n	80042a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004292:	4b12      	ldr	r3, [pc, #72]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	490e      	ldr	r1, [pc, #56]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042a6:	f000 f821 	bl	80042ec <HAL_RCC_GetSysClockFreq>
 80042aa:	4602      	mov	r2, r0
 80042ac:	4b0b      	ldr	r3, [pc, #44]	@ (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	091b      	lsrs	r3, r3, #4
 80042b2:	f003 030f 	and.w	r3, r3, #15
 80042b6:	490a      	ldr	r1, [pc, #40]	@ (80042e0 <HAL_RCC_ClockConfig+0x1c0>)
 80042b8:	5ccb      	ldrb	r3, [r1, r3]
 80042ba:	fa22 f303 	lsr.w	r3, r2, r3
 80042be:	4a09      	ldr	r2, [pc, #36]	@ (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 80042c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80042c2:	4b09      	ldr	r3, [pc, #36]	@ (80042e8 <HAL_RCC_ClockConfig+0x1c8>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7ff f89a 	bl	8003400 <HAL_InitTick>

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40023c00 	.word	0x40023c00
 80042dc:	40023800 	.word	0x40023800
 80042e0:	08006f64 	.word	0x08006f64
 80042e4:	20000020 	.word	0x20000020
 80042e8:	20000024 	.word	0x20000024

080042ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042f0:	b094      	sub	sp, #80	@ 0x50
 80042f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80042f8:	2300      	movs	r3, #0
 80042fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004300:	2300      	movs	r3, #0
 8004302:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004304:	4b79      	ldr	r3, [pc, #484]	@ (80044ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f003 030c 	and.w	r3, r3, #12
 800430c:	2b08      	cmp	r3, #8
 800430e:	d00d      	beq.n	800432c <HAL_RCC_GetSysClockFreq+0x40>
 8004310:	2b08      	cmp	r3, #8
 8004312:	f200 80e1 	bhi.w	80044d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004316:	2b00      	cmp	r3, #0
 8004318:	d002      	beq.n	8004320 <HAL_RCC_GetSysClockFreq+0x34>
 800431a:	2b04      	cmp	r3, #4
 800431c:	d003      	beq.n	8004326 <HAL_RCC_GetSysClockFreq+0x3a>
 800431e:	e0db      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004320:	4b73      	ldr	r3, [pc, #460]	@ (80044f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004322:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004324:	e0db      	b.n	80044de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004326:	4b73      	ldr	r3, [pc, #460]	@ (80044f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004328:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800432a:	e0d8      	b.n	80044de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800432c:	4b6f      	ldr	r3, [pc, #444]	@ (80044ec <HAL_RCC_GetSysClockFreq+0x200>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004334:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004336:	4b6d      	ldr	r3, [pc, #436]	@ (80044ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d063      	beq.n	800440a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004342:	4b6a      	ldr	r3, [pc, #424]	@ (80044ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	099b      	lsrs	r3, r3, #6
 8004348:	2200      	movs	r2, #0
 800434a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800434c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800434e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004354:	633b      	str	r3, [r7, #48]	@ 0x30
 8004356:	2300      	movs	r3, #0
 8004358:	637b      	str	r3, [r7, #52]	@ 0x34
 800435a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800435e:	4622      	mov	r2, r4
 8004360:	462b      	mov	r3, r5
 8004362:	f04f 0000 	mov.w	r0, #0
 8004366:	f04f 0100 	mov.w	r1, #0
 800436a:	0159      	lsls	r1, r3, #5
 800436c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004370:	0150      	lsls	r0, r2, #5
 8004372:	4602      	mov	r2, r0
 8004374:	460b      	mov	r3, r1
 8004376:	4621      	mov	r1, r4
 8004378:	1a51      	subs	r1, r2, r1
 800437a:	6139      	str	r1, [r7, #16]
 800437c:	4629      	mov	r1, r5
 800437e:	eb63 0301 	sbc.w	r3, r3, r1
 8004382:	617b      	str	r3, [r7, #20]
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	f04f 0300 	mov.w	r3, #0
 800438c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004390:	4659      	mov	r1, fp
 8004392:	018b      	lsls	r3, r1, #6
 8004394:	4651      	mov	r1, sl
 8004396:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800439a:	4651      	mov	r1, sl
 800439c:	018a      	lsls	r2, r1, #6
 800439e:	4651      	mov	r1, sl
 80043a0:	ebb2 0801 	subs.w	r8, r2, r1
 80043a4:	4659      	mov	r1, fp
 80043a6:	eb63 0901 	sbc.w	r9, r3, r1
 80043aa:	f04f 0200 	mov.w	r2, #0
 80043ae:	f04f 0300 	mov.w	r3, #0
 80043b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043be:	4690      	mov	r8, r2
 80043c0:	4699      	mov	r9, r3
 80043c2:	4623      	mov	r3, r4
 80043c4:	eb18 0303 	adds.w	r3, r8, r3
 80043c8:	60bb      	str	r3, [r7, #8]
 80043ca:	462b      	mov	r3, r5
 80043cc:	eb49 0303 	adc.w	r3, r9, r3
 80043d0:	60fb      	str	r3, [r7, #12]
 80043d2:	f04f 0200 	mov.w	r2, #0
 80043d6:	f04f 0300 	mov.w	r3, #0
 80043da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80043de:	4629      	mov	r1, r5
 80043e0:	024b      	lsls	r3, r1, #9
 80043e2:	4621      	mov	r1, r4
 80043e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043e8:	4621      	mov	r1, r4
 80043ea:	024a      	lsls	r2, r1, #9
 80043ec:	4610      	mov	r0, r2
 80043ee:	4619      	mov	r1, r3
 80043f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043f2:	2200      	movs	r2, #0
 80043f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80043fc:	f7fb ff38 	bl	8000270 <__aeabi_uldivmod>
 8004400:	4602      	mov	r2, r0
 8004402:	460b      	mov	r3, r1
 8004404:	4613      	mov	r3, r2
 8004406:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004408:	e058      	b.n	80044bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800440a:	4b38      	ldr	r3, [pc, #224]	@ (80044ec <HAL_RCC_GetSysClockFreq+0x200>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	099b      	lsrs	r3, r3, #6
 8004410:	2200      	movs	r2, #0
 8004412:	4618      	mov	r0, r3
 8004414:	4611      	mov	r1, r2
 8004416:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800441a:	623b      	str	r3, [r7, #32]
 800441c:	2300      	movs	r3, #0
 800441e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004420:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004424:	4642      	mov	r2, r8
 8004426:	464b      	mov	r3, r9
 8004428:	f04f 0000 	mov.w	r0, #0
 800442c:	f04f 0100 	mov.w	r1, #0
 8004430:	0159      	lsls	r1, r3, #5
 8004432:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004436:	0150      	lsls	r0, r2, #5
 8004438:	4602      	mov	r2, r0
 800443a:	460b      	mov	r3, r1
 800443c:	4641      	mov	r1, r8
 800443e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004442:	4649      	mov	r1, r9
 8004444:	eb63 0b01 	sbc.w	fp, r3, r1
 8004448:	f04f 0200 	mov.w	r2, #0
 800444c:	f04f 0300 	mov.w	r3, #0
 8004450:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004454:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004458:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800445c:	ebb2 040a 	subs.w	r4, r2, sl
 8004460:	eb63 050b 	sbc.w	r5, r3, fp
 8004464:	f04f 0200 	mov.w	r2, #0
 8004468:	f04f 0300 	mov.w	r3, #0
 800446c:	00eb      	lsls	r3, r5, #3
 800446e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004472:	00e2      	lsls	r2, r4, #3
 8004474:	4614      	mov	r4, r2
 8004476:	461d      	mov	r5, r3
 8004478:	4643      	mov	r3, r8
 800447a:	18e3      	adds	r3, r4, r3
 800447c:	603b      	str	r3, [r7, #0]
 800447e:	464b      	mov	r3, r9
 8004480:	eb45 0303 	adc.w	r3, r5, r3
 8004484:	607b      	str	r3, [r7, #4]
 8004486:	f04f 0200 	mov.w	r2, #0
 800448a:	f04f 0300 	mov.w	r3, #0
 800448e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004492:	4629      	mov	r1, r5
 8004494:	028b      	lsls	r3, r1, #10
 8004496:	4621      	mov	r1, r4
 8004498:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800449c:	4621      	mov	r1, r4
 800449e:	028a      	lsls	r2, r1, #10
 80044a0:	4610      	mov	r0, r2
 80044a2:	4619      	mov	r1, r3
 80044a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044a6:	2200      	movs	r2, #0
 80044a8:	61bb      	str	r3, [r7, #24]
 80044aa:	61fa      	str	r2, [r7, #28]
 80044ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044b0:	f7fb fede 	bl	8000270 <__aeabi_uldivmod>
 80044b4:	4602      	mov	r2, r0
 80044b6:	460b      	mov	r3, r1
 80044b8:	4613      	mov	r3, r2
 80044ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80044bc:	4b0b      	ldr	r3, [pc, #44]	@ (80044ec <HAL_RCC_GetSysClockFreq+0x200>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	0c1b      	lsrs	r3, r3, #16
 80044c2:	f003 0303 	and.w	r3, r3, #3
 80044c6:	3301      	adds	r3, #1
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80044cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80044ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044d6:	e002      	b.n	80044de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044d8:	4b05      	ldr	r3, [pc, #20]	@ (80044f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80044da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3750      	adds	r7, #80	@ 0x50
 80044e4:	46bd      	mov	sp, r7
 80044e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044ea:	bf00      	nop
 80044ec:	40023800 	.word	0x40023800
 80044f0:	00f42400 	.word	0x00f42400
 80044f4:	007a1200 	.word	0x007a1200

080044f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044f8:	b480      	push	{r7}
 80044fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044fc:	4b03      	ldr	r3, [pc, #12]	@ (800450c <HAL_RCC_GetHCLKFreq+0x14>)
 80044fe:	681b      	ldr	r3, [r3, #0]
}
 8004500:	4618      	mov	r0, r3
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	20000020 	.word	0x20000020

08004510 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004514:	f7ff fff0 	bl	80044f8 <HAL_RCC_GetHCLKFreq>
 8004518:	4602      	mov	r2, r0
 800451a:	4b05      	ldr	r3, [pc, #20]	@ (8004530 <HAL_RCC_GetPCLK1Freq+0x20>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	0a9b      	lsrs	r3, r3, #10
 8004520:	f003 0307 	and.w	r3, r3, #7
 8004524:	4903      	ldr	r1, [pc, #12]	@ (8004534 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004526:	5ccb      	ldrb	r3, [r1, r3]
 8004528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800452c:	4618      	mov	r0, r3
 800452e:	bd80      	pop	{r7, pc}
 8004530:	40023800 	.word	0x40023800
 8004534:	08006f74 	.word	0x08006f74

08004538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800453c:	f7ff ffdc 	bl	80044f8 <HAL_RCC_GetHCLKFreq>
 8004540:	4602      	mov	r2, r0
 8004542:	4b05      	ldr	r3, [pc, #20]	@ (8004558 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	0b5b      	lsrs	r3, r3, #13
 8004548:	f003 0307 	and.w	r3, r3, #7
 800454c:	4903      	ldr	r1, [pc, #12]	@ (800455c <HAL_RCC_GetPCLK2Freq+0x24>)
 800454e:	5ccb      	ldrb	r3, [r1, r3]
 8004550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004554:	4618      	mov	r0, r3
 8004556:	bd80      	pop	{r7, pc}
 8004558:	40023800 	.word	0x40023800
 800455c:	08006f74 	.word	0x08006f74

08004560 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d101      	bne.n	8004572 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e041      	b.n	80045f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d106      	bne.n	800458c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f7fe f8fc 	bl	8002784 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2202      	movs	r2, #2
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	3304      	adds	r3, #4
 800459c:	4619      	mov	r1, r3
 800459e:	4610      	mov	r0, r2
 80045a0:	f000 fcd2 	bl	8004f48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
	...

08004600 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800460e:	b2db      	uxtb	r3, r3
 8004610:	2b01      	cmp	r3, #1
 8004612:	d001      	beq.n	8004618 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e04e      	b.n	80046b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68da      	ldr	r2, [r3, #12]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f042 0201 	orr.w	r2, r2, #1
 800462e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a23      	ldr	r2, [pc, #140]	@ (80046c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d022      	beq.n	8004680 <HAL_TIM_Base_Start_IT+0x80>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004642:	d01d      	beq.n	8004680 <HAL_TIM_Base_Start_IT+0x80>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a1f      	ldr	r2, [pc, #124]	@ (80046c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d018      	beq.n	8004680 <HAL_TIM_Base_Start_IT+0x80>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a1e      	ldr	r2, [pc, #120]	@ (80046cc <HAL_TIM_Base_Start_IT+0xcc>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d013      	beq.n	8004680 <HAL_TIM_Base_Start_IT+0x80>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a1c      	ldr	r2, [pc, #112]	@ (80046d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d00e      	beq.n	8004680 <HAL_TIM_Base_Start_IT+0x80>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a1b      	ldr	r2, [pc, #108]	@ (80046d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d009      	beq.n	8004680 <HAL_TIM_Base_Start_IT+0x80>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a19      	ldr	r2, [pc, #100]	@ (80046d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d004      	beq.n	8004680 <HAL_TIM_Base_Start_IT+0x80>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a18      	ldr	r2, [pc, #96]	@ (80046dc <HAL_TIM_Base_Start_IT+0xdc>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d111      	bne.n	80046a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f003 0307 	and.w	r3, r3, #7
 800468a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2b06      	cmp	r3, #6
 8004690:	d010      	beq.n	80046b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f042 0201 	orr.w	r2, r2, #1
 80046a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046a2:	e007      	b.n	80046b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f042 0201 	orr.w	r2, r2, #1
 80046b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3714      	adds	r7, #20
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	40010000 	.word	0x40010000
 80046c8:	40000400 	.word	0x40000400
 80046cc:	40000800 	.word	0x40000800
 80046d0:	40000c00 	.word	0x40000c00
 80046d4:	40010400 	.word	0x40010400
 80046d8:	40014000 	.word	0x40014000
 80046dc:	40001800 	.word	0x40001800

080046e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e041      	b.n	8004776 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d106      	bne.n	800470c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f839 	bl	800477e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2202      	movs	r2, #2
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3304      	adds	r3, #4
 800471c:	4619      	mov	r1, r3
 800471e:	4610      	mov	r0, r2
 8004720:	f000 fc12 	bl	8004f48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800477e:	b480      	push	{r7}
 8004780:	b083      	sub	sp, #12
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004786:	bf00      	nop
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
	...

08004794 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d109      	bne.n	80047b8 <HAL_TIM_PWM_Start+0x24>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	bf14      	ite	ne
 80047b0:	2301      	movne	r3, #1
 80047b2:	2300      	moveq	r3, #0
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	e022      	b.n	80047fe <HAL_TIM_PWM_Start+0x6a>
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	d109      	bne.n	80047d2 <HAL_TIM_PWM_Start+0x3e>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	bf14      	ite	ne
 80047ca:	2301      	movne	r3, #1
 80047cc:	2300      	moveq	r3, #0
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	e015      	b.n	80047fe <HAL_TIM_PWM_Start+0x6a>
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	2b08      	cmp	r3, #8
 80047d6:	d109      	bne.n	80047ec <HAL_TIM_PWM_Start+0x58>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	bf14      	ite	ne
 80047e4:	2301      	movne	r3, #1
 80047e6:	2300      	moveq	r3, #0
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	e008      	b.n	80047fe <HAL_TIM_PWM_Start+0x6a>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	bf14      	ite	ne
 80047f8:	2301      	movne	r3, #1
 80047fa:	2300      	moveq	r3, #0
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e07c      	b.n	8004900 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d104      	bne.n	8004816 <HAL_TIM_PWM_Start+0x82>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2202      	movs	r2, #2
 8004810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004814:	e013      	b.n	800483e <HAL_TIM_PWM_Start+0xaa>
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	2b04      	cmp	r3, #4
 800481a:	d104      	bne.n	8004826 <HAL_TIM_PWM_Start+0x92>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2202      	movs	r2, #2
 8004820:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004824:	e00b      	b.n	800483e <HAL_TIM_PWM_Start+0xaa>
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2b08      	cmp	r3, #8
 800482a:	d104      	bne.n	8004836 <HAL_TIM_PWM_Start+0xa2>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2202      	movs	r2, #2
 8004830:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004834:	e003      	b.n	800483e <HAL_TIM_PWM_Start+0xaa>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2202      	movs	r2, #2
 800483a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2201      	movs	r2, #1
 8004844:	6839      	ldr	r1, [r7, #0]
 8004846:	4618      	mov	r0, r3
 8004848:	f000 fe74 	bl	8005534 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a2d      	ldr	r2, [pc, #180]	@ (8004908 <HAL_TIM_PWM_Start+0x174>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d004      	beq.n	8004860 <HAL_TIM_PWM_Start+0xcc>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a2c      	ldr	r2, [pc, #176]	@ (800490c <HAL_TIM_PWM_Start+0x178>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d101      	bne.n	8004864 <HAL_TIM_PWM_Start+0xd0>
 8004860:	2301      	movs	r3, #1
 8004862:	e000      	b.n	8004866 <HAL_TIM_PWM_Start+0xd2>
 8004864:	2300      	movs	r3, #0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d007      	beq.n	800487a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004878:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a22      	ldr	r2, [pc, #136]	@ (8004908 <HAL_TIM_PWM_Start+0x174>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d022      	beq.n	80048ca <HAL_TIM_PWM_Start+0x136>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800488c:	d01d      	beq.n	80048ca <HAL_TIM_PWM_Start+0x136>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a1f      	ldr	r2, [pc, #124]	@ (8004910 <HAL_TIM_PWM_Start+0x17c>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d018      	beq.n	80048ca <HAL_TIM_PWM_Start+0x136>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a1d      	ldr	r2, [pc, #116]	@ (8004914 <HAL_TIM_PWM_Start+0x180>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d013      	beq.n	80048ca <HAL_TIM_PWM_Start+0x136>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a1c      	ldr	r2, [pc, #112]	@ (8004918 <HAL_TIM_PWM_Start+0x184>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d00e      	beq.n	80048ca <HAL_TIM_PWM_Start+0x136>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a16      	ldr	r2, [pc, #88]	@ (800490c <HAL_TIM_PWM_Start+0x178>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d009      	beq.n	80048ca <HAL_TIM_PWM_Start+0x136>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a18      	ldr	r2, [pc, #96]	@ (800491c <HAL_TIM_PWM_Start+0x188>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d004      	beq.n	80048ca <HAL_TIM_PWM_Start+0x136>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a16      	ldr	r2, [pc, #88]	@ (8004920 <HAL_TIM_PWM_Start+0x18c>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d111      	bne.n	80048ee <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2b06      	cmp	r3, #6
 80048da:	d010      	beq.n	80048fe <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 0201 	orr.w	r2, r2, #1
 80048ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ec:	e007      	b.n	80048fe <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f042 0201 	orr.w	r2, r2, #1
 80048fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	40010000 	.word	0x40010000
 800490c:	40010400 	.word	0x40010400
 8004910:	40000400 	.word	0x40000400
 8004914:	40000800 	.word	0x40000800
 8004918:	40000c00 	.word	0x40000c00
 800491c:	40014000 	.word	0x40014000
 8004920:	40001800 	.word	0x40001800

08004924 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2200      	movs	r2, #0
 8004934:	6839      	ldr	r1, [r7, #0]
 8004936:	4618      	mov	r0, r3
 8004938:	f000 fdfc 	bl	8005534 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a2e      	ldr	r2, [pc, #184]	@ (80049fc <HAL_TIM_PWM_Stop+0xd8>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d004      	beq.n	8004950 <HAL_TIM_PWM_Stop+0x2c>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a2d      	ldr	r2, [pc, #180]	@ (8004a00 <HAL_TIM_PWM_Stop+0xdc>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d101      	bne.n	8004954 <HAL_TIM_PWM_Stop+0x30>
 8004950:	2301      	movs	r3, #1
 8004952:	e000      	b.n	8004956 <HAL_TIM_PWM_Stop+0x32>
 8004954:	2300      	movs	r3, #0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d017      	beq.n	800498a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	6a1a      	ldr	r2, [r3, #32]
 8004960:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004964:	4013      	ands	r3, r2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10f      	bne.n	800498a <HAL_TIM_PWM_Stop+0x66>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	6a1a      	ldr	r2, [r3, #32]
 8004970:	f240 4344 	movw	r3, #1092	@ 0x444
 8004974:	4013      	ands	r3, r2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d107      	bne.n	800498a <HAL_TIM_PWM_Stop+0x66>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004988:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	6a1a      	ldr	r2, [r3, #32]
 8004990:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004994:	4013      	ands	r3, r2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10f      	bne.n	80049ba <HAL_TIM_PWM_Stop+0x96>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	6a1a      	ldr	r2, [r3, #32]
 80049a0:	f240 4344 	movw	r3, #1092	@ 0x444
 80049a4:	4013      	ands	r3, r2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d107      	bne.n	80049ba <HAL_TIM_PWM_Stop+0x96>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 0201 	bic.w	r2, r2, #1
 80049b8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d104      	bne.n	80049ca <HAL_TIM_PWM_Stop+0xa6>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049c8:	e013      	b.n	80049f2 <HAL_TIM_PWM_Stop+0xce>
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	2b04      	cmp	r3, #4
 80049ce:	d104      	bne.n	80049da <HAL_TIM_PWM_Stop+0xb6>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049d8:	e00b      	b.n	80049f2 <HAL_TIM_PWM_Stop+0xce>
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2b08      	cmp	r3, #8
 80049de:	d104      	bne.n	80049ea <HAL_TIM_PWM_Stop+0xc6>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049e8:	e003      	b.n	80049f2 <HAL_TIM_PWM_Stop+0xce>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3708      	adds	r7, #8
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40010000 	.word	0x40010000
 8004a00:	40010400 	.word	0x40010400

08004a04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d020      	beq.n	8004a68 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d01b      	beq.n	8004a68 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f06f 0202 	mvn.w	r2, #2
 8004a38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	f003 0303 	and.w	r3, r3, #3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 fa5b 	bl	8004f0a <HAL_TIM_IC_CaptureCallback>
 8004a54:	e005      	b.n	8004a62 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 fa4d 	bl	8004ef6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 fa5e 	bl	8004f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	f003 0304 	and.w	r3, r3, #4
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d020      	beq.n	8004ab4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f003 0304 	and.w	r3, r3, #4
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d01b      	beq.n	8004ab4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f06f 0204 	mvn.w	r2, #4
 8004a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2202      	movs	r2, #2
 8004a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d003      	beq.n	8004aa2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 fa35 	bl	8004f0a <HAL_TIM_IC_CaptureCallback>
 8004aa0:	e005      	b.n	8004aae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 fa27 	bl	8004ef6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 fa38 	bl	8004f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	f003 0308 	and.w	r3, r3, #8
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d020      	beq.n	8004b00 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f003 0308 	and.w	r3, r3, #8
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d01b      	beq.n	8004b00 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f06f 0208 	mvn.w	r2, #8
 8004ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2204      	movs	r2, #4
 8004ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	f003 0303 	and.w	r3, r3, #3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 fa0f 	bl	8004f0a <HAL_TIM_IC_CaptureCallback>
 8004aec:	e005      	b.n	8004afa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 fa01 	bl	8004ef6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 fa12 	bl	8004f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	f003 0310 	and.w	r3, r3, #16
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d020      	beq.n	8004b4c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f003 0310 	and.w	r3, r3, #16
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d01b      	beq.n	8004b4c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f06f 0210 	mvn.w	r2, #16
 8004b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2208      	movs	r2, #8
 8004b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d003      	beq.n	8004b3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f9e9 	bl	8004f0a <HAL_TIM_IC_CaptureCallback>
 8004b38:	e005      	b.n	8004b46 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f9db 	bl	8004ef6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f9ec 	bl	8004f1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00c      	beq.n	8004b70 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d007      	beq.n	8004b70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f06f 0201 	mvn.w	r2, #1
 8004b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7fd fbec 	bl	8002348 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00c      	beq.n	8004b94 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d007      	beq.n	8004b94 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 fd7c 	bl	800568c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00c      	beq.n	8004bb8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d007      	beq.n	8004bb8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f9bd 	bl	8004f32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	f003 0320 	and.w	r3, r3, #32
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00c      	beq.n	8004bdc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f003 0320 	and.w	r3, r3, #32
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d007      	beq.n	8004bdc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f06f 0220 	mvn.w	r2, #32
 8004bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 fd4e 	bl	8005678 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bdc:	bf00      	nop
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d101      	bne.n	8004c02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004bfe:	2302      	movs	r3, #2
 8004c00:	e0ae      	b.n	8004d60 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b0c      	cmp	r3, #12
 8004c0e:	f200 809f 	bhi.w	8004d50 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c12:	a201      	add	r2, pc, #4	@ (adr r2, 8004c18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c18:	08004c4d 	.word	0x08004c4d
 8004c1c:	08004d51 	.word	0x08004d51
 8004c20:	08004d51 	.word	0x08004d51
 8004c24:	08004d51 	.word	0x08004d51
 8004c28:	08004c8d 	.word	0x08004c8d
 8004c2c:	08004d51 	.word	0x08004d51
 8004c30:	08004d51 	.word	0x08004d51
 8004c34:	08004d51 	.word	0x08004d51
 8004c38:	08004ccf 	.word	0x08004ccf
 8004c3c:	08004d51 	.word	0x08004d51
 8004c40:	08004d51 	.word	0x08004d51
 8004c44:	08004d51 	.word	0x08004d51
 8004c48:	08004d0f 	.word	0x08004d0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68b9      	ldr	r1, [r7, #8]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 fa24 	bl	80050a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	699a      	ldr	r2, [r3, #24]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f042 0208 	orr.w	r2, r2, #8
 8004c66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	699a      	ldr	r2, [r3, #24]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f022 0204 	bic.w	r2, r2, #4
 8004c76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6999      	ldr	r1, [r3, #24]
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	691a      	ldr	r2, [r3, #16]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	619a      	str	r2, [r3, #24]
      break;
 8004c8a:	e064      	b.n	8004d56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68b9      	ldr	r1, [r7, #8]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f000 fa74 	bl	8005180 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	699a      	ldr	r2, [r3, #24]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ca6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	699a      	ldr	r2, [r3, #24]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	6999      	ldr	r1, [r3, #24]
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	021a      	lsls	r2, r3, #8
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	619a      	str	r2, [r3, #24]
      break;
 8004ccc:	e043      	b.n	8004d56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68b9      	ldr	r1, [r7, #8]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f000 fac9 	bl	800526c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	69da      	ldr	r2, [r3, #28]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f042 0208 	orr.w	r2, r2, #8
 8004ce8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	69da      	ldr	r2, [r3, #28]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f022 0204 	bic.w	r2, r2, #4
 8004cf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	69d9      	ldr	r1, [r3, #28]
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	691a      	ldr	r2, [r3, #16]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	61da      	str	r2, [r3, #28]
      break;
 8004d0c:	e023      	b.n	8004d56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68b9      	ldr	r1, [r7, #8]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f000 fb1d 	bl	8005354 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	69da      	ldr	r2, [r3, #28]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	69da      	ldr	r2, [r3, #28]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	69d9      	ldr	r1, [r3, #28]
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	021a      	lsls	r2, r3, #8
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	61da      	str	r2, [r3, #28]
      break;
 8004d4e:	e002      	b.n	8004d56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	75fb      	strb	r3, [r7, #23]
      break;
 8004d54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3718      	adds	r7, #24
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d72:	2300      	movs	r3, #0
 8004d74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d101      	bne.n	8004d84 <HAL_TIM_ConfigClockSource+0x1c>
 8004d80:	2302      	movs	r3, #2
 8004d82:	e0b4      	b.n	8004eee <HAL_TIM_ConfigClockSource+0x186>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2202      	movs	r2, #2
 8004d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004da2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004daa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dbc:	d03e      	beq.n	8004e3c <HAL_TIM_ConfigClockSource+0xd4>
 8004dbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dc2:	f200 8087 	bhi.w	8004ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8004dc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dca:	f000 8086 	beq.w	8004eda <HAL_TIM_ConfigClockSource+0x172>
 8004dce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dd2:	d87f      	bhi.n	8004ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8004dd4:	2b70      	cmp	r3, #112	@ 0x70
 8004dd6:	d01a      	beq.n	8004e0e <HAL_TIM_ConfigClockSource+0xa6>
 8004dd8:	2b70      	cmp	r3, #112	@ 0x70
 8004dda:	d87b      	bhi.n	8004ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ddc:	2b60      	cmp	r3, #96	@ 0x60
 8004dde:	d050      	beq.n	8004e82 <HAL_TIM_ConfigClockSource+0x11a>
 8004de0:	2b60      	cmp	r3, #96	@ 0x60
 8004de2:	d877      	bhi.n	8004ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8004de4:	2b50      	cmp	r3, #80	@ 0x50
 8004de6:	d03c      	beq.n	8004e62 <HAL_TIM_ConfigClockSource+0xfa>
 8004de8:	2b50      	cmp	r3, #80	@ 0x50
 8004dea:	d873      	bhi.n	8004ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8004dec:	2b40      	cmp	r3, #64	@ 0x40
 8004dee:	d058      	beq.n	8004ea2 <HAL_TIM_ConfigClockSource+0x13a>
 8004df0:	2b40      	cmp	r3, #64	@ 0x40
 8004df2:	d86f      	bhi.n	8004ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8004df4:	2b30      	cmp	r3, #48	@ 0x30
 8004df6:	d064      	beq.n	8004ec2 <HAL_TIM_ConfigClockSource+0x15a>
 8004df8:	2b30      	cmp	r3, #48	@ 0x30
 8004dfa:	d86b      	bhi.n	8004ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8004dfc:	2b20      	cmp	r3, #32
 8004dfe:	d060      	beq.n	8004ec2 <HAL_TIM_ConfigClockSource+0x15a>
 8004e00:	2b20      	cmp	r3, #32
 8004e02:	d867      	bhi.n	8004ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d05c      	beq.n	8004ec2 <HAL_TIM_ConfigClockSource+0x15a>
 8004e08:	2b10      	cmp	r3, #16
 8004e0a:	d05a      	beq.n	8004ec2 <HAL_TIM_ConfigClockSource+0x15a>
 8004e0c:	e062      	b.n	8004ed4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e1e:	f000 fb69 	bl	80054f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	609a      	str	r2, [r3, #8]
      break;
 8004e3a:	e04f      	b.n	8004edc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e4c:	f000 fb52 	bl	80054f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689a      	ldr	r2, [r3, #8]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e5e:	609a      	str	r2, [r3, #8]
      break;
 8004e60:	e03c      	b.n	8004edc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e6e:	461a      	mov	r2, r3
 8004e70:	f000 fac6 	bl	8005400 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2150      	movs	r1, #80	@ 0x50
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f000 fb1f 	bl	80054be <TIM_ITRx_SetConfig>
      break;
 8004e80:	e02c      	b.n	8004edc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e8e:	461a      	mov	r2, r3
 8004e90:	f000 fae5 	bl	800545e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2160      	movs	r1, #96	@ 0x60
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 fb0f 	bl	80054be <TIM_ITRx_SetConfig>
      break;
 8004ea0:	e01c      	b.n	8004edc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eae:	461a      	mov	r2, r3
 8004eb0:	f000 faa6 	bl	8005400 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2140      	movs	r1, #64	@ 0x40
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 faff 	bl	80054be <TIM_ITRx_SetConfig>
      break;
 8004ec0:	e00c      	b.n	8004edc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4619      	mov	r1, r3
 8004ecc:	4610      	mov	r0, r2
 8004ece:	f000 faf6 	bl	80054be <TIM_ITRx_SetConfig>
      break;
 8004ed2:	e003      	b.n	8004edc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ed8:	e000      	b.n	8004edc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004eda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b083      	sub	sp, #12
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b083      	sub	sp, #12
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f12:	bf00      	nop
 8004f14:	370c      	adds	r7, #12
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr

08004f1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f1e:	b480      	push	{r7}
 8004f20:	b083      	sub	sp, #12
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f26:	bf00      	nop
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr

08004f32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f32:	b480      	push	{r7}
 8004f34:	b083      	sub	sp, #12
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f3a:	bf00      	nop
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
	...

08004f48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a46      	ldr	r2, [pc, #280]	@ (8005074 <TIM_Base_SetConfig+0x12c>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d013      	beq.n	8004f88 <TIM_Base_SetConfig+0x40>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f66:	d00f      	beq.n	8004f88 <TIM_Base_SetConfig+0x40>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a43      	ldr	r2, [pc, #268]	@ (8005078 <TIM_Base_SetConfig+0x130>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d00b      	beq.n	8004f88 <TIM_Base_SetConfig+0x40>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a42      	ldr	r2, [pc, #264]	@ (800507c <TIM_Base_SetConfig+0x134>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d007      	beq.n	8004f88 <TIM_Base_SetConfig+0x40>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a41      	ldr	r2, [pc, #260]	@ (8005080 <TIM_Base_SetConfig+0x138>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d003      	beq.n	8004f88 <TIM_Base_SetConfig+0x40>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a40      	ldr	r2, [pc, #256]	@ (8005084 <TIM_Base_SetConfig+0x13c>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d108      	bne.n	8004f9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a35      	ldr	r2, [pc, #212]	@ (8005074 <TIM_Base_SetConfig+0x12c>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d02b      	beq.n	8004ffa <TIM_Base_SetConfig+0xb2>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fa8:	d027      	beq.n	8004ffa <TIM_Base_SetConfig+0xb2>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a32      	ldr	r2, [pc, #200]	@ (8005078 <TIM_Base_SetConfig+0x130>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d023      	beq.n	8004ffa <TIM_Base_SetConfig+0xb2>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a31      	ldr	r2, [pc, #196]	@ (800507c <TIM_Base_SetConfig+0x134>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d01f      	beq.n	8004ffa <TIM_Base_SetConfig+0xb2>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a30      	ldr	r2, [pc, #192]	@ (8005080 <TIM_Base_SetConfig+0x138>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d01b      	beq.n	8004ffa <TIM_Base_SetConfig+0xb2>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a2f      	ldr	r2, [pc, #188]	@ (8005084 <TIM_Base_SetConfig+0x13c>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d017      	beq.n	8004ffa <TIM_Base_SetConfig+0xb2>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a2e      	ldr	r2, [pc, #184]	@ (8005088 <TIM_Base_SetConfig+0x140>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d013      	beq.n	8004ffa <TIM_Base_SetConfig+0xb2>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a2d      	ldr	r2, [pc, #180]	@ (800508c <TIM_Base_SetConfig+0x144>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d00f      	beq.n	8004ffa <TIM_Base_SetConfig+0xb2>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a2c      	ldr	r2, [pc, #176]	@ (8005090 <TIM_Base_SetConfig+0x148>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d00b      	beq.n	8004ffa <TIM_Base_SetConfig+0xb2>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a2b      	ldr	r2, [pc, #172]	@ (8005094 <TIM_Base_SetConfig+0x14c>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d007      	beq.n	8004ffa <TIM_Base_SetConfig+0xb2>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a2a      	ldr	r2, [pc, #168]	@ (8005098 <TIM_Base_SetConfig+0x150>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d003      	beq.n	8004ffa <TIM_Base_SetConfig+0xb2>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a29      	ldr	r2, [pc, #164]	@ (800509c <TIM_Base_SetConfig+0x154>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d108      	bne.n	800500c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005000:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	4313      	orrs	r3, r2
 800500a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	4313      	orrs	r3, r2
 8005018:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	689a      	ldr	r2, [r3, #8]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a10      	ldr	r2, [pc, #64]	@ (8005074 <TIM_Base_SetConfig+0x12c>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d003      	beq.n	8005040 <TIM_Base_SetConfig+0xf8>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a12      	ldr	r2, [pc, #72]	@ (8005084 <TIM_Base_SetConfig+0x13c>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d103      	bne.n	8005048 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	691a      	ldr	r2, [r3, #16]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b01      	cmp	r3, #1
 8005058:	d105      	bne.n	8005066 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	f023 0201 	bic.w	r2, r3, #1
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	611a      	str	r2, [r3, #16]
  }
}
 8005066:	bf00      	nop
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	40010000 	.word	0x40010000
 8005078:	40000400 	.word	0x40000400
 800507c:	40000800 	.word	0x40000800
 8005080:	40000c00 	.word	0x40000c00
 8005084:	40010400 	.word	0x40010400
 8005088:	40014000 	.word	0x40014000
 800508c:	40014400 	.word	0x40014400
 8005090:	40014800 	.word	0x40014800
 8005094:	40001800 	.word	0x40001800
 8005098:	40001c00 	.word	0x40001c00
 800509c:	40002000 	.word	0x40002000

080050a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b087      	sub	sp, #28
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a1b      	ldr	r3, [r3, #32]
 80050b4:	f023 0201 	bic.w	r2, r3, #1
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f023 0303 	bic.w	r3, r3, #3
 80050d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	4313      	orrs	r3, r2
 80050e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f023 0302 	bic.w	r3, r3, #2
 80050e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a20      	ldr	r2, [pc, #128]	@ (8005178 <TIM_OC1_SetConfig+0xd8>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d003      	beq.n	8005104 <TIM_OC1_SetConfig+0x64>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a1f      	ldr	r2, [pc, #124]	@ (800517c <TIM_OC1_SetConfig+0xdc>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d10c      	bne.n	800511e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	f023 0308 	bic.w	r3, r3, #8
 800510a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	4313      	orrs	r3, r2
 8005114:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f023 0304 	bic.w	r3, r3, #4
 800511c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a15      	ldr	r2, [pc, #84]	@ (8005178 <TIM_OC1_SetConfig+0xd8>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d003      	beq.n	800512e <TIM_OC1_SetConfig+0x8e>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a14      	ldr	r2, [pc, #80]	@ (800517c <TIM_OC1_SetConfig+0xdc>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d111      	bne.n	8005152 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005134:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800513c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	4313      	orrs	r3, r2
 8005146:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	4313      	orrs	r3, r2
 8005150:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	621a      	str	r2, [r3, #32]
}
 800516c:	bf00      	nop
 800516e:	371c      	adds	r7, #28
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr
 8005178:	40010000 	.word	0x40010000
 800517c:	40010400 	.word	0x40010400

08005180 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005180:	b480      	push	{r7}
 8005182:	b087      	sub	sp, #28
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a1b      	ldr	r3, [r3, #32]
 8005194:	f023 0210 	bic.w	r2, r3, #16
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	021b      	lsls	r3, r3, #8
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	f023 0320 	bic.w	r3, r3, #32
 80051ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	011b      	lsls	r3, r3, #4
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a22      	ldr	r2, [pc, #136]	@ (8005264 <TIM_OC2_SetConfig+0xe4>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d003      	beq.n	80051e8 <TIM_OC2_SetConfig+0x68>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a21      	ldr	r2, [pc, #132]	@ (8005268 <TIM_OC2_SetConfig+0xe8>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d10d      	bne.n	8005204 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	011b      	lsls	r3, r3, #4
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005202:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a17      	ldr	r2, [pc, #92]	@ (8005264 <TIM_OC2_SetConfig+0xe4>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d003      	beq.n	8005214 <TIM_OC2_SetConfig+0x94>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a16      	ldr	r2, [pc, #88]	@ (8005268 <TIM_OC2_SetConfig+0xe8>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d113      	bne.n	800523c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800521a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005222:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	695b      	ldr	r3, [r3, #20]
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	4313      	orrs	r3, r2
 800522e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	4313      	orrs	r3, r2
 800523a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	621a      	str	r2, [r3, #32]
}
 8005256:	bf00      	nop
 8005258:	371c      	adds	r7, #28
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	40010000 	.word	0x40010000
 8005268:	40010400 	.word	0x40010400

0800526c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800526c:	b480      	push	{r7}
 800526e:	b087      	sub	sp, #28
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800529a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f023 0303 	bic.w	r3, r3, #3
 80052a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80052b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	021b      	lsls	r3, r3, #8
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	4313      	orrs	r3, r2
 80052c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a21      	ldr	r2, [pc, #132]	@ (800534c <TIM_OC3_SetConfig+0xe0>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d003      	beq.n	80052d2 <TIM_OC3_SetConfig+0x66>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a20      	ldr	r2, [pc, #128]	@ (8005350 <TIM_OC3_SetConfig+0xe4>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d10d      	bne.n	80052ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80052d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	021b      	lsls	r3, r3, #8
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80052ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a16      	ldr	r2, [pc, #88]	@ (800534c <TIM_OC3_SetConfig+0xe0>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d003      	beq.n	80052fe <TIM_OC3_SetConfig+0x92>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a15      	ldr	r2, [pc, #84]	@ (8005350 <TIM_OC3_SetConfig+0xe4>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d113      	bne.n	8005326 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005304:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800530c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	011b      	lsls	r3, r3, #4
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	4313      	orrs	r3, r2
 8005318:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	011b      	lsls	r3, r3, #4
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	4313      	orrs	r3, r2
 8005324:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	685a      	ldr	r2, [r3, #4]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	621a      	str	r2, [r3, #32]
}
 8005340:	bf00      	nop
 8005342:	371c      	adds	r7, #28
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr
 800534c:	40010000 	.word	0x40010000
 8005350:	40010400 	.word	0x40010400

08005354 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005354:	b480      	push	{r7}
 8005356:	b087      	sub	sp, #28
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a1b      	ldr	r3, [r3, #32]
 8005368:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	69db      	ldr	r3, [r3, #28]
 800537a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800538a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	021b      	lsls	r3, r3, #8
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	4313      	orrs	r3, r2
 8005396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800539e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	031b      	lsls	r3, r3, #12
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a12      	ldr	r2, [pc, #72]	@ (80053f8 <TIM_OC4_SetConfig+0xa4>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d003      	beq.n	80053bc <TIM_OC4_SetConfig+0x68>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a11      	ldr	r2, [pc, #68]	@ (80053fc <TIM_OC4_SetConfig+0xa8>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d109      	bne.n	80053d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	019b      	lsls	r3, r3, #6
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	621a      	str	r2, [r3, #32]
}
 80053ea:	bf00      	nop
 80053ec:	371c      	adds	r7, #28
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	40010000 	.word	0x40010000
 80053fc:	40010400 	.word	0x40010400

08005400 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005400:	b480      	push	{r7}
 8005402:	b087      	sub	sp, #28
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6a1b      	ldr	r3, [r3, #32]
 8005410:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6a1b      	ldr	r3, [r3, #32]
 8005416:	f023 0201 	bic.w	r2, r3, #1
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800542a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	011b      	lsls	r3, r3, #4
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	4313      	orrs	r3, r2
 8005434:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f023 030a 	bic.w	r3, r3, #10
 800543c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	4313      	orrs	r3, r2
 8005444:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	621a      	str	r2, [r3, #32]
}
 8005452:	bf00      	nop
 8005454:	371c      	adds	r7, #28
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800545e:	b480      	push	{r7}
 8005460:	b087      	sub	sp, #28
 8005462:	af00      	add	r7, sp, #0
 8005464:	60f8      	str	r0, [r7, #12]
 8005466:	60b9      	str	r1, [r7, #8]
 8005468:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6a1b      	ldr	r3, [r3, #32]
 8005474:	f023 0210 	bic.w	r2, r3, #16
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005488:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	031b      	lsls	r3, r3, #12
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	4313      	orrs	r3, r2
 8005492:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800549a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	011b      	lsls	r3, r3, #4
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	621a      	str	r2, [r3, #32]
}
 80054b2:	bf00      	nop
 80054b4:	371c      	adds	r7, #28
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054be:	b480      	push	{r7}
 80054c0:	b085      	sub	sp, #20
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
 80054c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054d6:	683a      	ldr	r2, [r7, #0]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4313      	orrs	r3, r2
 80054dc:	f043 0307 	orr.w	r3, r3, #7
 80054e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	609a      	str	r2, [r3, #8]
}
 80054e8:	bf00      	nop
 80054ea:	3714      	adds	r7, #20
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b087      	sub	sp, #28
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
 8005500:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800550e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	021a      	lsls	r2, r3, #8
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	431a      	orrs	r2, r3
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	4313      	orrs	r3, r2
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	4313      	orrs	r3, r2
 8005520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	609a      	str	r2, [r3, #8]
}
 8005528:	bf00      	nop
 800552a:	371c      	adds	r7, #28
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005534:	b480      	push	{r7}
 8005536:	b087      	sub	sp, #28
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	f003 031f 	and.w	r3, r3, #31
 8005546:	2201      	movs	r2, #1
 8005548:	fa02 f303 	lsl.w	r3, r2, r3
 800554c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6a1a      	ldr	r2, [r3, #32]
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	43db      	mvns	r3, r3
 8005556:	401a      	ands	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6a1a      	ldr	r2, [r3, #32]
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	f003 031f 	and.w	r3, r3, #31
 8005566:	6879      	ldr	r1, [r7, #4]
 8005568:	fa01 f303 	lsl.w	r3, r1, r3
 800556c:	431a      	orrs	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	621a      	str	r2, [r3, #32]
}
 8005572:	bf00      	nop
 8005574:	371c      	adds	r7, #28
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
	...

08005580 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005590:	2b01      	cmp	r3, #1
 8005592:	d101      	bne.n	8005598 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005594:	2302      	movs	r3, #2
 8005596:	e05a      	b.n	800564e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2202      	movs	r2, #2
 80055a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a21      	ldr	r2, [pc, #132]	@ (800565c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d022      	beq.n	8005622 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055e4:	d01d      	beq.n	8005622 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a1d      	ldr	r2, [pc, #116]	@ (8005660 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d018      	beq.n	8005622 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a1b      	ldr	r2, [pc, #108]	@ (8005664 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d013      	beq.n	8005622 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a1a      	ldr	r2, [pc, #104]	@ (8005668 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d00e      	beq.n	8005622 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a18      	ldr	r2, [pc, #96]	@ (800566c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d009      	beq.n	8005622 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a17      	ldr	r2, [pc, #92]	@ (8005670 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d004      	beq.n	8005622 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a15      	ldr	r2, [pc, #84]	@ (8005674 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d10c      	bne.n	800563c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005628:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	4313      	orrs	r3, r2
 8005632:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3714      	adds	r7, #20
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	40010000 	.word	0x40010000
 8005660:	40000400 	.word	0x40000400
 8005664:	40000800 	.word	0x40000800
 8005668:	40000c00 	.word	0x40000c00
 800566c:	40010400 	.word	0x40010400
 8005670:	40014000 	.word	0x40014000
 8005674:	40001800 	.word	0x40001800

08005678 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e042      	b.n	8005738 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d106      	bne.n	80056cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f7fd f8f4 	bl	80028b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2224      	movs	r2, #36	@ 0x24
 80056d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68da      	ldr	r2, [r3, #12]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80056e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 fc85 	bl	8005ff4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	691a      	ldr	r2, [r3, #16]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80056f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	695a      	ldr	r2, [r3, #20]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005708:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68da      	ldr	r2, [r3, #12]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005718:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2220      	movs	r2, #32
 8005724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2220      	movs	r2, #32
 800572c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3708      	adds	r7, #8
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b0ba      	sub	sp, #232	@ 0xe8
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005766:	2300      	movs	r3, #0
 8005768:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800576c:	2300      	movs	r3, #0
 800576e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005776:	f003 030f 	and.w	r3, r3, #15
 800577a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800577e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10f      	bne.n	80057a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800578a:	f003 0320 	and.w	r3, r3, #32
 800578e:	2b00      	cmp	r3, #0
 8005790:	d009      	beq.n	80057a6 <HAL_UART_IRQHandler+0x66>
 8005792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005796:	f003 0320 	and.w	r3, r3, #32
 800579a:	2b00      	cmp	r3, #0
 800579c:	d003      	beq.n	80057a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 fb69 	bl	8005e76 <UART_Receive_IT>
      return;
 80057a4:	e25b      	b.n	8005c5e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80057a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	f000 80de 	beq.w	800596c <HAL_UART_IRQHandler+0x22c>
 80057b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d106      	bne.n	80057ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80057bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057c0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f000 80d1 	beq.w	800596c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80057ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00b      	beq.n	80057ee <HAL_UART_IRQHandler+0xae>
 80057d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d005      	beq.n	80057ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057e6:	f043 0201 	orr.w	r2, r3, #1
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057f2:	f003 0304 	and.w	r3, r3, #4
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00b      	beq.n	8005812 <HAL_UART_IRQHandler+0xd2>
 80057fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b00      	cmp	r3, #0
 8005804:	d005      	beq.n	8005812 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800580a:	f043 0202 	orr.w	r2, r3, #2
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005816:	f003 0302 	and.w	r3, r3, #2
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00b      	beq.n	8005836 <HAL_UART_IRQHandler+0xf6>
 800581e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	2b00      	cmp	r3, #0
 8005828:	d005      	beq.n	8005836 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800582e:	f043 0204 	orr.w	r2, r3, #4
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800583a:	f003 0308 	and.w	r3, r3, #8
 800583e:	2b00      	cmp	r3, #0
 8005840:	d011      	beq.n	8005866 <HAL_UART_IRQHandler+0x126>
 8005842:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005846:	f003 0320 	and.w	r3, r3, #32
 800584a:	2b00      	cmp	r3, #0
 800584c:	d105      	bne.n	800585a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800584e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	2b00      	cmp	r3, #0
 8005858:	d005      	beq.n	8005866 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800585e:	f043 0208 	orr.w	r2, r3, #8
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800586a:	2b00      	cmp	r3, #0
 800586c:	f000 81f2 	beq.w	8005c54 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005874:	f003 0320 	and.w	r3, r3, #32
 8005878:	2b00      	cmp	r3, #0
 800587a:	d008      	beq.n	800588e <HAL_UART_IRQHandler+0x14e>
 800587c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005880:	f003 0320 	and.w	r3, r3, #32
 8005884:	2b00      	cmp	r3, #0
 8005886:	d002      	beq.n	800588e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 faf4 	bl	8005e76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005898:	2b40      	cmp	r3, #64	@ 0x40
 800589a:	bf0c      	ite	eq
 800589c:	2301      	moveq	r3, #1
 800589e:	2300      	movne	r3, #0
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058aa:	f003 0308 	and.w	r3, r3, #8
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d103      	bne.n	80058ba <HAL_UART_IRQHandler+0x17a>
 80058b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d04f      	beq.n	800595a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f9fc 	bl	8005cb8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ca:	2b40      	cmp	r3, #64	@ 0x40
 80058cc:	d141      	bne.n	8005952 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	3314      	adds	r3, #20
 80058d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80058dc:	e853 3f00 	ldrex	r3, [r3]
 80058e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80058e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80058e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	3314      	adds	r3, #20
 80058f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80058fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80058fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005902:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005906:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800590a:	e841 2300 	strex	r3, r2, [r1]
 800590e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005912:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1d9      	bne.n	80058ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800591e:	2b00      	cmp	r3, #0
 8005920:	d013      	beq.n	800594a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005926:	4a7e      	ldr	r2, [pc, #504]	@ (8005b20 <HAL_UART_IRQHandler+0x3e0>)
 8005928:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800592e:	4618      	mov	r0, r3
 8005930:	f7fd ff5b 	bl	80037ea <HAL_DMA_Abort_IT>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d016      	beq.n	8005968 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800593e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005944:	4610      	mov	r0, r2
 8005946:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005948:	e00e      	b.n	8005968 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 f99e 	bl	8005c8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005950:	e00a      	b.n	8005968 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 f99a 	bl	8005c8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005958:	e006      	b.n	8005968 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 f996 	bl	8005c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005966:	e175      	b.n	8005c54 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005968:	bf00      	nop
    return;
 800596a:	e173      	b.n	8005c54 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005970:	2b01      	cmp	r3, #1
 8005972:	f040 814f 	bne.w	8005c14 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800597a:	f003 0310 	and.w	r3, r3, #16
 800597e:	2b00      	cmp	r3, #0
 8005980:	f000 8148 	beq.w	8005c14 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005988:	f003 0310 	and.w	r3, r3, #16
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 8141 	beq.w	8005c14 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005992:	2300      	movs	r3, #0
 8005994:	60bb      	str	r3, [r7, #8]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	60bb      	str	r3, [r7, #8]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	60bb      	str	r3, [r7, #8]
 80059a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059b2:	2b40      	cmp	r3, #64	@ 0x40
 80059b4:	f040 80b6 	bne.w	8005b24 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 8145 	beq.w	8005c58 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80059d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059d6:	429a      	cmp	r2, r3
 80059d8:	f080 813e 	bcs.w	8005c58 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059e8:	69db      	ldr	r3, [r3, #28]
 80059ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059ee:	f000 8088 	beq.w	8005b02 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	330c      	adds	r3, #12
 80059f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a00:	e853 3f00 	ldrex	r3, [r3]
 8005a04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005a08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	330c      	adds	r3, #12
 8005a1a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005a1e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a26:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005a2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005a2e:	e841 2300 	strex	r3, r2, [r1]
 8005a32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005a36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1d9      	bne.n	80059f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	3314      	adds	r3, #20
 8005a44:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a48:	e853 3f00 	ldrex	r3, [r3]
 8005a4c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005a4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a50:	f023 0301 	bic.w	r3, r3, #1
 8005a54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	3314      	adds	r3, #20
 8005a5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005a62:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005a66:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a68:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005a6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005a6e:	e841 2300 	strex	r3, r2, [r1]
 8005a72:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005a74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1e1      	bne.n	8005a3e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	3314      	adds	r3, #20
 8005a80:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a84:	e853 3f00 	ldrex	r3, [r3]
 8005a88:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005a8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	3314      	adds	r3, #20
 8005a9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005a9e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005aa0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005aa4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005aa6:	e841 2300 	strex	r3, r2, [r1]
 8005aaa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005aac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1e3      	bne.n	8005a7a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2220      	movs	r2, #32
 8005ab6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	330c      	adds	r3, #12
 8005ac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005aca:	e853 3f00 	ldrex	r3, [r3]
 8005ace:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005ad0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ad2:	f023 0310 	bic.w	r3, r3, #16
 8005ad6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	330c      	adds	r3, #12
 8005ae0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005ae4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005ae6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005aea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005aec:	e841 2300 	strex	r3, r2, [r1]
 8005af0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005af2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d1e3      	bne.n	8005ac0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005afc:	4618      	mov	r0, r3
 8005afe:	f7fd fe04 	bl	800370a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2202      	movs	r2, #2
 8005b06:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	1ad3      	subs	r3, r2, r3
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	4619      	mov	r1, r3
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 f8c1 	bl	8005ca0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b1e:	e09b      	b.n	8005c58 <HAL_UART_IRQHandler+0x518>
 8005b20:	08005d7f 	.word	0x08005d7f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	f000 808e 	beq.w	8005c5c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005b40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f000 8089 	beq.w	8005c5c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	330c      	adds	r3, #12
 8005b50:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b54:	e853 3f00 	ldrex	r3, [r3]
 8005b58:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b60:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	330c      	adds	r3, #12
 8005b6a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005b6e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005b70:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b72:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b76:	e841 2300 	strex	r3, r2, [r1]
 8005b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1e3      	bne.n	8005b4a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	3314      	adds	r3, #20
 8005b88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b8c:	e853 3f00 	ldrex	r3, [r3]
 8005b90:	623b      	str	r3, [r7, #32]
   return(result);
 8005b92:	6a3b      	ldr	r3, [r7, #32]
 8005b94:	f023 0301 	bic.w	r3, r3, #1
 8005b98:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	3314      	adds	r3, #20
 8005ba2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005ba6:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005baa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005bac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bae:	e841 2300 	strex	r3, r2, [r1]
 8005bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1e3      	bne.n	8005b82 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	330c      	adds	r3, #12
 8005bce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	e853 3f00 	ldrex	r3, [r3]
 8005bd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f023 0310 	bic.w	r3, r3, #16
 8005bde:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	330c      	adds	r3, #12
 8005be8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005bec:	61fa      	str	r2, [r7, #28]
 8005bee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf0:	69b9      	ldr	r1, [r7, #24]
 8005bf2:	69fa      	ldr	r2, [r7, #28]
 8005bf4:	e841 2300 	strex	r3, r2, [r1]
 8005bf8:	617b      	str	r3, [r7, #20]
   return(result);
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1e3      	bne.n	8005bc8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2202      	movs	r2, #2
 8005c04:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 f847 	bl	8005ca0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c12:	e023      	b.n	8005c5c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d009      	beq.n	8005c34 <HAL_UART_IRQHandler+0x4f4>
 8005c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d003      	beq.n	8005c34 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 f8ba 	bl	8005da6 <UART_Transmit_IT>
    return;
 8005c32:	e014      	b.n	8005c5e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00e      	beq.n	8005c5e <HAL_UART_IRQHandler+0x51e>
 8005c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d008      	beq.n	8005c5e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 f8fa 	bl	8005e46 <UART_EndTransmit_IT>
    return;
 8005c52:	e004      	b.n	8005c5e <HAL_UART_IRQHandler+0x51e>
    return;
 8005c54:	bf00      	nop
 8005c56:	e002      	b.n	8005c5e <HAL_UART_IRQHandler+0x51e>
      return;
 8005c58:	bf00      	nop
 8005c5a:	e000      	b.n	8005c5e <HAL_UART_IRQHandler+0x51e>
      return;
 8005c5c:	bf00      	nop
  }
}
 8005c5e:	37e8      	adds	r7, #232	@ 0xe8
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	460b      	mov	r3, r1
 8005caa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b095      	sub	sp, #84	@ 0x54
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	330c      	adds	r3, #12
 8005cc6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cca:	e853 3f00 	ldrex	r3, [r3]
 8005cce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	330c      	adds	r3, #12
 8005cde:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ce0:	643a      	str	r2, [r7, #64]	@ 0x40
 8005ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ce6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ce8:	e841 2300 	strex	r3, r2, [r1]
 8005cec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1e5      	bne.n	8005cc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	3314      	adds	r3, #20
 8005cfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfc:	6a3b      	ldr	r3, [r7, #32]
 8005cfe:	e853 3f00 	ldrex	r3, [r3]
 8005d02:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	f023 0301 	bic.w	r3, r3, #1
 8005d0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	3314      	adds	r3, #20
 8005d12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d14:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d1c:	e841 2300 	strex	r3, r2, [r1]
 8005d20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1e5      	bne.n	8005cf4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d119      	bne.n	8005d64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	330c      	adds	r3, #12
 8005d36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	e853 3f00 	ldrex	r3, [r3]
 8005d3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	f023 0310 	bic.w	r3, r3, #16
 8005d46:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	330c      	adds	r3, #12
 8005d4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d50:	61ba      	str	r2, [r7, #24]
 8005d52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d54:	6979      	ldr	r1, [r7, #20]
 8005d56:	69ba      	ldr	r2, [r7, #24]
 8005d58:	e841 2300 	strex	r3, r2, [r1]
 8005d5c:	613b      	str	r3, [r7, #16]
   return(result);
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1e5      	bne.n	8005d30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2220      	movs	r2, #32
 8005d68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005d72:	bf00      	nop
 8005d74:	3754      	adds	r7, #84	@ 0x54
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b084      	sub	sp, #16
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f7ff ff77 	bl	8005c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d9e:	bf00      	nop
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005da6:	b480      	push	{r7}
 8005da8:	b085      	sub	sp, #20
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b21      	cmp	r3, #33	@ 0x21
 8005db8:	d13e      	bne.n	8005e38 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dc2:	d114      	bne.n	8005dee <UART_Transmit_IT+0x48>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d110      	bne.n	8005dee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a1b      	ldr	r3, [r3, #32]
 8005dd0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	881b      	ldrh	r3, [r3, #0]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005de0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a1b      	ldr	r3, [r3, #32]
 8005de6:	1c9a      	adds	r2, r3, #2
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	621a      	str	r2, [r3, #32]
 8005dec:	e008      	b.n	8005e00 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	1c59      	adds	r1, r3, #1
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	6211      	str	r1, [r2, #32]
 8005df8:	781a      	ldrb	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	3b01      	subs	r3, #1
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10f      	bne.n	8005e34 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68da      	ldr	r2, [r3, #12]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e22:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68da      	ldr	r2, [r3, #12]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e32:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e34:	2300      	movs	r3, #0
 8005e36:	e000      	b.n	8005e3a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e38:	2302      	movs	r3, #2
  }
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3714      	adds	r7, #20
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr

08005e46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b082      	sub	sp, #8
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68da      	ldr	r2, [r3, #12]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2220      	movs	r2, #32
 8005e62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7ff fefc 	bl	8005c64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3708      	adds	r7, #8
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b08c      	sub	sp, #48	@ 0x30
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b22      	cmp	r3, #34	@ 0x22
 8005e88:	f040 80ae 	bne.w	8005fe8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e94:	d117      	bne.n	8005ec6 <UART_Receive_IT+0x50>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d113      	bne.n	8005ec6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ebe:	1c9a      	adds	r2, r3, #2
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	629a      	str	r2, [r3, #40]	@ 0x28
 8005ec4:	e026      	b.n	8005f14 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ed8:	d007      	beq.n	8005eea <UART_Receive_IT+0x74>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d10a      	bne.n	8005ef8 <UART_Receive_IT+0x82>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d106      	bne.n	8005ef8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	b2da      	uxtb	r2, r3
 8005ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ef4:	701a      	strb	r2, [r3, #0]
 8005ef6:	e008      	b.n	8005f0a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f04:	b2da      	uxtb	r2, r3
 8005f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f08:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f0e:	1c5a      	adds	r2, r3, #1
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	4619      	mov	r1, r3
 8005f22:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d15d      	bne.n	8005fe4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68da      	ldr	r2, [r3, #12]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f022 0220 	bic.w	r2, r2, #32
 8005f36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68da      	ldr	r2, [r3, #12]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	695a      	ldr	r2, [r3, #20]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f022 0201 	bic.w	r2, r2, #1
 8005f56:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2220      	movs	r2, #32
 8005f5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d135      	bne.n	8005fda <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	330c      	adds	r3, #12
 8005f7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	e853 3f00 	ldrex	r3, [r3]
 8005f82:	613b      	str	r3, [r7, #16]
   return(result);
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	f023 0310 	bic.w	r3, r3, #16
 8005f8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	330c      	adds	r3, #12
 8005f92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f94:	623a      	str	r2, [r7, #32]
 8005f96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f98:	69f9      	ldr	r1, [r7, #28]
 8005f9a:	6a3a      	ldr	r2, [r7, #32]
 8005f9c:	e841 2300 	strex	r3, r2, [r1]
 8005fa0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1e5      	bne.n	8005f74 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0310 	and.w	r3, r3, #16
 8005fb2:	2b10      	cmp	r3, #16
 8005fb4:	d10a      	bne.n	8005fcc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	60fb      	str	r3, [r7, #12]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	60fb      	str	r3, [r7, #12]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	60fb      	str	r3, [r7, #12]
 8005fca:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7ff fe64 	bl	8005ca0 <HAL_UARTEx_RxEventCallback>
 8005fd8:	e002      	b.n	8005fe0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7ff fe4c 	bl	8005c78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	e002      	b.n	8005fea <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	e000      	b.n	8005fea <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005fe8:	2302      	movs	r3, #2
  }
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3730      	adds	r7, #48	@ 0x30
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
	...

08005ff4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ff4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ff8:	b0c0      	sub	sp, #256	@ 0x100
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800600c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006010:	68d9      	ldr	r1, [r3, #12]
 8006012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	ea40 0301 	orr.w	r3, r0, r1
 800601c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800601e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006022:	689a      	ldr	r2, [r3, #8]
 8006024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	431a      	orrs	r2, r3
 800602c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006030:	695b      	ldr	r3, [r3, #20]
 8006032:	431a      	orrs	r2, r3
 8006034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006038:	69db      	ldr	r3, [r3, #28]
 800603a:	4313      	orrs	r3, r2
 800603c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800604c:	f021 010c 	bic.w	r1, r1, #12
 8006050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800605a:	430b      	orrs	r3, r1
 800605c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800605e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800606a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800606e:	6999      	ldr	r1, [r3, #24]
 8006070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	ea40 0301 	orr.w	r3, r0, r1
 800607a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800607c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	4b8f      	ldr	r3, [pc, #572]	@ (80062c0 <UART_SetConfig+0x2cc>)
 8006084:	429a      	cmp	r2, r3
 8006086:	d005      	beq.n	8006094 <UART_SetConfig+0xa0>
 8006088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	4b8d      	ldr	r3, [pc, #564]	@ (80062c4 <UART_SetConfig+0x2d0>)
 8006090:	429a      	cmp	r2, r3
 8006092:	d104      	bne.n	800609e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006094:	f7fe fa50 	bl	8004538 <HAL_RCC_GetPCLK2Freq>
 8006098:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800609c:	e003      	b.n	80060a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800609e:	f7fe fa37 	bl	8004510 <HAL_RCC_GetPCLK1Freq>
 80060a2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060aa:	69db      	ldr	r3, [r3, #28]
 80060ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060b0:	f040 810c 	bne.w	80062cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80060b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060b8:	2200      	movs	r2, #0
 80060ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80060be:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80060c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80060c6:	4622      	mov	r2, r4
 80060c8:	462b      	mov	r3, r5
 80060ca:	1891      	adds	r1, r2, r2
 80060cc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80060ce:	415b      	adcs	r3, r3
 80060d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80060d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80060d6:	4621      	mov	r1, r4
 80060d8:	eb12 0801 	adds.w	r8, r2, r1
 80060dc:	4629      	mov	r1, r5
 80060de:	eb43 0901 	adc.w	r9, r3, r1
 80060e2:	f04f 0200 	mov.w	r2, #0
 80060e6:	f04f 0300 	mov.w	r3, #0
 80060ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060f6:	4690      	mov	r8, r2
 80060f8:	4699      	mov	r9, r3
 80060fa:	4623      	mov	r3, r4
 80060fc:	eb18 0303 	adds.w	r3, r8, r3
 8006100:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006104:	462b      	mov	r3, r5
 8006106:	eb49 0303 	adc.w	r3, r9, r3
 800610a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800610e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800611a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800611e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006122:	460b      	mov	r3, r1
 8006124:	18db      	adds	r3, r3, r3
 8006126:	653b      	str	r3, [r7, #80]	@ 0x50
 8006128:	4613      	mov	r3, r2
 800612a:	eb42 0303 	adc.w	r3, r2, r3
 800612e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006130:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006134:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006138:	f7fa f89a 	bl	8000270 <__aeabi_uldivmod>
 800613c:	4602      	mov	r2, r0
 800613e:	460b      	mov	r3, r1
 8006140:	4b61      	ldr	r3, [pc, #388]	@ (80062c8 <UART_SetConfig+0x2d4>)
 8006142:	fba3 2302 	umull	r2, r3, r3, r2
 8006146:	095b      	lsrs	r3, r3, #5
 8006148:	011c      	lsls	r4, r3, #4
 800614a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800614e:	2200      	movs	r2, #0
 8006150:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006154:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006158:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800615c:	4642      	mov	r2, r8
 800615e:	464b      	mov	r3, r9
 8006160:	1891      	adds	r1, r2, r2
 8006162:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006164:	415b      	adcs	r3, r3
 8006166:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006168:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800616c:	4641      	mov	r1, r8
 800616e:	eb12 0a01 	adds.w	sl, r2, r1
 8006172:	4649      	mov	r1, r9
 8006174:	eb43 0b01 	adc.w	fp, r3, r1
 8006178:	f04f 0200 	mov.w	r2, #0
 800617c:	f04f 0300 	mov.w	r3, #0
 8006180:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006184:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006188:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800618c:	4692      	mov	sl, r2
 800618e:	469b      	mov	fp, r3
 8006190:	4643      	mov	r3, r8
 8006192:	eb1a 0303 	adds.w	r3, sl, r3
 8006196:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800619a:	464b      	mov	r3, r9
 800619c:	eb4b 0303 	adc.w	r3, fp, r3
 80061a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80061a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80061b0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80061b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80061b8:	460b      	mov	r3, r1
 80061ba:	18db      	adds	r3, r3, r3
 80061bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80061be:	4613      	mov	r3, r2
 80061c0:	eb42 0303 	adc.w	r3, r2, r3
 80061c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80061c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80061ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80061ce:	f7fa f84f 	bl	8000270 <__aeabi_uldivmod>
 80061d2:	4602      	mov	r2, r0
 80061d4:	460b      	mov	r3, r1
 80061d6:	4611      	mov	r1, r2
 80061d8:	4b3b      	ldr	r3, [pc, #236]	@ (80062c8 <UART_SetConfig+0x2d4>)
 80061da:	fba3 2301 	umull	r2, r3, r3, r1
 80061de:	095b      	lsrs	r3, r3, #5
 80061e0:	2264      	movs	r2, #100	@ 0x64
 80061e2:	fb02 f303 	mul.w	r3, r2, r3
 80061e6:	1acb      	subs	r3, r1, r3
 80061e8:	00db      	lsls	r3, r3, #3
 80061ea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80061ee:	4b36      	ldr	r3, [pc, #216]	@ (80062c8 <UART_SetConfig+0x2d4>)
 80061f0:	fba3 2302 	umull	r2, r3, r3, r2
 80061f4:	095b      	lsrs	r3, r3, #5
 80061f6:	005b      	lsls	r3, r3, #1
 80061f8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80061fc:	441c      	add	r4, r3
 80061fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006202:	2200      	movs	r2, #0
 8006204:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006208:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800620c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006210:	4642      	mov	r2, r8
 8006212:	464b      	mov	r3, r9
 8006214:	1891      	adds	r1, r2, r2
 8006216:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006218:	415b      	adcs	r3, r3
 800621a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800621c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006220:	4641      	mov	r1, r8
 8006222:	1851      	adds	r1, r2, r1
 8006224:	6339      	str	r1, [r7, #48]	@ 0x30
 8006226:	4649      	mov	r1, r9
 8006228:	414b      	adcs	r3, r1
 800622a:	637b      	str	r3, [r7, #52]	@ 0x34
 800622c:	f04f 0200 	mov.w	r2, #0
 8006230:	f04f 0300 	mov.w	r3, #0
 8006234:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006238:	4659      	mov	r1, fp
 800623a:	00cb      	lsls	r3, r1, #3
 800623c:	4651      	mov	r1, sl
 800623e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006242:	4651      	mov	r1, sl
 8006244:	00ca      	lsls	r2, r1, #3
 8006246:	4610      	mov	r0, r2
 8006248:	4619      	mov	r1, r3
 800624a:	4603      	mov	r3, r0
 800624c:	4642      	mov	r2, r8
 800624e:	189b      	adds	r3, r3, r2
 8006250:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006254:	464b      	mov	r3, r9
 8006256:	460a      	mov	r2, r1
 8006258:	eb42 0303 	adc.w	r3, r2, r3
 800625c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800626c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006270:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006274:	460b      	mov	r3, r1
 8006276:	18db      	adds	r3, r3, r3
 8006278:	62bb      	str	r3, [r7, #40]	@ 0x28
 800627a:	4613      	mov	r3, r2
 800627c:	eb42 0303 	adc.w	r3, r2, r3
 8006280:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006282:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006286:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800628a:	f7f9 fff1 	bl	8000270 <__aeabi_uldivmod>
 800628e:	4602      	mov	r2, r0
 8006290:	460b      	mov	r3, r1
 8006292:	4b0d      	ldr	r3, [pc, #52]	@ (80062c8 <UART_SetConfig+0x2d4>)
 8006294:	fba3 1302 	umull	r1, r3, r3, r2
 8006298:	095b      	lsrs	r3, r3, #5
 800629a:	2164      	movs	r1, #100	@ 0x64
 800629c:	fb01 f303 	mul.w	r3, r1, r3
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	00db      	lsls	r3, r3, #3
 80062a4:	3332      	adds	r3, #50	@ 0x32
 80062a6:	4a08      	ldr	r2, [pc, #32]	@ (80062c8 <UART_SetConfig+0x2d4>)
 80062a8:	fba2 2303 	umull	r2, r3, r2, r3
 80062ac:	095b      	lsrs	r3, r3, #5
 80062ae:	f003 0207 	and.w	r2, r3, #7
 80062b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4422      	add	r2, r4
 80062ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80062bc:	e106      	b.n	80064cc <UART_SetConfig+0x4d8>
 80062be:	bf00      	nop
 80062c0:	40011000 	.word	0x40011000
 80062c4:	40011400 	.word	0x40011400
 80062c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062d0:	2200      	movs	r2, #0
 80062d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80062d6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80062da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80062de:	4642      	mov	r2, r8
 80062e0:	464b      	mov	r3, r9
 80062e2:	1891      	adds	r1, r2, r2
 80062e4:	6239      	str	r1, [r7, #32]
 80062e6:	415b      	adcs	r3, r3
 80062e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80062ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80062ee:	4641      	mov	r1, r8
 80062f0:	1854      	adds	r4, r2, r1
 80062f2:	4649      	mov	r1, r9
 80062f4:	eb43 0501 	adc.w	r5, r3, r1
 80062f8:	f04f 0200 	mov.w	r2, #0
 80062fc:	f04f 0300 	mov.w	r3, #0
 8006300:	00eb      	lsls	r3, r5, #3
 8006302:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006306:	00e2      	lsls	r2, r4, #3
 8006308:	4614      	mov	r4, r2
 800630a:	461d      	mov	r5, r3
 800630c:	4643      	mov	r3, r8
 800630e:	18e3      	adds	r3, r4, r3
 8006310:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006314:	464b      	mov	r3, r9
 8006316:	eb45 0303 	adc.w	r3, r5, r3
 800631a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800631e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800632a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800632e:	f04f 0200 	mov.w	r2, #0
 8006332:	f04f 0300 	mov.w	r3, #0
 8006336:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800633a:	4629      	mov	r1, r5
 800633c:	008b      	lsls	r3, r1, #2
 800633e:	4621      	mov	r1, r4
 8006340:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006344:	4621      	mov	r1, r4
 8006346:	008a      	lsls	r2, r1, #2
 8006348:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800634c:	f7f9 ff90 	bl	8000270 <__aeabi_uldivmod>
 8006350:	4602      	mov	r2, r0
 8006352:	460b      	mov	r3, r1
 8006354:	4b60      	ldr	r3, [pc, #384]	@ (80064d8 <UART_SetConfig+0x4e4>)
 8006356:	fba3 2302 	umull	r2, r3, r3, r2
 800635a:	095b      	lsrs	r3, r3, #5
 800635c:	011c      	lsls	r4, r3, #4
 800635e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006362:	2200      	movs	r2, #0
 8006364:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006368:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800636c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006370:	4642      	mov	r2, r8
 8006372:	464b      	mov	r3, r9
 8006374:	1891      	adds	r1, r2, r2
 8006376:	61b9      	str	r1, [r7, #24]
 8006378:	415b      	adcs	r3, r3
 800637a:	61fb      	str	r3, [r7, #28]
 800637c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006380:	4641      	mov	r1, r8
 8006382:	1851      	adds	r1, r2, r1
 8006384:	6139      	str	r1, [r7, #16]
 8006386:	4649      	mov	r1, r9
 8006388:	414b      	adcs	r3, r1
 800638a:	617b      	str	r3, [r7, #20]
 800638c:	f04f 0200 	mov.w	r2, #0
 8006390:	f04f 0300 	mov.w	r3, #0
 8006394:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006398:	4659      	mov	r1, fp
 800639a:	00cb      	lsls	r3, r1, #3
 800639c:	4651      	mov	r1, sl
 800639e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063a2:	4651      	mov	r1, sl
 80063a4:	00ca      	lsls	r2, r1, #3
 80063a6:	4610      	mov	r0, r2
 80063a8:	4619      	mov	r1, r3
 80063aa:	4603      	mov	r3, r0
 80063ac:	4642      	mov	r2, r8
 80063ae:	189b      	adds	r3, r3, r2
 80063b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80063b4:	464b      	mov	r3, r9
 80063b6:	460a      	mov	r2, r1
 80063b8:	eb42 0303 	adc.w	r3, r2, r3
 80063bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80063c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80063ca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80063cc:	f04f 0200 	mov.w	r2, #0
 80063d0:	f04f 0300 	mov.w	r3, #0
 80063d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80063d8:	4649      	mov	r1, r9
 80063da:	008b      	lsls	r3, r1, #2
 80063dc:	4641      	mov	r1, r8
 80063de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063e2:	4641      	mov	r1, r8
 80063e4:	008a      	lsls	r2, r1, #2
 80063e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80063ea:	f7f9 ff41 	bl	8000270 <__aeabi_uldivmod>
 80063ee:	4602      	mov	r2, r0
 80063f0:	460b      	mov	r3, r1
 80063f2:	4611      	mov	r1, r2
 80063f4:	4b38      	ldr	r3, [pc, #224]	@ (80064d8 <UART_SetConfig+0x4e4>)
 80063f6:	fba3 2301 	umull	r2, r3, r3, r1
 80063fa:	095b      	lsrs	r3, r3, #5
 80063fc:	2264      	movs	r2, #100	@ 0x64
 80063fe:	fb02 f303 	mul.w	r3, r2, r3
 8006402:	1acb      	subs	r3, r1, r3
 8006404:	011b      	lsls	r3, r3, #4
 8006406:	3332      	adds	r3, #50	@ 0x32
 8006408:	4a33      	ldr	r2, [pc, #204]	@ (80064d8 <UART_SetConfig+0x4e4>)
 800640a:	fba2 2303 	umull	r2, r3, r2, r3
 800640e:	095b      	lsrs	r3, r3, #5
 8006410:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006414:	441c      	add	r4, r3
 8006416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800641a:	2200      	movs	r2, #0
 800641c:	673b      	str	r3, [r7, #112]	@ 0x70
 800641e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006420:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006424:	4642      	mov	r2, r8
 8006426:	464b      	mov	r3, r9
 8006428:	1891      	adds	r1, r2, r2
 800642a:	60b9      	str	r1, [r7, #8]
 800642c:	415b      	adcs	r3, r3
 800642e:	60fb      	str	r3, [r7, #12]
 8006430:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006434:	4641      	mov	r1, r8
 8006436:	1851      	adds	r1, r2, r1
 8006438:	6039      	str	r1, [r7, #0]
 800643a:	4649      	mov	r1, r9
 800643c:	414b      	adcs	r3, r1
 800643e:	607b      	str	r3, [r7, #4]
 8006440:	f04f 0200 	mov.w	r2, #0
 8006444:	f04f 0300 	mov.w	r3, #0
 8006448:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800644c:	4659      	mov	r1, fp
 800644e:	00cb      	lsls	r3, r1, #3
 8006450:	4651      	mov	r1, sl
 8006452:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006456:	4651      	mov	r1, sl
 8006458:	00ca      	lsls	r2, r1, #3
 800645a:	4610      	mov	r0, r2
 800645c:	4619      	mov	r1, r3
 800645e:	4603      	mov	r3, r0
 8006460:	4642      	mov	r2, r8
 8006462:	189b      	adds	r3, r3, r2
 8006464:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006466:	464b      	mov	r3, r9
 8006468:	460a      	mov	r2, r1
 800646a:	eb42 0303 	adc.w	r3, r2, r3
 800646e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	663b      	str	r3, [r7, #96]	@ 0x60
 800647a:	667a      	str	r2, [r7, #100]	@ 0x64
 800647c:	f04f 0200 	mov.w	r2, #0
 8006480:	f04f 0300 	mov.w	r3, #0
 8006484:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006488:	4649      	mov	r1, r9
 800648a:	008b      	lsls	r3, r1, #2
 800648c:	4641      	mov	r1, r8
 800648e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006492:	4641      	mov	r1, r8
 8006494:	008a      	lsls	r2, r1, #2
 8006496:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800649a:	f7f9 fee9 	bl	8000270 <__aeabi_uldivmod>
 800649e:	4602      	mov	r2, r0
 80064a0:	460b      	mov	r3, r1
 80064a2:	4b0d      	ldr	r3, [pc, #52]	@ (80064d8 <UART_SetConfig+0x4e4>)
 80064a4:	fba3 1302 	umull	r1, r3, r3, r2
 80064a8:	095b      	lsrs	r3, r3, #5
 80064aa:	2164      	movs	r1, #100	@ 0x64
 80064ac:	fb01 f303 	mul.w	r3, r1, r3
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	011b      	lsls	r3, r3, #4
 80064b4:	3332      	adds	r3, #50	@ 0x32
 80064b6:	4a08      	ldr	r2, [pc, #32]	@ (80064d8 <UART_SetConfig+0x4e4>)
 80064b8:	fba2 2303 	umull	r2, r3, r2, r3
 80064bc:	095b      	lsrs	r3, r3, #5
 80064be:	f003 020f 	and.w	r2, r3, #15
 80064c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4422      	add	r2, r4
 80064ca:	609a      	str	r2, [r3, #8]
}
 80064cc:	bf00      	nop
 80064ce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80064d2:	46bd      	mov	sp, r7
 80064d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064d8:	51eb851f 	.word	0x51eb851f

080064dc <siprintf>:
 80064dc:	b40e      	push	{r1, r2, r3}
 80064de:	b500      	push	{lr}
 80064e0:	b09c      	sub	sp, #112	@ 0x70
 80064e2:	ab1d      	add	r3, sp, #116	@ 0x74
 80064e4:	9002      	str	r0, [sp, #8]
 80064e6:	9006      	str	r0, [sp, #24]
 80064e8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80064ec:	4809      	ldr	r0, [pc, #36]	@ (8006514 <siprintf+0x38>)
 80064ee:	9107      	str	r1, [sp, #28]
 80064f0:	9104      	str	r1, [sp, #16]
 80064f2:	4909      	ldr	r1, [pc, #36]	@ (8006518 <siprintf+0x3c>)
 80064f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80064f8:	9105      	str	r1, [sp, #20]
 80064fa:	6800      	ldr	r0, [r0, #0]
 80064fc:	9301      	str	r3, [sp, #4]
 80064fe:	a902      	add	r1, sp, #8
 8006500:	f000 f994 	bl	800682c <_svfiprintf_r>
 8006504:	9b02      	ldr	r3, [sp, #8]
 8006506:	2200      	movs	r2, #0
 8006508:	701a      	strb	r2, [r3, #0]
 800650a:	b01c      	add	sp, #112	@ 0x70
 800650c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006510:	b003      	add	sp, #12
 8006512:	4770      	bx	lr
 8006514:	2000002c 	.word	0x2000002c
 8006518:	ffff0208 	.word	0xffff0208

0800651c <memset>:
 800651c:	4402      	add	r2, r0
 800651e:	4603      	mov	r3, r0
 8006520:	4293      	cmp	r3, r2
 8006522:	d100      	bne.n	8006526 <memset+0xa>
 8006524:	4770      	bx	lr
 8006526:	f803 1b01 	strb.w	r1, [r3], #1
 800652a:	e7f9      	b.n	8006520 <memset+0x4>

0800652c <__errno>:
 800652c:	4b01      	ldr	r3, [pc, #4]	@ (8006534 <__errno+0x8>)
 800652e:	6818      	ldr	r0, [r3, #0]
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	2000002c 	.word	0x2000002c

08006538 <__libc_init_array>:
 8006538:	b570      	push	{r4, r5, r6, lr}
 800653a:	4d0d      	ldr	r5, [pc, #52]	@ (8006570 <__libc_init_array+0x38>)
 800653c:	4c0d      	ldr	r4, [pc, #52]	@ (8006574 <__libc_init_array+0x3c>)
 800653e:	1b64      	subs	r4, r4, r5
 8006540:	10a4      	asrs	r4, r4, #2
 8006542:	2600      	movs	r6, #0
 8006544:	42a6      	cmp	r6, r4
 8006546:	d109      	bne.n	800655c <__libc_init_array+0x24>
 8006548:	4d0b      	ldr	r5, [pc, #44]	@ (8006578 <__libc_init_array+0x40>)
 800654a:	4c0c      	ldr	r4, [pc, #48]	@ (800657c <__libc_init_array+0x44>)
 800654c:	f000 fc66 	bl	8006e1c <_init>
 8006550:	1b64      	subs	r4, r4, r5
 8006552:	10a4      	asrs	r4, r4, #2
 8006554:	2600      	movs	r6, #0
 8006556:	42a6      	cmp	r6, r4
 8006558:	d105      	bne.n	8006566 <__libc_init_array+0x2e>
 800655a:	bd70      	pop	{r4, r5, r6, pc}
 800655c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006560:	4798      	blx	r3
 8006562:	3601      	adds	r6, #1
 8006564:	e7ee      	b.n	8006544 <__libc_init_array+0xc>
 8006566:	f855 3b04 	ldr.w	r3, [r5], #4
 800656a:	4798      	blx	r3
 800656c:	3601      	adds	r6, #1
 800656e:	e7f2      	b.n	8006556 <__libc_init_array+0x1e>
 8006570:	08006fb8 	.word	0x08006fb8
 8006574:	08006fb8 	.word	0x08006fb8
 8006578:	08006fb8 	.word	0x08006fb8
 800657c:	08006fbc 	.word	0x08006fbc

08006580 <__retarget_lock_acquire_recursive>:
 8006580:	4770      	bx	lr

08006582 <__retarget_lock_release_recursive>:
 8006582:	4770      	bx	lr

08006584 <_free_r>:
 8006584:	b538      	push	{r3, r4, r5, lr}
 8006586:	4605      	mov	r5, r0
 8006588:	2900      	cmp	r1, #0
 800658a:	d041      	beq.n	8006610 <_free_r+0x8c>
 800658c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006590:	1f0c      	subs	r4, r1, #4
 8006592:	2b00      	cmp	r3, #0
 8006594:	bfb8      	it	lt
 8006596:	18e4      	addlt	r4, r4, r3
 8006598:	f000 f8e0 	bl	800675c <__malloc_lock>
 800659c:	4a1d      	ldr	r2, [pc, #116]	@ (8006614 <_free_r+0x90>)
 800659e:	6813      	ldr	r3, [r2, #0]
 80065a0:	b933      	cbnz	r3, 80065b0 <_free_r+0x2c>
 80065a2:	6063      	str	r3, [r4, #4]
 80065a4:	6014      	str	r4, [r2, #0]
 80065a6:	4628      	mov	r0, r5
 80065a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065ac:	f000 b8dc 	b.w	8006768 <__malloc_unlock>
 80065b0:	42a3      	cmp	r3, r4
 80065b2:	d908      	bls.n	80065c6 <_free_r+0x42>
 80065b4:	6820      	ldr	r0, [r4, #0]
 80065b6:	1821      	adds	r1, r4, r0
 80065b8:	428b      	cmp	r3, r1
 80065ba:	bf01      	itttt	eq
 80065bc:	6819      	ldreq	r1, [r3, #0]
 80065be:	685b      	ldreq	r3, [r3, #4]
 80065c0:	1809      	addeq	r1, r1, r0
 80065c2:	6021      	streq	r1, [r4, #0]
 80065c4:	e7ed      	b.n	80065a2 <_free_r+0x1e>
 80065c6:	461a      	mov	r2, r3
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	b10b      	cbz	r3, 80065d0 <_free_r+0x4c>
 80065cc:	42a3      	cmp	r3, r4
 80065ce:	d9fa      	bls.n	80065c6 <_free_r+0x42>
 80065d0:	6811      	ldr	r1, [r2, #0]
 80065d2:	1850      	adds	r0, r2, r1
 80065d4:	42a0      	cmp	r0, r4
 80065d6:	d10b      	bne.n	80065f0 <_free_r+0x6c>
 80065d8:	6820      	ldr	r0, [r4, #0]
 80065da:	4401      	add	r1, r0
 80065dc:	1850      	adds	r0, r2, r1
 80065de:	4283      	cmp	r3, r0
 80065e0:	6011      	str	r1, [r2, #0]
 80065e2:	d1e0      	bne.n	80065a6 <_free_r+0x22>
 80065e4:	6818      	ldr	r0, [r3, #0]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	6053      	str	r3, [r2, #4]
 80065ea:	4408      	add	r0, r1
 80065ec:	6010      	str	r0, [r2, #0]
 80065ee:	e7da      	b.n	80065a6 <_free_r+0x22>
 80065f0:	d902      	bls.n	80065f8 <_free_r+0x74>
 80065f2:	230c      	movs	r3, #12
 80065f4:	602b      	str	r3, [r5, #0]
 80065f6:	e7d6      	b.n	80065a6 <_free_r+0x22>
 80065f8:	6820      	ldr	r0, [r4, #0]
 80065fa:	1821      	adds	r1, r4, r0
 80065fc:	428b      	cmp	r3, r1
 80065fe:	bf04      	itt	eq
 8006600:	6819      	ldreq	r1, [r3, #0]
 8006602:	685b      	ldreq	r3, [r3, #4]
 8006604:	6063      	str	r3, [r4, #4]
 8006606:	bf04      	itt	eq
 8006608:	1809      	addeq	r1, r1, r0
 800660a:	6021      	streq	r1, [r4, #0]
 800660c:	6054      	str	r4, [r2, #4]
 800660e:	e7ca      	b.n	80065a6 <_free_r+0x22>
 8006610:	bd38      	pop	{r3, r4, r5, pc}
 8006612:	bf00      	nop
 8006614:	2000034c 	.word	0x2000034c

08006618 <sbrk_aligned>:
 8006618:	b570      	push	{r4, r5, r6, lr}
 800661a:	4e0f      	ldr	r6, [pc, #60]	@ (8006658 <sbrk_aligned+0x40>)
 800661c:	460c      	mov	r4, r1
 800661e:	6831      	ldr	r1, [r6, #0]
 8006620:	4605      	mov	r5, r0
 8006622:	b911      	cbnz	r1, 800662a <sbrk_aligned+0x12>
 8006624:	f000 fba6 	bl	8006d74 <_sbrk_r>
 8006628:	6030      	str	r0, [r6, #0]
 800662a:	4621      	mov	r1, r4
 800662c:	4628      	mov	r0, r5
 800662e:	f000 fba1 	bl	8006d74 <_sbrk_r>
 8006632:	1c43      	adds	r3, r0, #1
 8006634:	d103      	bne.n	800663e <sbrk_aligned+0x26>
 8006636:	f04f 34ff 	mov.w	r4, #4294967295
 800663a:	4620      	mov	r0, r4
 800663c:	bd70      	pop	{r4, r5, r6, pc}
 800663e:	1cc4      	adds	r4, r0, #3
 8006640:	f024 0403 	bic.w	r4, r4, #3
 8006644:	42a0      	cmp	r0, r4
 8006646:	d0f8      	beq.n	800663a <sbrk_aligned+0x22>
 8006648:	1a21      	subs	r1, r4, r0
 800664a:	4628      	mov	r0, r5
 800664c:	f000 fb92 	bl	8006d74 <_sbrk_r>
 8006650:	3001      	adds	r0, #1
 8006652:	d1f2      	bne.n	800663a <sbrk_aligned+0x22>
 8006654:	e7ef      	b.n	8006636 <sbrk_aligned+0x1e>
 8006656:	bf00      	nop
 8006658:	20000348 	.word	0x20000348

0800665c <_malloc_r>:
 800665c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006660:	1ccd      	adds	r5, r1, #3
 8006662:	f025 0503 	bic.w	r5, r5, #3
 8006666:	3508      	adds	r5, #8
 8006668:	2d0c      	cmp	r5, #12
 800666a:	bf38      	it	cc
 800666c:	250c      	movcc	r5, #12
 800666e:	2d00      	cmp	r5, #0
 8006670:	4606      	mov	r6, r0
 8006672:	db01      	blt.n	8006678 <_malloc_r+0x1c>
 8006674:	42a9      	cmp	r1, r5
 8006676:	d904      	bls.n	8006682 <_malloc_r+0x26>
 8006678:	230c      	movs	r3, #12
 800667a:	6033      	str	r3, [r6, #0]
 800667c:	2000      	movs	r0, #0
 800667e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006682:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006758 <_malloc_r+0xfc>
 8006686:	f000 f869 	bl	800675c <__malloc_lock>
 800668a:	f8d8 3000 	ldr.w	r3, [r8]
 800668e:	461c      	mov	r4, r3
 8006690:	bb44      	cbnz	r4, 80066e4 <_malloc_r+0x88>
 8006692:	4629      	mov	r1, r5
 8006694:	4630      	mov	r0, r6
 8006696:	f7ff ffbf 	bl	8006618 <sbrk_aligned>
 800669a:	1c43      	adds	r3, r0, #1
 800669c:	4604      	mov	r4, r0
 800669e:	d158      	bne.n	8006752 <_malloc_r+0xf6>
 80066a0:	f8d8 4000 	ldr.w	r4, [r8]
 80066a4:	4627      	mov	r7, r4
 80066a6:	2f00      	cmp	r7, #0
 80066a8:	d143      	bne.n	8006732 <_malloc_r+0xd6>
 80066aa:	2c00      	cmp	r4, #0
 80066ac:	d04b      	beq.n	8006746 <_malloc_r+0xea>
 80066ae:	6823      	ldr	r3, [r4, #0]
 80066b0:	4639      	mov	r1, r7
 80066b2:	4630      	mov	r0, r6
 80066b4:	eb04 0903 	add.w	r9, r4, r3
 80066b8:	f000 fb5c 	bl	8006d74 <_sbrk_r>
 80066bc:	4581      	cmp	r9, r0
 80066be:	d142      	bne.n	8006746 <_malloc_r+0xea>
 80066c0:	6821      	ldr	r1, [r4, #0]
 80066c2:	1a6d      	subs	r5, r5, r1
 80066c4:	4629      	mov	r1, r5
 80066c6:	4630      	mov	r0, r6
 80066c8:	f7ff ffa6 	bl	8006618 <sbrk_aligned>
 80066cc:	3001      	adds	r0, #1
 80066ce:	d03a      	beq.n	8006746 <_malloc_r+0xea>
 80066d0:	6823      	ldr	r3, [r4, #0]
 80066d2:	442b      	add	r3, r5
 80066d4:	6023      	str	r3, [r4, #0]
 80066d6:	f8d8 3000 	ldr.w	r3, [r8]
 80066da:	685a      	ldr	r2, [r3, #4]
 80066dc:	bb62      	cbnz	r2, 8006738 <_malloc_r+0xdc>
 80066de:	f8c8 7000 	str.w	r7, [r8]
 80066e2:	e00f      	b.n	8006704 <_malloc_r+0xa8>
 80066e4:	6822      	ldr	r2, [r4, #0]
 80066e6:	1b52      	subs	r2, r2, r5
 80066e8:	d420      	bmi.n	800672c <_malloc_r+0xd0>
 80066ea:	2a0b      	cmp	r2, #11
 80066ec:	d917      	bls.n	800671e <_malloc_r+0xc2>
 80066ee:	1961      	adds	r1, r4, r5
 80066f0:	42a3      	cmp	r3, r4
 80066f2:	6025      	str	r5, [r4, #0]
 80066f4:	bf18      	it	ne
 80066f6:	6059      	strne	r1, [r3, #4]
 80066f8:	6863      	ldr	r3, [r4, #4]
 80066fa:	bf08      	it	eq
 80066fc:	f8c8 1000 	streq.w	r1, [r8]
 8006700:	5162      	str	r2, [r4, r5]
 8006702:	604b      	str	r3, [r1, #4]
 8006704:	4630      	mov	r0, r6
 8006706:	f000 f82f 	bl	8006768 <__malloc_unlock>
 800670a:	f104 000b 	add.w	r0, r4, #11
 800670e:	1d23      	adds	r3, r4, #4
 8006710:	f020 0007 	bic.w	r0, r0, #7
 8006714:	1ac2      	subs	r2, r0, r3
 8006716:	bf1c      	itt	ne
 8006718:	1a1b      	subne	r3, r3, r0
 800671a:	50a3      	strne	r3, [r4, r2]
 800671c:	e7af      	b.n	800667e <_malloc_r+0x22>
 800671e:	6862      	ldr	r2, [r4, #4]
 8006720:	42a3      	cmp	r3, r4
 8006722:	bf0c      	ite	eq
 8006724:	f8c8 2000 	streq.w	r2, [r8]
 8006728:	605a      	strne	r2, [r3, #4]
 800672a:	e7eb      	b.n	8006704 <_malloc_r+0xa8>
 800672c:	4623      	mov	r3, r4
 800672e:	6864      	ldr	r4, [r4, #4]
 8006730:	e7ae      	b.n	8006690 <_malloc_r+0x34>
 8006732:	463c      	mov	r4, r7
 8006734:	687f      	ldr	r7, [r7, #4]
 8006736:	e7b6      	b.n	80066a6 <_malloc_r+0x4a>
 8006738:	461a      	mov	r2, r3
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	42a3      	cmp	r3, r4
 800673e:	d1fb      	bne.n	8006738 <_malloc_r+0xdc>
 8006740:	2300      	movs	r3, #0
 8006742:	6053      	str	r3, [r2, #4]
 8006744:	e7de      	b.n	8006704 <_malloc_r+0xa8>
 8006746:	230c      	movs	r3, #12
 8006748:	6033      	str	r3, [r6, #0]
 800674a:	4630      	mov	r0, r6
 800674c:	f000 f80c 	bl	8006768 <__malloc_unlock>
 8006750:	e794      	b.n	800667c <_malloc_r+0x20>
 8006752:	6005      	str	r5, [r0, #0]
 8006754:	e7d6      	b.n	8006704 <_malloc_r+0xa8>
 8006756:	bf00      	nop
 8006758:	2000034c 	.word	0x2000034c

0800675c <__malloc_lock>:
 800675c:	4801      	ldr	r0, [pc, #4]	@ (8006764 <__malloc_lock+0x8>)
 800675e:	f7ff bf0f 	b.w	8006580 <__retarget_lock_acquire_recursive>
 8006762:	bf00      	nop
 8006764:	20000344 	.word	0x20000344

08006768 <__malloc_unlock>:
 8006768:	4801      	ldr	r0, [pc, #4]	@ (8006770 <__malloc_unlock+0x8>)
 800676a:	f7ff bf0a 	b.w	8006582 <__retarget_lock_release_recursive>
 800676e:	bf00      	nop
 8006770:	20000344 	.word	0x20000344

08006774 <__ssputs_r>:
 8006774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006778:	688e      	ldr	r6, [r1, #8]
 800677a:	461f      	mov	r7, r3
 800677c:	42be      	cmp	r6, r7
 800677e:	680b      	ldr	r3, [r1, #0]
 8006780:	4682      	mov	sl, r0
 8006782:	460c      	mov	r4, r1
 8006784:	4690      	mov	r8, r2
 8006786:	d82d      	bhi.n	80067e4 <__ssputs_r+0x70>
 8006788:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800678c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006790:	d026      	beq.n	80067e0 <__ssputs_r+0x6c>
 8006792:	6965      	ldr	r5, [r4, #20]
 8006794:	6909      	ldr	r1, [r1, #16]
 8006796:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800679a:	eba3 0901 	sub.w	r9, r3, r1
 800679e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80067a2:	1c7b      	adds	r3, r7, #1
 80067a4:	444b      	add	r3, r9
 80067a6:	106d      	asrs	r5, r5, #1
 80067a8:	429d      	cmp	r5, r3
 80067aa:	bf38      	it	cc
 80067ac:	461d      	movcc	r5, r3
 80067ae:	0553      	lsls	r3, r2, #21
 80067b0:	d527      	bpl.n	8006802 <__ssputs_r+0x8e>
 80067b2:	4629      	mov	r1, r5
 80067b4:	f7ff ff52 	bl	800665c <_malloc_r>
 80067b8:	4606      	mov	r6, r0
 80067ba:	b360      	cbz	r0, 8006816 <__ssputs_r+0xa2>
 80067bc:	6921      	ldr	r1, [r4, #16]
 80067be:	464a      	mov	r2, r9
 80067c0:	f000 fae8 	bl	8006d94 <memcpy>
 80067c4:	89a3      	ldrh	r3, [r4, #12]
 80067c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80067ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067ce:	81a3      	strh	r3, [r4, #12]
 80067d0:	6126      	str	r6, [r4, #16]
 80067d2:	6165      	str	r5, [r4, #20]
 80067d4:	444e      	add	r6, r9
 80067d6:	eba5 0509 	sub.w	r5, r5, r9
 80067da:	6026      	str	r6, [r4, #0]
 80067dc:	60a5      	str	r5, [r4, #8]
 80067de:	463e      	mov	r6, r7
 80067e0:	42be      	cmp	r6, r7
 80067e2:	d900      	bls.n	80067e6 <__ssputs_r+0x72>
 80067e4:	463e      	mov	r6, r7
 80067e6:	6820      	ldr	r0, [r4, #0]
 80067e8:	4632      	mov	r2, r6
 80067ea:	4641      	mov	r1, r8
 80067ec:	f000 faa8 	bl	8006d40 <memmove>
 80067f0:	68a3      	ldr	r3, [r4, #8]
 80067f2:	1b9b      	subs	r3, r3, r6
 80067f4:	60a3      	str	r3, [r4, #8]
 80067f6:	6823      	ldr	r3, [r4, #0]
 80067f8:	4433      	add	r3, r6
 80067fa:	6023      	str	r3, [r4, #0]
 80067fc:	2000      	movs	r0, #0
 80067fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006802:	462a      	mov	r2, r5
 8006804:	f000 fad4 	bl	8006db0 <_realloc_r>
 8006808:	4606      	mov	r6, r0
 800680a:	2800      	cmp	r0, #0
 800680c:	d1e0      	bne.n	80067d0 <__ssputs_r+0x5c>
 800680e:	6921      	ldr	r1, [r4, #16]
 8006810:	4650      	mov	r0, sl
 8006812:	f7ff feb7 	bl	8006584 <_free_r>
 8006816:	230c      	movs	r3, #12
 8006818:	f8ca 3000 	str.w	r3, [sl]
 800681c:	89a3      	ldrh	r3, [r4, #12]
 800681e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006822:	81a3      	strh	r3, [r4, #12]
 8006824:	f04f 30ff 	mov.w	r0, #4294967295
 8006828:	e7e9      	b.n	80067fe <__ssputs_r+0x8a>
	...

0800682c <_svfiprintf_r>:
 800682c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006830:	4698      	mov	r8, r3
 8006832:	898b      	ldrh	r3, [r1, #12]
 8006834:	061b      	lsls	r3, r3, #24
 8006836:	b09d      	sub	sp, #116	@ 0x74
 8006838:	4607      	mov	r7, r0
 800683a:	460d      	mov	r5, r1
 800683c:	4614      	mov	r4, r2
 800683e:	d510      	bpl.n	8006862 <_svfiprintf_r+0x36>
 8006840:	690b      	ldr	r3, [r1, #16]
 8006842:	b973      	cbnz	r3, 8006862 <_svfiprintf_r+0x36>
 8006844:	2140      	movs	r1, #64	@ 0x40
 8006846:	f7ff ff09 	bl	800665c <_malloc_r>
 800684a:	6028      	str	r0, [r5, #0]
 800684c:	6128      	str	r0, [r5, #16]
 800684e:	b930      	cbnz	r0, 800685e <_svfiprintf_r+0x32>
 8006850:	230c      	movs	r3, #12
 8006852:	603b      	str	r3, [r7, #0]
 8006854:	f04f 30ff 	mov.w	r0, #4294967295
 8006858:	b01d      	add	sp, #116	@ 0x74
 800685a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800685e:	2340      	movs	r3, #64	@ 0x40
 8006860:	616b      	str	r3, [r5, #20]
 8006862:	2300      	movs	r3, #0
 8006864:	9309      	str	r3, [sp, #36]	@ 0x24
 8006866:	2320      	movs	r3, #32
 8006868:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800686c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006870:	2330      	movs	r3, #48	@ 0x30
 8006872:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006a10 <_svfiprintf_r+0x1e4>
 8006876:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800687a:	f04f 0901 	mov.w	r9, #1
 800687e:	4623      	mov	r3, r4
 8006880:	469a      	mov	sl, r3
 8006882:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006886:	b10a      	cbz	r2, 800688c <_svfiprintf_r+0x60>
 8006888:	2a25      	cmp	r2, #37	@ 0x25
 800688a:	d1f9      	bne.n	8006880 <_svfiprintf_r+0x54>
 800688c:	ebba 0b04 	subs.w	fp, sl, r4
 8006890:	d00b      	beq.n	80068aa <_svfiprintf_r+0x7e>
 8006892:	465b      	mov	r3, fp
 8006894:	4622      	mov	r2, r4
 8006896:	4629      	mov	r1, r5
 8006898:	4638      	mov	r0, r7
 800689a:	f7ff ff6b 	bl	8006774 <__ssputs_r>
 800689e:	3001      	adds	r0, #1
 80068a0:	f000 80a7 	beq.w	80069f2 <_svfiprintf_r+0x1c6>
 80068a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068a6:	445a      	add	r2, fp
 80068a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80068aa:	f89a 3000 	ldrb.w	r3, [sl]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f000 809f 	beq.w	80069f2 <_svfiprintf_r+0x1c6>
 80068b4:	2300      	movs	r3, #0
 80068b6:	f04f 32ff 	mov.w	r2, #4294967295
 80068ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068be:	f10a 0a01 	add.w	sl, sl, #1
 80068c2:	9304      	str	r3, [sp, #16]
 80068c4:	9307      	str	r3, [sp, #28]
 80068c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80068ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80068cc:	4654      	mov	r4, sl
 80068ce:	2205      	movs	r2, #5
 80068d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068d4:	484e      	ldr	r0, [pc, #312]	@ (8006a10 <_svfiprintf_r+0x1e4>)
 80068d6:	f7f9 fc7b 	bl	80001d0 <memchr>
 80068da:	9a04      	ldr	r2, [sp, #16]
 80068dc:	b9d8      	cbnz	r0, 8006916 <_svfiprintf_r+0xea>
 80068de:	06d0      	lsls	r0, r2, #27
 80068e0:	bf44      	itt	mi
 80068e2:	2320      	movmi	r3, #32
 80068e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068e8:	0711      	lsls	r1, r2, #28
 80068ea:	bf44      	itt	mi
 80068ec:	232b      	movmi	r3, #43	@ 0x2b
 80068ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068f2:	f89a 3000 	ldrb.w	r3, [sl]
 80068f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80068f8:	d015      	beq.n	8006926 <_svfiprintf_r+0xfa>
 80068fa:	9a07      	ldr	r2, [sp, #28]
 80068fc:	4654      	mov	r4, sl
 80068fe:	2000      	movs	r0, #0
 8006900:	f04f 0c0a 	mov.w	ip, #10
 8006904:	4621      	mov	r1, r4
 8006906:	f811 3b01 	ldrb.w	r3, [r1], #1
 800690a:	3b30      	subs	r3, #48	@ 0x30
 800690c:	2b09      	cmp	r3, #9
 800690e:	d94b      	bls.n	80069a8 <_svfiprintf_r+0x17c>
 8006910:	b1b0      	cbz	r0, 8006940 <_svfiprintf_r+0x114>
 8006912:	9207      	str	r2, [sp, #28]
 8006914:	e014      	b.n	8006940 <_svfiprintf_r+0x114>
 8006916:	eba0 0308 	sub.w	r3, r0, r8
 800691a:	fa09 f303 	lsl.w	r3, r9, r3
 800691e:	4313      	orrs	r3, r2
 8006920:	9304      	str	r3, [sp, #16]
 8006922:	46a2      	mov	sl, r4
 8006924:	e7d2      	b.n	80068cc <_svfiprintf_r+0xa0>
 8006926:	9b03      	ldr	r3, [sp, #12]
 8006928:	1d19      	adds	r1, r3, #4
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	9103      	str	r1, [sp, #12]
 800692e:	2b00      	cmp	r3, #0
 8006930:	bfbb      	ittet	lt
 8006932:	425b      	neglt	r3, r3
 8006934:	f042 0202 	orrlt.w	r2, r2, #2
 8006938:	9307      	strge	r3, [sp, #28]
 800693a:	9307      	strlt	r3, [sp, #28]
 800693c:	bfb8      	it	lt
 800693e:	9204      	strlt	r2, [sp, #16]
 8006940:	7823      	ldrb	r3, [r4, #0]
 8006942:	2b2e      	cmp	r3, #46	@ 0x2e
 8006944:	d10a      	bne.n	800695c <_svfiprintf_r+0x130>
 8006946:	7863      	ldrb	r3, [r4, #1]
 8006948:	2b2a      	cmp	r3, #42	@ 0x2a
 800694a:	d132      	bne.n	80069b2 <_svfiprintf_r+0x186>
 800694c:	9b03      	ldr	r3, [sp, #12]
 800694e:	1d1a      	adds	r2, r3, #4
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	9203      	str	r2, [sp, #12]
 8006954:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006958:	3402      	adds	r4, #2
 800695a:	9305      	str	r3, [sp, #20]
 800695c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006a20 <_svfiprintf_r+0x1f4>
 8006960:	7821      	ldrb	r1, [r4, #0]
 8006962:	2203      	movs	r2, #3
 8006964:	4650      	mov	r0, sl
 8006966:	f7f9 fc33 	bl	80001d0 <memchr>
 800696a:	b138      	cbz	r0, 800697c <_svfiprintf_r+0x150>
 800696c:	9b04      	ldr	r3, [sp, #16]
 800696e:	eba0 000a 	sub.w	r0, r0, sl
 8006972:	2240      	movs	r2, #64	@ 0x40
 8006974:	4082      	lsls	r2, r0
 8006976:	4313      	orrs	r3, r2
 8006978:	3401      	adds	r4, #1
 800697a:	9304      	str	r3, [sp, #16]
 800697c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006980:	4824      	ldr	r0, [pc, #144]	@ (8006a14 <_svfiprintf_r+0x1e8>)
 8006982:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006986:	2206      	movs	r2, #6
 8006988:	f7f9 fc22 	bl	80001d0 <memchr>
 800698c:	2800      	cmp	r0, #0
 800698e:	d036      	beq.n	80069fe <_svfiprintf_r+0x1d2>
 8006990:	4b21      	ldr	r3, [pc, #132]	@ (8006a18 <_svfiprintf_r+0x1ec>)
 8006992:	bb1b      	cbnz	r3, 80069dc <_svfiprintf_r+0x1b0>
 8006994:	9b03      	ldr	r3, [sp, #12]
 8006996:	3307      	adds	r3, #7
 8006998:	f023 0307 	bic.w	r3, r3, #7
 800699c:	3308      	adds	r3, #8
 800699e:	9303      	str	r3, [sp, #12]
 80069a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069a2:	4433      	add	r3, r6
 80069a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80069a6:	e76a      	b.n	800687e <_svfiprintf_r+0x52>
 80069a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80069ac:	460c      	mov	r4, r1
 80069ae:	2001      	movs	r0, #1
 80069b0:	e7a8      	b.n	8006904 <_svfiprintf_r+0xd8>
 80069b2:	2300      	movs	r3, #0
 80069b4:	3401      	adds	r4, #1
 80069b6:	9305      	str	r3, [sp, #20]
 80069b8:	4619      	mov	r1, r3
 80069ba:	f04f 0c0a 	mov.w	ip, #10
 80069be:	4620      	mov	r0, r4
 80069c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069c4:	3a30      	subs	r2, #48	@ 0x30
 80069c6:	2a09      	cmp	r2, #9
 80069c8:	d903      	bls.n	80069d2 <_svfiprintf_r+0x1a6>
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d0c6      	beq.n	800695c <_svfiprintf_r+0x130>
 80069ce:	9105      	str	r1, [sp, #20]
 80069d0:	e7c4      	b.n	800695c <_svfiprintf_r+0x130>
 80069d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80069d6:	4604      	mov	r4, r0
 80069d8:	2301      	movs	r3, #1
 80069da:	e7f0      	b.n	80069be <_svfiprintf_r+0x192>
 80069dc:	ab03      	add	r3, sp, #12
 80069de:	9300      	str	r3, [sp, #0]
 80069e0:	462a      	mov	r2, r5
 80069e2:	4b0e      	ldr	r3, [pc, #56]	@ (8006a1c <_svfiprintf_r+0x1f0>)
 80069e4:	a904      	add	r1, sp, #16
 80069e6:	4638      	mov	r0, r7
 80069e8:	f3af 8000 	nop.w
 80069ec:	1c42      	adds	r2, r0, #1
 80069ee:	4606      	mov	r6, r0
 80069f0:	d1d6      	bne.n	80069a0 <_svfiprintf_r+0x174>
 80069f2:	89ab      	ldrh	r3, [r5, #12]
 80069f4:	065b      	lsls	r3, r3, #25
 80069f6:	f53f af2d 	bmi.w	8006854 <_svfiprintf_r+0x28>
 80069fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80069fc:	e72c      	b.n	8006858 <_svfiprintf_r+0x2c>
 80069fe:	ab03      	add	r3, sp, #12
 8006a00:	9300      	str	r3, [sp, #0]
 8006a02:	462a      	mov	r2, r5
 8006a04:	4b05      	ldr	r3, [pc, #20]	@ (8006a1c <_svfiprintf_r+0x1f0>)
 8006a06:	a904      	add	r1, sp, #16
 8006a08:	4638      	mov	r0, r7
 8006a0a:	f000 f879 	bl	8006b00 <_printf_i>
 8006a0e:	e7ed      	b.n	80069ec <_svfiprintf_r+0x1c0>
 8006a10:	08006f7c 	.word	0x08006f7c
 8006a14:	08006f86 	.word	0x08006f86
 8006a18:	00000000 	.word	0x00000000
 8006a1c:	08006775 	.word	0x08006775
 8006a20:	08006f82 	.word	0x08006f82

08006a24 <_printf_common>:
 8006a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a28:	4616      	mov	r6, r2
 8006a2a:	4698      	mov	r8, r3
 8006a2c:	688a      	ldr	r2, [r1, #8]
 8006a2e:	690b      	ldr	r3, [r1, #16]
 8006a30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a34:	4293      	cmp	r3, r2
 8006a36:	bfb8      	it	lt
 8006a38:	4613      	movlt	r3, r2
 8006a3a:	6033      	str	r3, [r6, #0]
 8006a3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006a40:	4607      	mov	r7, r0
 8006a42:	460c      	mov	r4, r1
 8006a44:	b10a      	cbz	r2, 8006a4a <_printf_common+0x26>
 8006a46:	3301      	adds	r3, #1
 8006a48:	6033      	str	r3, [r6, #0]
 8006a4a:	6823      	ldr	r3, [r4, #0]
 8006a4c:	0699      	lsls	r1, r3, #26
 8006a4e:	bf42      	ittt	mi
 8006a50:	6833      	ldrmi	r3, [r6, #0]
 8006a52:	3302      	addmi	r3, #2
 8006a54:	6033      	strmi	r3, [r6, #0]
 8006a56:	6825      	ldr	r5, [r4, #0]
 8006a58:	f015 0506 	ands.w	r5, r5, #6
 8006a5c:	d106      	bne.n	8006a6c <_printf_common+0x48>
 8006a5e:	f104 0a19 	add.w	sl, r4, #25
 8006a62:	68e3      	ldr	r3, [r4, #12]
 8006a64:	6832      	ldr	r2, [r6, #0]
 8006a66:	1a9b      	subs	r3, r3, r2
 8006a68:	42ab      	cmp	r3, r5
 8006a6a:	dc26      	bgt.n	8006aba <_printf_common+0x96>
 8006a6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006a70:	6822      	ldr	r2, [r4, #0]
 8006a72:	3b00      	subs	r3, #0
 8006a74:	bf18      	it	ne
 8006a76:	2301      	movne	r3, #1
 8006a78:	0692      	lsls	r2, r2, #26
 8006a7a:	d42b      	bmi.n	8006ad4 <_printf_common+0xb0>
 8006a7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006a80:	4641      	mov	r1, r8
 8006a82:	4638      	mov	r0, r7
 8006a84:	47c8      	blx	r9
 8006a86:	3001      	adds	r0, #1
 8006a88:	d01e      	beq.n	8006ac8 <_printf_common+0xa4>
 8006a8a:	6823      	ldr	r3, [r4, #0]
 8006a8c:	6922      	ldr	r2, [r4, #16]
 8006a8e:	f003 0306 	and.w	r3, r3, #6
 8006a92:	2b04      	cmp	r3, #4
 8006a94:	bf02      	ittt	eq
 8006a96:	68e5      	ldreq	r5, [r4, #12]
 8006a98:	6833      	ldreq	r3, [r6, #0]
 8006a9a:	1aed      	subeq	r5, r5, r3
 8006a9c:	68a3      	ldr	r3, [r4, #8]
 8006a9e:	bf0c      	ite	eq
 8006aa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006aa4:	2500      	movne	r5, #0
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	bfc4      	itt	gt
 8006aaa:	1a9b      	subgt	r3, r3, r2
 8006aac:	18ed      	addgt	r5, r5, r3
 8006aae:	2600      	movs	r6, #0
 8006ab0:	341a      	adds	r4, #26
 8006ab2:	42b5      	cmp	r5, r6
 8006ab4:	d11a      	bne.n	8006aec <_printf_common+0xc8>
 8006ab6:	2000      	movs	r0, #0
 8006ab8:	e008      	b.n	8006acc <_printf_common+0xa8>
 8006aba:	2301      	movs	r3, #1
 8006abc:	4652      	mov	r2, sl
 8006abe:	4641      	mov	r1, r8
 8006ac0:	4638      	mov	r0, r7
 8006ac2:	47c8      	blx	r9
 8006ac4:	3001      	adds	r0, #1
 8006ac6:	d103      	bne.n	8006ad0 <_printf_common+0xac>
 8006ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8006acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ad0:	3501      	adds	r5, #1
 8006ad2:	e7c6      	b.n	8006a62 <_printf_common+0x3e>
 8006ad4:	18e1      	adds	r1, r4, r3
 8006ad6:	1c5a      	adds	r2, r3, #1
 8006ad8:	2030      	movs	r0, #48	@ 0x30
 8006ada:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006ade:	4422      	add	r2, r4
 8006ae0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ae4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006ae8:	3302      	adds	r3, #2
 8006aea:	e7c7      	b.n	8006a7c <_printf_common+0x58>
 8006aec:	2301      	movs	r3, #1
 8006aee:	4622      	mov	r2, r4
 8006af0:	4641      	mov	r1, r8
 8006af2:	4638      	mov	r0, r7
 8006af4:	47c8      	blx	r9
 8006af6:	3001      	adds	r0, #1
 8006af8:	d0e6      	beq.n	8006ac8 <_printf_common+0xa4>
 8006afa:	3601      	adds	r6, #1
 8006afc:	e7d9      	b.n	8006ab2 <_printf_common+0x8e>
	...

08006b00 <_printf_i>:
 8006b00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b04:	7e0f      	ldrb	r7, [r1, #24]
 8006b06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006b08:	2f78      	cmp	r7, #120	@ 0x78
 8006b0a:	4691      	mov	r9, r2
 8006b0c:	4680      	mov	r8, r0
 8006b0e:	460c      	mov	r4, r1
 8006b10:	469a      	mov	sl, r3
 8006b12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006b16:	d807      	bhi.n	8006b28 <_printf_i+0x28>
 8006b18:	2f62      	cmp	r7, #98	@ 0x62
 8006b1a:	d80a      	bhi.n	8006b32 <_printf_i+0x32>
 8006b1c:	2f00      	cmp	r7, #0
 8006b1e:	f000 80d2 	beq.w	8006cc6 <_printf_i+0x1c6>
 8006b22:	2f58      	cmp	r7, #88	@ 0x58
 8006b24:	f000 80b9 	beq.w	8006c9a <_printf_i+0x19a>
 8006b28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006b30:	e03a      	b.n	8006ba8 <_printf_i+0xa8>
 8006b32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006b36:	2b15      	cmp	r3, #21
 8006b38:	d8f6      	bhi.n	8006b28 <_printf_i+0x28>
 8006b3a:	a101      	add	r1, pc, #4	@ (adr r1, 8006b40 <_printf_i+0x40>)
 8006b3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b40:	08006b99 	.word	0x08006b99
 8006b44:	08006bad 	.word	0x08006bad
 8006b48:	08006b29 	.word	0x08006b29
 8006b4c:	08006b29 	.word	0x08006b29
 8006b50:	08006b29 	.word	0x08006b29
 8006b54:	08006b29 	.word	0x08006b29
 8006b58:	08006bad 	.word	0x08006bad
 8006b5c:	08006b29 	.word	0x08006b29
 8006b60:	08006b29 	.word	0x08006b29
 8006b64:	08006b29 	.word	0x08006b29
 8006b68:	08006b29 	.word	0x08006b29
 8006b6c:	08006cad 	.word	0x08006cad
 8006b70:	08006bd7 	.word	0x08006bd7
 8006b74:	08006c67 	.word	0x08006c67
 8006b78:	08006b29 	.word	0x08006b29
 8006b7c:	08006b29 	.word	0x08006b29
 8006b80:	08006ccf 	.word	0x08006ccf
 8006b84:	08006b29 	.word	0x08006b29
 8006b88:	08006bd7 	.word	0x08006bd7
 8006b8c:	08006b29 	.word	0x08006b29
 8006b90:	08006b29 	.word	0x08006b29
 8006b94:	08006c6f 	.word	0x08006c6f
 8006b98:	6833      	ldr	r3, [r6, #0]
 8006b9a:	1d1a      	adds	r2, r3, #4
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	6032      	str	r2, [r6, #0]
 8006ba0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ba4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e09d      	b.n	8006ce8 <_printf_i+0x1e8>
 8006bac:	6833      	ldr	r3, [r6, #0]
 8006bae:	6820      	ldr	r0, [r4, #0]
 8006bb0:	1d19      	adds	r1, r3, #4
 8006bb2:	6031      	str	r1, [r6, #0]
 8006bb4:	0606      	lsls	r6, r0, #24
 8006bb6:	d501      	bpl.n	8006bbc <_printf_i+0xbc>
 8006bb8:	681d      	ldr	r5, [r3, #0]
 8006bba:	e003      	b.n	8006bc4 <_printf_i+0xc4>
 8006bbc:	0645      	lsls	r5, r0, #25
 8006bbe:	d5fb      	bpl.n	8006bb8 <_printf_i+0xb8>
 8006bc0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006bc4:	2d00      	cmp	r5, #0
 8006bc6:	da03      	bge.n	8006bd0 <_printf_i+0xd0>
 8006bc8:	232d      	movs	r3, #45	@ 0x2d
 8006bca:	426d      	negs	r5, r5
 8006bcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bd0:	4859      	ldr	r0, [pc, #356]	@ (8006d38 <_printf_i+0x238>)
 8006bd2:	230a      	movs	r3, #10
 8006bd4:	e011      	b.n	8006bfa <_printf_i+0xfa>
 8006bd6:	6821      	ldr	r1, [r4, #0]
 8006bd8:	6833      	ldr	r3, [r6, #0]
 8006bda:	0608      	lsls	r0, r1, #24
 8006bdc:	f853 5b04 	ldr.w	r5, [r3], #4
 8006be0:	d402      	bmi.n	8006be8 <_printf_i+0xe8>
 8006be2:	0649      	lsls	r1, r1, #25
 8006be4:	bf48      	it	mi
 8006be6:	b2ad      	uxthmi	r5, r5
 8006be8:	2f6f      	cmp	r7, #111	@ 0x6f
 8006bea:	4853      	ldr	r0, [pc, #332]	@ (8006d38 <_printf_i+0x238>)
 8006bec:	6033      	str	r3, [r6, #0]
 8006bee:	bf14      	ite	ne
 8006bf0:	230a      	movne	r3, #10
 8006bf2:	2308      	moveq	r3, #8
 8006bf4:	2100      	movs	r1, #0
 8006bf6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006bfa:	6866      	ldr	r6, [r4, #4]
 8006bfc:	60a6      	str	r6, [r4, #8]
 8006bfe:	2e00      	cmp	r6, #0
 8006c00:	bfa2      	ittt	ge
 8006c02:	6821      	ldrge	r1, [r4, #0]
 8006c04:	f021 0104 	bicge.w	r1, r1, #4
 8006c08:	6021      	strge	r1, [r4, #0]
 8006c0a:	b90d      	cbnz	r5, 8006c10 <_printf_i+0x110>
 8006c0c:	2e00      	cmp	r6, #0
 8006c0e:	d04b      	beq.n	8006ca8 <_printf_i+0x1a8>
 8006c10:	4616      	mov	r6, r2
 8006c12:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c16:	fb03 5711 	mls	r7, r3, r1, r5
 8006c1a:	5dc7      	ldrb	r7, [r0, r7]
 8006c1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c20:	462f      	mov	r7, r5
 8006c22:	42bb      	cmp	r3, r7
 8006c24:	460d      	mov	r5, r1
 8006c26:	d9f4      	bls.n	8006c12 <_printf_i+0x112>
 8006c28:	2b08      	cmp	r3, #8
 8006c2a:	d10b      	bne.n	8006c44 <_printf_i+0x144>
 8006c2c:	6823      	ldr	r3, [r4, #0]
 8006c2e:	07df      	lsls	r7, r3, #31
 8006c30:	d508      	bpl.n	8006c44 <_printf_i+0x144>
 8006c32:	6923      	ldr	r3, [r4, #16]
 8006c34:	6861      	ldr	r1, [r4, #4]
 8006c36:	4299      	cmp	r1, r3
 8006c38:	bfde      	ittt	le
 8006c3a:	2330      	movle	r3, #48	@ 0x30
 8006c3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c40:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c44:	1b92      	subs	r2, r2, r6
 8006c46:	6122      	str	r2, [r4, #16]
 8006c48:	f8cd a000 	str.w	sl, [sp]
 8006c4c:	464b      	mov	r3, r9
 8006c4e:	aa03      	add	r2, sp, #12
 8006c50:	4621      	mov	r1, r4
 8006c52:	4640      	mov	r0, r8
 8006c54:	f7ff fee6 	bl	8006a24 <_printf_common>
 8006c58:	3001      	adds	r0, #1
 8006c5a:	d14a      	bne.n	8006cf2 <_printf_i+0x1f2>
 8006c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c60:	b004      	add	sp, #16
 8006c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c66:	6823      	ldr	r3, [r4, #0]
 8006c68:	f043 0320 	orr.w	r3, r3, #32
 8006c6c:	6023      	str	r3, [r4, #0]
 8006c6e:	4833      	ldr	r0, [pc, #204]	@ (8006d3c <_printf_i+0x23c>)
 8006c70:	2778      	movs	r7, #120	@ 0x78
 8006c72:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006c76:	6823      	ldr	r3, [r4, #0]
 8006c78:	6831      	ldr	r1, [r6, #0]
 8006c7a:	061f      	lsls	r7, r3, #24
 8006c7c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c80:	d402      	bmi.n	8006c88 <_printf_i+0x188>
 8006c82:	065f      	lsls	r7, r3, #25
 8006c84:	bf48      	it	mi
 8006c86:	b2ad      	uxthmi	r5, r5
 8006c88:	6031      	str	r1, [r6, #0]
 8006c8a:	07d9      	lsls	r1, r3, #31
 8006c8c:	bf44      	itt	mi
 8006c8e:	f043 0320 	orrmi.w	r3, r3, #32
 8006c92:	6023      	strmi	r3, [r4, #0]
 8006c94:	b11d      	cbz	r5, 8006c9e <_printf_i+0x19e>
 8006c96:	2310      	movs	r3, #16
 8006c98:	e7ac      	b.n	8006bf4 <_printf_i+0xf4>
 8006c9a:	4827      	ldr	r0, [pc, #156]	@ (8006d38 <_printf_i+0x238>)
 8006c9c:	e7e9      	b.n	8006c72 <_printf_i+0x172>
 8006c9e:	6823      	ldr	r3, [r4, #0]
 8006ca0:	f023 0320 	bic.w	r3, r3, #32
 8006ca4:	6023      	str	r3, [r4, #0]
 8006ca6:	e7f6      	b.n	8006c96 <_printf_i+0x196>
 8006ca8:	4616      	mov	r6, r2
 8006caa:	e7bd      	b.n	8006c28 <_printf_i+0x128>
 8006cac:	6833      	ldr	r3, [r6, #0]
 8006cae:	6825      	ldr	r5, [r4, #0]
 8006cb0:	6961      	ldr	r1, [r4, #20]
 8006cb2:	1d18      	adds	r0, r3, #4
 8006cb4:	6030      	str	r0, [r6, #0]
 8006cb6:	062e      	lsls	r6, r5, #24
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	d501      	bpl.n	8006cc0 <_printf_i+0x1c0>
 8006cbc:	6019      	str	r1, [r3, #0]
 8006cbe:	e002      	b.n	8006cc6 <_printf_i+0x1c6>
 8006cc0:	0668      	lsls	r0, r5, #25
 8006cc2:	d5fb      	bpl.n	8006cbc <_printf_i+0x1bc>
 8006cc4:	8019      	strh	r1, [r3, #0]
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	6123      	str	r3, [r4, #16]
 8006cca:	4616      	mov	r6, r2
 8006ccc:	e7bc      	b.n	8006c48 <_printf_i+0x148>
 8006cce:	6833      	ldr	r3, [r6, #0]
 8006cd0:	1d1a      	adds	r2, r3, #4
 8006cd2:	6032      	str	r2, [r6, #0]
 8006cd4:	681e      	ldr	r6, [r3, #0]
 8006cd6:	6862      	ldr	r2, [r4, #4]
 8006cd8:	2100      	movs	r1, #0
 8006cda:	4630      	mov	r0, r6
 8006cdc:	f7f9 fa78 	bl	80001d0 <memchr>
 8006ce0:	b108      	cbz	r0, 8006ce6 <_printf_i+0x1e6>
 8006ce2:	1b80      	subs	r0, r0, r6
 8006ce4:	6060      	str	r0, [r4, #4]
 8006ce6:	6863      	ldr	r3, [r4, #4]
 8006ce8:	6123      	str	r3, [r4, #16]
 8006cea:	2300      	movs	r3, #0
 8006cec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cf0:	e7aa      	b.n	8006c48 <_printf_i+0x148>
 8006cf2:	6923      	ldr	r3, [r4, #16]
 8006cf4:	4632      	mov	r2, r6
 8006cf6:	4649      	mov	r1, r9
 8006cf8:	4640      	mov	r0, r8
 8006cfa:	47d0      	blx	sl
 8006cfc:	3001      	adds	r0, #1
 8006cfe:	d0ad      	beq.n	8006c5c <_printf_i+0x15c>
 8006d00:	6823      	ldr	r3, [r4, #0]
 8006d02:	079b      	lsls	r3, r3, #30
 8006d04:	d413      	bmi.n	8006d2e <_printf_i+0x22e>
 8006d06:	68e0      	ldr	r0, [r4, #12]
 8006d08:	9b03      	ldr	r3, [sp, #12]
 8006d0a:	4298      	cmp	r0, r3
 8006d0c:	bfb8      	it	lt
 8006d0e:	4618      	movlt	r0, r3
 8006d10:	e7a6      	b.n	8006c60 <_printf_i+0x160>
 8006d12:	2301      	movs	r3, #1
 8006d14:	4632      	mov	r2, r6
 8006d16:	4649      	mov	r1, r9
 8006d18:	4640      	mov	r0, r8
 8006d1a:	47d0      	blx	sl
 8006d1c:	3001      	adds	r0, #1
 8006d1e:	d09d      	beq.n	8006c5c <_printf_i+0x15c>
 8006d20:	3501      	adds	r5, #1
 8006d22:	68e3      	ldr	r3, [r4, #12]
 8006d24:	9903      	ldr	r1, [sp, #12]
 8006d26:	1a5b      	subs	r3, r3, r1
 8006d28:	42ab      	cmp	r3, r5
 8006d2a:	dcf2      	bgt.n	8006d12 <_printf_i+0x212>
 8006d2c:	e7eb      	b.n	8006d06 <_printf_i+0x206>
 8006d2e:	2500      	movs	r5, #0
 8006d30:	f104 0619 	add.w	r6, r4, #25
 8006d34:	e7f5      	b.n	8006d22 <_printf_i+0x222>
 8006d36:	bf00      	nop
 8006d38:	08006f8d 	.word	0x08006f8d
 8006d3c:	08006f9e 	.word	0x08006f9e

08006d40 <memmove>:
 8006d40:	4288      	cmp	r0, r1
 8006d42:	b510      	push	{r4, lr}
 8006d44:	eb01 0402 	add.w	r4, r1, r2
 8006d48:	d902      	bls.n	8006d50 <memmove+0x10>
 8006d4a:	4284      	cmp	r4, r0
 8006d4c:	4623      	mov	r3, r4
 8006d4e:	d807      	bhi.n	8006d60 <memmove+0x20>
 8006d50:	1e43      	subs	r3, r0, #1
 8006d52:	42a1      	cmp	r1, r4
 8006d54:	d008      	beq.n	8006d68 <memmove+0x28>
 8006d56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d5e:	e7f8      	b.n	8006d52 <memmove+0x12>
 8006d60:	4402      	add	r2, r0
 8006d62:	4601      	mov	r1, r0
 8006d64:	428a      	cmp	r2, r1
 8006d66:	d100      	bne.n	8006d6a <memmove+0x2a>
 8006d68:	bd10      	pop	{r4, pc}
 8006d6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d72:	e7f7      	b.n	8006d64 <memmove+0x24>

08006d74 <_sbrk_r>:
 8006d74:	b538      	push	{r3, r4, r5, lr}
 8006d76:	4d06      	ldr	r5, [pc, #24]	@ (8006d90 <_sbrk_r+0x1c>)
 8006d78:	2300      	movs	r3, #0
 8006d7a:	4604      	mov	r4, r0
 8006d7c:	4608      	mov	r0, r1
 8006d7e:	602b      	str	r3, [r5, #0]
 8006d80:	f7fb fc0c 	bl	800259c <_sbrk>
 8006d84:	1c43      	adds	r3, r0, #1
 8006d86:	d102      	bne.n	8006d8e <_sbrk_r+0x1a>
 8006d88:	682b      	ldr	r3, [r5, #0]
 8006d8a:	b103      	cbz	r3, 8006d8e <_sbrk_r+0x1a>
 8006d8c:	6023      	str	r3, [r4, #0]
 8006d8e:	bd38      	pop	{r3, r4, r5, pc}
 8006d90:	20000340 	.word	0x20000340

08006d94 <memcpy>:
 8006d94:	440a      	add	r2, r1
 8006d96:	4291      	cmp	r1, r2
 8006d98:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d9c:	d100      	bne.n	8006da0 <memcpy+0xc>
 8006d9e:	4770      	bx	lr
 8006da0:	b510      	push	{r4, lr}
 8006da2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006da6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006daa:	4291      	cmp	r1, r2
 8006dac:	d1f9      	bne.n	8006da2 <memcpy+0xe>
 8006dae:	bd10      	pop	{r4, pc}

08006db0 <_realloc_r>:
 8006db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006db4:	4680      	mov	r8, r0
 8006db6:	4615      	mov	r5, r2
 8006db8:	460c      	mov	r4, r1
 8006dba:	b921      	cbnz	r1, 8006dc6 <_realloc_r+0x16>
 8006dbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006dc0:	4611      	mov	r1, r2
 8006dc2:	f7ff bc4b 	b.w	800665c <_malloc_r>
 8006dc6:	b92a      	cbnz	r2, 8006dd4 <_realloc_r+0x24>
 8006dc8:	f7ff fbdc 	bl	8006584 <_free_r>
 8006dcc:	2400      	movs	r4, #0
 8006dce:	4620      	mov	r0, r4
 8006dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dd4:	f000 f81a 	bl	8006e0c <_malloc_usable_size_r>
 8006dd8:	4285      	cmp	r5, r0
 8006dda:	4606      	mov	r6, r0
 8006ddc:	d802      	bhi.n	8006de4 <_realloc_r+0x34>
 8006dde:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006de2:	d8f4      	bhi.n	8006dce <_realloc_r+0x1e>
 8006de4:	4629      	mov	r1, r5
 8006de6:	4640      	mov	r0, r8
 8006de8:	f7ff fc38 	bl	800665c <_malloc_r>
 8006dec:	4607      	mov	r7, r0
 8006dee:	2800      	cmp	r0, #0
 8006df0:	d0ec      	beq.n	8006dcc <_realloc_r+0x1c>
 8006df2:	42b5      	cmp	r5, r6
 8006df4:	462a      	mov	r2, r5
 8006df6:	4621      	mov	r1, r4
 8006df8:	bf28      	it	cs
 8006dfa:	4632      	movcs	r2, r6
 8006dfc:	f7ff ffca 	bl	8006d94 <memcpy>
 8006e00:	4621      	mov	r1, r4
 8006e02:	4640      	mov	r0, r8
 8006e04:	f7ff fbbe 	bl	8006584 <_free_r>
 8006e08:	463c      	mov	r4, r7
 8006e0a:	e7e0      	b.n	8006dce <_realloc_r+0x1e>

08006e0c <_malloc_usable_size_r>:
 8006e0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e10:	1f18      	subs	r0, r3, #4
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	bfbc      	itt	lt
 8006e16:	580b      	ldrlt	r3, [r1, r0]
 8006e18:	18c0      	addlt	r0, r0, r3
 8006e1a:	4770      	bx	lr

08006e1c <_init>:
 8006e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e1e:	bf00      	nop
 8006e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e22:	bc08      	pop	{r3}
 8006e24:	469e      	mov	lr, r3
 8006e26:	4770      	bx	lr

08006e28 <_fini>:
 8006e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e2a:	bf00      	nop
 8006e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e2e:	bc08      	pop	{r3}
 8006e30:	469e      	mov	lr, r3
 8006e32:	4770      	bx	lr
